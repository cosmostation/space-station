/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots.gravity || ($protobuf.roots.gravity = {});

export const gravity = $root.gravity = (() => {

    /**
     * Namespace gravity.
     * @exports gravity
     * @namespace
     */
    const gravity = {};

    gravity.v1 = (function() {

        /**
         * Namespace v1.
         * @memberof gravity
         * @namespace
         */
        const v1 = {};

        /**
         * ClaimType enum.
         * @name gravity.v1.ClaimType
         * @enum {number}
         * @property {number} CLAIM_TYPE_UNSPECIFIED=0 CLAIM_TYPE_UNSPECIFIED value
         * @property {number} CLAIM_TYPE_SEND_TO_COSMOS=1 CLAIM_TYPE_SEND_TO_COSMOS value
         * @property {number} CLAIM_TYPE_BATCH_SEND_TO_ETH=2 CLAIM_TYPE_BATCH_SEND_TO_ETH value
         * @property {number} CLAIM_TYPE_ERC20_DEPLOYED=3 CLAIM_TYPE_ERC20_DEPLOYED value
         * @property {number} CLAIM_TYPE_LOGIC_CALL_EXECUTED=4 CLAIM_TYPE_LOGIC_CALL_EXECUTED value
         * @property {number} CLAIM_TYPE_VALSET_UPDATED=5 CLAIM_TYPE_VALSET_UPDATED value
         */
        v1.ClaimType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CLAIM_TYPE_UNSPECIFIED"] = 0;
            values[valuesById[1] = "CLAIM_TYPE_SEND_TO_COSMOS"] = 1;
            values[valuesById[2] = "CLAIM_TYPE_BATCH_SEND_TO_ETH"] = 2;
            values[valuesById[3] = "CLAIM_TYPE_ERC20_DEPLOYED"] = 3;
            values[valuesById[4] = "CLAIM_TYPE_LOGIC_CALL_EXECUTED"] = 4;
            values[valuesById[5] = "CLAIM_TYPE_VALSET_UPDATED"] = 5;
            return values;
        })();

        v1.Attestation = (function() {

            /**
             * Properties of an Attestation.
             * @memberof gravity.v1
             * @interface IAttestation
             * @property {boolean|null} [observed] Attestation observed
             * @property {Array.<string>|null} [votes] Attestation votes
             * @property {number|null} [height] Attestation height
             * @property {google.protobuf.IAny|null} [claim] Attestation claim
             */

            /**
             * Constructs a new Attestation.
             * @memberof gravity.v1
             * @classdesc Represents an Attestation.
             * @implements IAttestation
             * @constructor
             * @param {gravity.v1.IAttestation=} [properties] Properties to set
             */
            function Attestation(properties) {
                this.votes = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Attestation observed.
             * @member {boolean} observed
             * @memberof gravity.v1.Attestation
             * @instance
             */
            Attestation.prototype.observed = false;

            /**
             * Attestation votes.
             * @member {Array.<string>} votes
             * @memberof gravity.v1.Attestation
             * @instance
             */
            Attestation.prototype.votes = $util.emptyArray;

            /**
             * Attestation height.
             * @member {number} height
             * @memberof gravity.v1.Attestation
             * @instance
             */
            Attestation.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Attestation claim.
             * @member {google.protobuf.IAny|null|undefined} claim
             * @memberof gravity.v1.Attestation
             * @instance
             */
            Attestation.prototype.claim = null;

            /**
             * Encodes the specified Attestation message. Does not implicitly {@link gravity.v1.Attestation.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.Attestation
             * @static
             * @param {gravity.v1.IAttestation} message Attestation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Attestation.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.observed != null && Object.hasOwnProperty.call(message, "observed"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.observed);
                if (message.votes != null && message.votes.length)
                    for (let i = 0; i < message.votes.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.votes[i]);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.height);
                if (message.claim != null && Object.hasOwnProperty.call(message, "claim"))
                    $root.google.protobuf.Any.encode(message.claim, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Attestation message, length delimited. Does not implicitly {@link gravity.v1.Attestation.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.Attestation
             * @static
             * @param {gravity.v1.IAttestation} message Attestation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Attestation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Attestation message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.Attestation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.Attestation} Attestation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Attestation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.Attestation();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.observed = reader.bool();
                        break;
                    case 2:
                        if (!(message.votes && message.votes.length))
                            message.votes = [];
                        message.votes.push(reader.string());
                        break;
                    case 3:
                        message.height = reader.uint64();
                        break;
                    case 4:
                        message.claim = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Attestation message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.Attestation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.Attestation} Attestation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Attestation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Attestation message.
             * @function verify
             * @memberof gravity.v1.Attestation
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Attestation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.observed != null && message.hasOwnProperty("observed"))
                    if (typeof message.observed !== "boolean")
                        return "observed: boolean expected";
                if (message.votes != null && message.hasOwnProperty("votes")) {
                    if (!Array.isArray(message.votes))
                        return "votes: array expected";
                    for (let i = 0; i < message.votes.length; ++i)
                        if (!$util.isString(message.votes[i]))
                            return "votes: string[] expected";
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.claim != null && message.hasOwnProperty("claim")) {
                    let error = $root.google.protobuf.Any.verify(message.claim);
                    if (error)
                        return "claim." + error;
                }
                return null;
            };

            /**
             * Creates an Attestation message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.Attestation
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.Attestation} Attestation
             */
            Attestation.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.Attestation)
                    return object;
                let message = new $root.gravity.v1.Attestation();
                if (object.observed != null)
                    message.observed = Boolean(object.observed);
                if (object.votes) {
                    if (!Array.isArray(object.votes))
                        throw TypeError(".gravity.v1.Attestation.votes: array expected");
                    message.votes = [];
                    for (let i = 0; i < object.votes.length; ++i)
                        message.votes[i] = String(object.votes[i]);
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.claim != null) {
                    if (typeof object.claim !== "object")
                        throw TypeError(".gravity.v1.Attestation.claim: object expected");
                    message.claim = $root.google.protobuf.Any.fromObject(object.claim);
                }
                return message;
            };

            /**
             * Creates a plain object from an Attestation message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.Attestation
             * @static
             * @param {gravity.v1.Attestation} message Attestation
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Attestation.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.votes = [];
                if (options.defaults) {
                    object.observed = false;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.claim = null;
                }
                if (message.observed != null && message.hasOwnProperty("observed"))
                    object.observed = message.observed;
                if (message.votes && message.votes.length) {
                    object.votes = [];
                    for (let j = 0; j < message.votes.length; ++j)
                        object.votes[j] = message.votes[j];
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.claim != null && message.hasOwnProperty("claim"))
                    object.claim = $root.google.protobuf.Any.toObject(message.claim, options);
                return object;
            };

            /**
             * Converts this Attestation to JSON.
             * @function toJSON
             * @memberof gravity.v1.Attestation
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Attestation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Attestation;
        })();

        v1.ERC20Token = (function() {

            /**
             * Properties of a ERC20Token.
             * @memberof gravity.v1
             * @interface IERC20Token
             * @property {string|null} [contract] ERC20Token contract
             * @property {string|null} [amount] ERC20Token amount
             */

            /**
             * Constructs a new ERC20Token.
             * @memberof gravity.v1
             * @classdesc Represents a ERC20Token.
             * @implements IERC20Token
             * @constructor
             * @param {gravity.v1.IERC20Token=} [properties] Properties to set
             */
            function ERC20Token(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ERC20Token contract.
             * @member {string} contract
             * @memberof gravity.v1.ERC20Token
             * @instance
             */
            ERC20Token.prototype.contract = "";

            /**
             * ERC20Token amount.
             * @member {string} amount
             * @memberof gravity.v1.ERC20Token
             * @instance
             */
            ERC20Token.prototype.amount = "";

            /**
             * Encodes the specified ERC20Token message. Does not implicitly {@link gravity.v1.ERC20Token.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.ERC20Token
             * @static
             * @param {gravity.v1.IERC20Token} message ERC20Token message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ERC20Token.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.contract);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                return writer;
            };

            /**
             * Encodes the specified ERC20Token message, length delimited. Does not implicitly {@link gravity.v1.ERC20Token.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.ERC20Token
             * @static
             * @param {gravity.v1.IERC20Token} message ERC20Token message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ERC20Token.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ERC20Token message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.ERC20Token
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.ERC20Token} ERC20Token
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ERC20Token.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.ERC20Token();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.contract = reader.string();
                        break;
                    case 2:
                        message.amount = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ERC20Token message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.ERC20Token
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.ERC20Token} ERC20Token
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ERC20Token.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ERC20Token message.
             * @function verify
             * @memberof gravity.v1.ERC20Token
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ERC20Token.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.contract != null && message.hasOwnProperty("contract"))
                    if (!$util.isString(message.contract))
                        return "contract: string expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isString(message.amount))
                        return "amount: string expected";
                return null;
            };

            /**
             * Creates a ERC20Token message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.ERC20Token
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.ERC20Token} ERC20Token
             */
            ERC20Token.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.ERC20Token)
                    return object;
                let message = new $root.gravity.v1.ERC20Token();
                if (object.contract != null)
                    message.contract = String(object.contract);
                if (object.amount != null)
                    message.amount = String(object.amount);
                return message;
            };

            /**
             * Creates a plain object from a ERC20Token message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.ERC20Token
             * @static
             * @param {gravity.v1.ERC20Token} message ERC20Token
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ERC20Token.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.contract = "";
                    object.amount = "";
                }
                if (message.contract != null && message.hasOwnProperty("contract"))
                    object.contract = message.contract;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this ERC20Token to JSON.
             * @function toJSON
             * @memberof gravity.v1.ERC20Token
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ERC20Token.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ERC20Token;
        })();

        v1.EventObservation = (function() {

            /**
             * Properties of an EventObservation.
             * @memberof gravity.v1
             * @interface IEventObservation
             * @property {string|null} [attestation_type] EventObservation attestation_type
             * @property {string|null} [bridge_contract] EventObservation bridge_contract
             * @property {string|null} [bridge_chain_id] EventObservation bridge_chain_id
             * @property {string|null} [attestation_id] EventObservation attestation_id
             * @property {string|null} [nonce] EventObservation nonce
             */

            /**
             * Constructs a new EventObservation.
             * @memberof gravity.v1
             * @classdesc Represents an EventObservation.
             * @implements IEventObservation
             * @constructor
             * @param {gravity.v1.IEventObservation=} [properties] Properties to set
             */
            function EventObservation(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventObservation attestation_type.
             * @member {string} attestation_type
             * @memberof gravity.v1.EventObservation
             * @instance
             */
            EventObservation.prototype.attestation_type = "";

            /**
             * EventObservation bridge_contract.
             * @member {string} bridge_contract
             * @memberof gravity.v1.EventObservation
             * @instance
             */
            EventObservation.prototype.bridge_contract = "";

            /**
             * EventObservation bridge_chain_id.
             * @member {string} bridge_chain_id
             * @memberof gravity.v1.EventObservation
             * @instance
             */
            EventObservation.prototype.bridge_chain_id = "";

            /**
             * EventObservation attestation_id.
             * @member {string} attestation_id
             * @memberof gravity.v1.EventObservation
             * @instance
             */
            EventObservation.prototype.attestation_id = "";

            /**
             * EventObservation nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventObservation
             * @instance
             */
            EventObservation.prototype.nonce = "";

            /**
             * Encodes the specified EventObservation message. Does not implicitly {@link gravity.v1.EventObservation.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventObservation
             * @static
             * @param {gravity.v1.IEventObservation} message EventObservation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventObservation.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.attestation_type != null && Object.hasOwnProperty.call(message, "attestation_type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.attestation_type);
                if (message.bridge_contract != null && Object.hasOwnProperty.call(message, "bridge_contract"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.bridge_contract);
                if (message.bridge_chain_id != null && Object.hasOwnProperty.call(message, "bridge_chain_id"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.bridge_chain_id);
                if (message.attestation_id != null && Object.hasOwnProperty.call(message, "attestation_id"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.attestation_id);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified EventObservation message, length delimited. Does not implicitly {@link gravity.v1.EventObservation.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventObservation
             * @static
             * @param {gravity.v1.IEventObservation} message EventObservation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventObservation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventObservation message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventObservation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventObservation} EventObservation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventObservation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventObservation();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.attestation_type = reader.string();
                        break;
                    case 2:
                        message.bridge_contract = reader.string();
                        break;
                    case 3:
                        message.bridge_chain_id = reader.string();
                        break;
                    case 4:
                        message.attestation_id = reader.string();
                        break;
                    case 5:
                        message.nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventObservation message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventObservation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventObservation} EventObservation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventObservation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventObservation message.
             * @function verify
             * @memberof gravity.v1.EventObservation
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventObservation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.attestation_type != null && message.hasOwnProperty("attestation_type"))
                    if (!$util.isString(message.attestation_type))
                        return "attestation_type: string expected";
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    if (!$util.isString(message.bridge_contract))
                        return "bridge_contract: string expected";
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    if (!$util.isString(message.bridge_chain_id))
                        return "bridge_chain_id: string expected";
                if (message.attestation_id != null && message.hasOwnProperty("attestation_id"))
                    if (!$util.isString(message.attestation_id))
                        return "attestation_id: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                return null;
            };

            /**
             * Creates an EventObservation message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventObservation
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventObservation} EventObservation
             */
            EventObservation.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventObservation)
                    return object;
                let message = new $root.gravity.v1.EventObservation();
                if (object.attestation_type != null)
                    message.attestation_type = String(object.attestation_type);
                if (object.bridge_contract != null)
                    message.bridge_contract = String(object.bridge_contract);
                if (object.bridge_chain_id != null)
                    message.bridge_chain_id = String(object.bridge_chain_id);
                if (object.attestation_id != null)
                    message.attestation_id = String(object.attestation_id);
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventObservation message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventObservation
             * @static
             * @param {gravity.v1.EventObservation} message EventObservation
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventObservation.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.attestation_type = "";
                    object.bridge_contract = "";
                    object.bridge_chain_id = "";
                    object.attestation_id = "";
                    object.nonce = "";
                }
                if (message.attestation_type != null && message.hasOwnProperty("attestation_type"))
                    object.attestation_type = message.attestation_type;
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    object.bridge_contract = message.bridge_contract;
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    object.bridge_chain_id = message.bridge_chain_id;
                if (message.attestation_id != null && message.hasOwnProperty("attestation_id"))
                    object.attestation_id = message.attestation_id;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                return object;
            };

            /**
             * Converts this EventObservation to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventObservation
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventObservation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventObservation;
        })();

        v1.EventInvalidSendToCosmosReceiver = (function() {

            /**
             * Properties of an EventInvalidSendToCosmosReceiver.
             * @memberof gravity.v1
             * @interface IEventInvalidSendToCosmosReceiver
             * @property {string|null} [amount] EventInvalidSendToCosmosReceiver amount
             * @property {string|null} [nonce] EventInvalidSendToCosmosReceiver nonce
             * @property {string|null} [token] EventInvalidSendToCosmosReceiver token
             * @property {string|null} [sender] EventInvalidSendToCosmosReceiver sender
             */

            /**
             * Constructs a new EventInvalidSendToCosmosReceiver.
             * @memberof gravity.v1
             * @classdesc Represents an EventInvalidSendToCosmosReceiver.
             * @implements IEventInvalidSendToCosmosReceiver
             * @constructor
             * @param {gravity.v1.IEventInvalidSendToCosmosReceiver=} [properties] Properties to set
             */
            function EventInvalidSendToCosmosReceiver(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventInvalidSendToCosmosReceiver amount.
             * @member {string} amount
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @instance
             */
            EventInvalidSendToCosmosReceiver.prototype.amount = "";

            /**
             * EventInvalidSendToCosmosReceiver nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @instance
             */
            EventInvalidSendToCosmosReceiver.prototype.nonce = "";

            /**
             * EventInvalidSendToCosmosReceiver token.
             * @member {string} token
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @instance
             */
            EventInvalidSendToCosmosReceiver.prototype.token = "";

            /**
             * EventInvalidSendToCosmosReceiver sender.
             * @member {string} sender
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @instance
             */
            EventInvalidSendToCosmosReceiver.prototype.sender = "";

            /**
             * Encodes the specified EventInvalidSendToCosmosReceiver message. Does not implicitly {@link gravity.v1.EventInvalidSendToCosmosReceiver.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @static
             * @param {gravity.v1.IEventInvalidSendToCosmosReceiver} message EventInvalidSendToCosmosReceiver message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventInvalidSendToCosmosReceiver.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.amount);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nonce);
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.sender);
                return writer;
            };

            /**
             * Encodes the specified EventInvalidSendToCosmosReceiver message, length delimited. Does not implicitly {@link gravity.v1.EventInvalidSendToCosmosReceiver.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @static
             * @param {gravity.v1.IEventInvalidSendToCosmosReceiver} message EventInvalidSendToCosmosReceiver message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventInvalidSendToCosmosReceiver.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventInvalidSendToCosmosReceiver message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventInvalidSendToCosmosReceiver} EventInvalidSendToCosmosReceiver
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventInvalidSendToCosmosReceiver.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventInvalidSendToCosmosReceiver();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.amount = reader.string();
                        break;
                    case 2:
                        message.nonce = reader.string();
                        break;
                    case 3:
                        message.token = reader.string();
                        break;
                    case 4:
                        message.sender = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventInvalidSendToCosmosReceiver message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventInvalidSendToCosmosReceiver} EventInvalidSendToCosmosReceiver
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventInvalidSendToCosmosReceiver.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventInvalidSendToCosmosReceiver message.
             * @function verify
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventInvalidSendToCosmosReceiver.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isString(message.amount))
                        return "amount: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                return null;
            };

            /**
             * Creates an EventInvalidSendToCosmosReceiver message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventInvalidSendToCosmosReceiver} EventInvalidSendToCosmosReceiver
             */
            EventInvalidSendToCosmosReceiver.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventInvalidSendToCosmosReceiver)
                    return object;
                let message = new $root.gravity.v1.EventInvalidSendToCosmosReceiver();
                if (object.amount != null)
                    message.amount = String(object.amount);
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                if (object.token != null)
                    message.token = String(object.token);
                if (object.sender != null)
                    message.sender = String(object.sender);
                return message;
            };

            /**
             * Creates a plain object from an EventInvalidSendToCosmosReceiver message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @static
             * @param {gravity.v1.EventInvalidSendToCosmosReceiver} message EventInvalidSendToCosmosReceiver
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventInvalidSendToCosmosReceiver.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.amount = "";
                    object.nonce = "";
                    object.token = "";
                    object.sender = "";
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                return object;
            };

            /**
             * Converts this EventInvalidSendToCosmosReceiver to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventInvalidSendToCosmosReceiver
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventInvalidSendToCosmosReceiver.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventInvalidSendToCosmosReceiver;
        })();

        v1.EventSendToCosmos = (function() {

            /**
             * Properties of an EventSendToCosmos.
             * @memberof gravity.v1
             * @interface IEventSendToCosmos
             * @property {string|null} [amount] EventSendToCosmos amount
             * @property {string|null} [nonce] EventSendToCosmos nonce
             * @property {string|null} [token] EventSendToCosmos token
             */

            /**
             * Constructs a new EventSendToCosmos.
             * @memberof gravity.v1
             * @classdesc Represents an EventSendToCosmos.
             * @implements IEventSendToCosmos
             * @constructor
             * @param {gravity.v1.IEventSendToCosmos=} [properties] Properties to set
             */
            function EventSendToCosmos(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSendToCosmos amount.
             * @member {string} amount
             * @memberof gravity.v1.EventSendToCosmos
             * @instance
             */
            EventSendToCosmos.prototype.amount = "";

            /**
             * EventSendToCosmos nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventSendToCosmos
             * @instance
             */
            EventSendToCosmos.prototype.nonce = "";

            /**
             * EventSendToCosmos token.
             * @member {string} token
             * @memberof gravity.v1.EventSendToCosmos
             * @instance
             */
            EventSendToCosmos.prototype.token = "";

            /**
             * Encodes the specified EventSendToCosmos message. Does not implicitly {@link gravity.v1.EventSendToCosmos.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventSendToCosmos
             * @static
             * @param {gravity.v1.IEventSendToCosmos} message EventSendToCosmos message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSendToCosmos.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.amount);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nonce);
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
                return writer;
            };

            /**
             * Encodes the specified EventSendToCosmos message, length delimited. Does not implicitly {@link gravity.v1.EventSendToCosmos.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventSendToCosmos
             * @static
             * @param {gravity.v1.IEventSendToCosmos} message EventSendToCosmos message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSendToCosmos.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSendToCosmos message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventSendToCosmos
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventSendToCosmos} EventSendToCosmos
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSendToCosmos.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventSendToCosmos();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.amount = reader.string();
                        break;
                    case 2:
                        message.nonce = reader.string();
                        break;
                    case 3:
                        message.token = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSendToCosmos message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventSendToCosmos
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventSendToCosmos} EventSendToCosmos
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSendToCosmos.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSendToCosmos message.
             * @function verify
             * @memberof gravity.v1.EventSendToCosmos
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSendToCosmos.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isString(message.amount))
                        return "amount: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                return null;
            };

            /**
             * Creates an EventSendToCosmos message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventSendToCosmos
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventSendToCosmos} EventSendToCosmos
             */
            EventSendToCosmos.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventSendToCosmos)
                    return object;
                let message = new $root.gravity.v1.EventSendToCosmos();
                if (object.amount != null)
                    message.amount = String(object.amount);
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                if (object.token != null)
                    message.token = String(object.token);
                return message;
            };

            /**
             * Creates a plain object from an EventSendToCosmos message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventSendToCosmos
             * @static
             * @param {gravity.v1.EventSendToCosmos} message EventSendToCosmos
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSendToCosmos.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.amount = "";
                    object.nonce = "";
                    object.token = "";
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                return object;
            };

            /**
             * Converts this EventSendToCosmos to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventSendToCosmos
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSendToCosmos.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSendToCosmos;
        })();

        v1.EventSendToCosmosLocal = (function() {

            /**
             * Properties of an EventSendToCosmosLocal.
             * @memberof gravity.v1
             * @interface IEventSendToCosmosLocal
             * @property {string|null} [nonce] EventSendToCosmosLocal nonce
             * @property {string|null} [receiver] EventSendToCosmosLocal receiver
             * @property {string|null} [token] EventSendToCosmosLocal token
             * @property {string|null} [amount] EventSendToCosmosLocal amount
             */

            /**
             * Constructs a new EventSendToCosmosLocal.
             * @memberof gravity.v1
             * @classdesc Represents an EventSendToCosmosLocal.
             * @implements IEventSendToCosmosLocal
             * @constructor
             * @param {gravity.v1.IEventSendToCosmosLocal=} [properties] Properties to set
             */
            function EventSendToCosmosLocal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSendToCosmosLocal nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @instance
             */
            EventSendToCosmosLocal.prototype.nonce = "";

            /**
             * EventSendToCosmosLocal receiver.
             * @member {string} receiver
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @instance
             */
            EventSendToCosmosLocal.prototype.receiver = "";

            /**
             * EventSendToCosmosLocal token.
             * @member {string} token
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @instance
             */
            EventSendToCosmosLocal.prototype.token = "";

            /**
             * EventSendToCosmosLocal amount.
             * @member {string} amount
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @instance
             */
            EventSendToCosmosLocal.prototype.amount = "";

            /**
             * Encodes the specified EventSendToCosmosLocal message. Does not implicitly {@link gravity.v1.EventSendToCosmosLocal.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @static
             * @param {gravity.v1.IEventSendToCosmosLocal} message EventSendToCosmosLocal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSendToCosmosLocal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.nonce);
                if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.receiver);
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.amount);
                return writer;
            };

            /**
             * Encodes the specified EventSendToCosmosLocal message, length delimited. Does not implicitly {@link gravity.v1.EventSendToCosmosLocal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @static
             * @param {gravity.v1.IEventSendToCosmosLocal} message EventSendToCosmosLocal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSendToCosmosLocal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSendToCosmosLocal message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventSendToCosmosLocal} EventSendToCosmosLocal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSendToCosmosLocal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventSendToCosmosLocal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.string();
                        break;
                    case 2:
                        message.receiver = reader.string();
                        break;
                    case 3:
                        message.token = reader.string();
                        break;
                    case 4:
                        message.amount = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSendToCosmosLocal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventSendToCosmosLocal} EventSendToCosmosLocal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSendToCosmosLocal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSendToCosmosLocal message.
             * @function verify
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSendToCosmosLocal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                if (message.receiver != null && message.hasOwnProperty("receiver"))
                    if (!$util.isString(message.receiver))
                        return "receiver: string expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isString(message.amount))
                        return "amount: string expected";
                return null;
            };

            /**
             * Creates an EventSendToCosmosLocal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventSendToCosmosLocal} EventSendToCosmosLocal
             */
            EventSendToCosmosLocal.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventSendToCosmosLocal)
                    return object;
                let message = new $root.gravity.v1.EventSendToCosmosLocal();
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                if (object.receiver != null)
                    message.receiver = String(object.receiver);
                if (object.token != null)
                    message.token = String(object.token);
                if (object.amount != null)
                    message.amount = String(object.amount);
                return message;
            };

            /**
             * Creates a plain object from an EventSendToCosmosLocal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @static
             * @param {gravity.v1.EventSendToCosmosLocal} message EventSendToCosmosLocal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSendToCosmosLocal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.nonce = "";
                    object.receiver = "";
                    object.token = "";
                    object.amount = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                if (message.receiver != null && message.hasOwnProperty("receiver"))
                    object.receiver = message.receiver;
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this EventSendToCosmosLocal to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventSendToCosmosLocal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSendToCosmosLocal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSendToCosmosLocal;
        })();

        v1.EventSendToCosmosPendingIbcAutoForward = (function() {

            /**
             * Properties of an EventSendToCosmosPendingIbcAutoForward.
             * @memberof gravity.v1
             * @interface IEventSendToCosmosPendingIbcAutoForward
             * @property {string|null} [nonce] EventSendToCosmosPendingIbcAutoForward nonce
             * @property {string|null} [receiver] EventSendToCosmosPendingIbcAutoForward receiver
             * @property {string|null} [token] EventSendToCosmosPendingIbcAutoForward token
             * @property {string|null} [amount] EventSendToCosmosPendingIbcAutoForward amount
             * @property {string|null} [channel] EventSendToCosmosPendingIbcAutoForward channel
             */

            /**
             * Constructs a new EventSendToCosmosPendingIbcAutoForward.
             * @memberof gravity.v1
             * @classdesc Represents an EventSendToCosmosPendingIbcAutoForward.
             * @implements IEventSendToCosmosPendingIbcAutoForward
             * @constructor
             * @param {gravity.v1.IEventSendToCosmosPendingIbcAutoForward=} [properties] Properties to set
             */
            function EventSendToCosmosPendingIbcAutoForward(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSendToCosmosPendingIbcAutoForward nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @instance
             */
            EventSendToCosmosPendingIbcAutoForward.prototype.nonce = "";

            /**
             * EventSendToCosmosPendingIbcAutoForward receiver.
             * @member {string} receiver
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @instance
             */
            EventSendToCosmosPendingIbcAutoForward.prototype.receiver = "";

            /**
             * EventSendToCosmosPendingIbcAutoForward token.
             * @member {string} token
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @instance
             */
            EventSendToCosmosPendingIbcAutoForward.prototype.token = "";

            /**
             * EventSendToCosmosPendingIbcAutoForward amount.
             * @member {string} amount
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @instance
             */
            EventSendToCosmosPendingIbcAutoForward.prototype.amount = "";

            /**
             * EventSendToCosmosPendingIbcAutoForward channel.
             * @member {string} channel
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @instance
             */
            EventSendToCosmosPendingIbcAutoForward.prototype.channel = "";

            /**
             * Encodes the specified EventSendToCosmosPendingIbcAutoForward message. Does not implicitly {@link gravity.v1.EventSendToCosmosPendingIbcAutoForward.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @static
             * @param {gravity.v1.IEventSendToCosmosPendingIbcAutoForward} message EventSendToCosmosPendingIbcAutoForward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSendToCosmosPendingIbcAutoForward.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.nonce);
                if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.receiver);
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.amount);
                if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.channel);
                return writer;
            };

            /**
             * Encodes the specified EventSendToCosmosPendingIbcAutoForward message, length delimited. Does not implicitly {@link gravity.v1.EventSendToCosmosPendingIbcAutoForward.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @static
             * @param {gravity.v1.IEventSendToCosmosPendingIbcAutoForward} message EventSendToCosmosPendingIbcAutoForward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSendToCosmosPendingIbcAutoForward.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSendToCosmosPendingIbcAutoForward message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventSendToCosmosPendingIbcAutoForward} EventSendToCosmosPendingIbcAutoForward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSendToCosmosPendingIbcAutoForward.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventSendToCosmosPendingIbcAutoForward();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.string();
                        break;
                    case 2:
                        message.receiver = reader.string();
                        break;
                    case 3:
                        message.token = reader.string();
                        break;
                    case 4:
                        message.amount = reader.string();
                        break;
                    case 5:
                        message.channel = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSendToCosmosPendingIbcAutoForward message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventSendToCosmosPendingIbcAutoForward} EventSendToCosmosPendingIbcAutoForward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSendToCosmosPendingIbcAutoForward.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSendToCosmosPendingIbcAutoForward message.
             * @function verify
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSendToCosmosPendingIbcAutoForward.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                if (message.receiver != null && message.hasOwnProperty("receiver"))
                    if (!$util.isString(message.receiver))
                        return "receiver: string expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isString(message.amount))
                        return "amount: string expected";
                if (message.channel != null && message.hasOwnProperty("channel"))
                    if (!$util.isString(message.channel))
                        return "channel: string expected";
                return null;
            };

            /**
             * Creates an EventSendToCosmosPendingIbcAutoForward message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventSendToCosmosPendingIbcAutoForward} EventSendToCosmosPendingIbcAutoForward
             */
            EventSendToCosmosPendingIbcAutoForward.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventSendToCosmosPendingIbcAutoForward)
                    return object;
                let message = new $root.gravity.v1.EventSendToCosmosPendingIbcAutoForward();
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                if (object.receiver != null)
                    message.receiver = String(object.receiver);
                if (object.token != null)
                    message.token = String(object.token);
                if (object.amount != null)
                    message.amount = String(object.amount);
                if (object.channel != null)
                    message.channel = String(object.channel);
                return message;
            };

            /**
             * Creates a plain object from an EventSendToCosmosPendingIbcAutoForward message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @static
             * @param {gravity.v1.EventSendToCosmosPendingIbcAutoForward} message EventSendToCosmosPendingIbcAutoForward
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSendToCosmosPendingIbcAutoForward.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.nonce = "";
                    object.receiver = "";
                    object.token = "";
                    object.amount = "";
                    object.channel = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                if (message.receiver != null && message.hasOwnProperty("receiver"))
                    object.receiver = message.receiver;
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.channel != null && message.hasOwnProperty("channel"))
                    object.channel = message.channel;
                return object;
            };

            /**
             * Converts this EventSendToCosmosPendingIbcAutoForward to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventSendToCosmosPendingIbcAutoForward
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSendToCosmosPendingIbcAutoForward.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSendToCosmosPendingIbcAutoForward;
        })();

        v1.EventSendToCosmosExecutedIbcAutoForward = (function() {

            /**
             * Properties of an EventSendToCosmosExecutedIbcAutoForward.
             * @memberof gravity.v1
             * @interface IEventSendToCosmosExecutedIbcAutoForward
             * @property {string|null} [nonce] EventSendToCosmosExecutedIbcAutoForward nonce
             * @property {string|null} [receiver] EventSendToCosmosExecutedIbcAutoForward receiver
             * @property {string|null} [token] EventSendToCosmosExecutedIbcAutoForward token
             * @property {string|null} [amount] EventSendToCosmosExecutedIbcAutoForward amount
             * @property {string|null} [channel] EventSendToCosmosExecutedIbcAutoForward channel
             * @property {string|null} [timeout_time] EventSendToCosmosExecutedIbcAutoForward timeout_time
             * @property {string|null} [timeout_height] EventSendToCosmosExecutedIbcAutoForward timeout_height
             */

            /**
             * Constructs a new EventSendToCosmosExecutedIbcAutoForward.
             * @memberof gravity.v1
             * @classdesc Represents an EventSendToCosmosExecutedIbcAutoForward.
             * @implements IEventSendToCosmosExecutedIbcAutoForward
             * @constructor
             * @param {gravity.v1.IEventSendToCosmosExecutedIbcAutoForward=} [properties] Properties to set
             */
            function EventSendToCosmosExecutedIbcAutoForward(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSendToCosmosExecutedIbcAutoForward nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @instance
             */
            EventSendToCosmosExecutedIbcAutoForward.prototype.nonce = "";

            /**
             * EventSendToCosmosExecutedIbcAutoForward receiver.
             * @member {string} receiver
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @instance
             */
            EventSendToCosmosExecutedIbcAutoForward.prototype.receiver = "";

            /**
             * EventSendToCosmosExecutedIbcAutoForward token.
             * @member {string} token
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @instance
             */
            EventSendToCosmosExecutedIbcAutoForward.prototype.token = "";

            /**
             * EventSendToCosmosExecutedIbcAutoForward amount.
             * @member {string} amount
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @instance
             */
            EventSendToCosmosExecutedIbcAutoForward.prototype.amount = "";

            /**
             * EventSendToCosmosExecutedIbcAutoForward channel.
             * @member {string} channel
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @instance
             */
            EventSendToCosmosExecutedIbcAutoForward.prototype.channel = "";

            /**
             * EventSendToCosmosExecutedIbcAutoForward timeout_time.
             * @member {string} timeout_time
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @instance
             */
            EventSendToCosmosExecutedIbcAutoForward.prototype.timeout_time = "";

            /**
             * EventSendToCosmosExecutedIbcAutoForward timeout_height.
             * @member {string} timeout_height
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @instance
             */
            EventSendToCosmosExecutedIbcAutoForward.prototype.timeout_height = "";

            /**
             * Encodes the specified EventSendToCosmosExecutedIbcAutoForward message. Does not implicitly {@link gravity.v1.EventSendToCosmosExecutedIbcAutoForward.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @static
             * @param {gravity.v1.IEventSendToCosmosExecutedIbcAutoForward} message EventSendToCosmosExecutedIbcAutoForward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSendToCosmosExecutedIbcAutoForward.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.nonce);
                if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.receiver);
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.amount);
                if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.channel);
                if (message.timeout_time != null && Object.hasOwnProperty.call(message, "timeout_time"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.timeout_time);
                if (message.timeout_height != null && Object.hasOwnProperty.call(message, "timeout_height"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.timeout_height);
                return writer;
            };

            /**
             * Encodes the specified EventSendToCosmosExecutedIbcAutoForward message, length delimited. Does not implicitly {@link gravity.v1.EventSendToCosmosExecutedIbcAutoForward.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @static
             * @param {gravity.v1.IEventSendToCosmosExecutedIbcAutoForward} message EventSendToCosmosExecutedIbcAutoForward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSendToCosmosExecutedIbcAutoForward.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSendToCosmosExecutedIbcAutoForward message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventSendToCosmosExecutedIbcAutoForward} EventSendToCosmosExecutedIbcAutoForward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSendToCosmosExecutedIbcAutoForward.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventSendToCosmosExecutedIbcAutoForward();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.string();
                        break;
                    case 2:
                        message.receiver = reader.string();
                        break;
                    case 3:
                        message.token = reader.string();
                        break;
                    case 4:
                        message.amount = reader.string();
                        break;
                    case 5:
                        message.channel = reader.string();
                        break;
                    case 6:
                        message.timeout_time = reader.string();
                        break;
                    case 7:
                        message.timeout_height = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSendToCosmosExecutedIbcAutoForward message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventSendToCosmosExecutedIbcAutoForward} EventSendToCosmosExecutedIbcAutoForward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSendToCosmosExecutedIbcAutoForward.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSendToCosmosExecutedIbcAutoForward message.
             * @function verify
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSendToCosmosExecutedIbcAutoForward.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                if (message.receiver != null && message.hasOwnProperty("receiver"))
                    if (!$util.isString(message.receiver))
                        return "receiver: string expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isString(message.amount))
                        return "amount: string expected";
                if (message.channel != null && message.hasOwnProperty("channel"))
                    if (!$util.isString(message.channel))
                        return "channel: string expected";
                if (message.timeout_time != null && message.hasOwnProperty("timeout_time"))
                    if (!$util.isString(message.timeout_time))
                        return "timeout_time: string expected";
                if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                    if (!$util.isString(message.timeout_height))
                        return "timeout_height: string expected";
                return null;
            };

            /**
             * Creates an EventSendToCosmosExecutedIbcAutoForward message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventSendToCosmosExecutedIbcAutoForward} EventSendToCosmosExecutedIbcAutoForward
             */
            EventSendToCosmosExecutedIbcAutoForward.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventSendToCosmosExecutedIbcAutoForward)
                    return object;
                let message = new $root.gravity.v1.EventSendToCosmosExecutedIbcAutoForward();
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                if (object.receiver != null)
                    message.receiver = String(object.receiver);
                if (object.token != null)
                    message.token = String(object.token);
                if (object.amount != null)
                    message.amount = String(object.amount);
                if (object.channel != null)
                    message.channel = String(object.channel);
                if (object.timeout_time != null)
                    message.timeout_time = String(object.timeout_time);
                if (object.timeout_height != null)
                    message.timeout_height = String(object.timeout_height);
                return message;
            };

            /**
             * Creates a plain object from an EventSendToCosmosExecutedIbcAutoForward message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @static
             * @param {gravity.v1.EventSendToCosmosExecutedIbcAutoForward} message EventSendToCosmosExecutedIbcAutoForward
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSendToCosmosExecutedIbcAutoForward.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.nonce = "";
                    object.receiver = "";
                    object.token = "";
                    object.amount = "";
                    object.channel = "";
                    object.timeout_time = "";
                    object.timeout_height = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                if (message.receiver != null && message.hasOwnProperty("receiver"))
                    object.receiver = message.receiver;
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.channel != null && message.hasOwnProperty("channel"))
                    object.channel = message.channel;
                if (message.timeout_time != null && message.hasOwnProperty("timeout_time"))
                    object.timeout_time = message.timeout_time;
                if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                    object.timeout_height = message.timeout_height;
                return object;
            };

            /**
             * Converts this EventSendToCosmosExecutedIbcAutoForward to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventSendToCosmosExecutedIbcAutoForward
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSendToCosmosExecutedIbcAutoForward.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSendToCosmosExecutedIbcAutoForward;
        })();

        v1.IDSet = (function() {

            /**
             * Properties of a IDSet.
             * @memberof gravity.v1
             * @interface IIDSet
             * @property {Array.<number>|null} [ids] IDSet ids
             */

            /**
             * Constructs a new IDSet.
             * @memberof gravity.v1
             * @classdesc Represents a IDSet.
             * @implements IIDSet
             * @constructor
             * @param {gravity.v1.IIDSet=} [properties] Properties to set
             */
            function IDSet(properties) {
                this.ids = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * IDSet ids.
             * @member {Array.<number>} ids
             * @memberof gravity.v1.IDSet
             * @instance
             */
            IDSet.prototype.ids = $util.emptyArray;

            /**
             * Encodes the specified IDSet message. Does not implicitly {@link gravity.v1.IDSet.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.IDSet
             * @static
             * @param {gravity.v1.IIDSet} message IDSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IDSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ids != null && message.ids.length) {
                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                    for (let i = 0; i < message.ids.length; ++i)
                        writer.uint64(message.ids[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified IDSet message, length delimited. Does not implicitly {@link gravity.v1.IDSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.IDSet
             * @static
             * @param {gravity.v1.IIDSet} message IDSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IDSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a IDSet message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.IDSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.IDSet} IDSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IDSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.IDSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.ids && message.ids.length))
                            message.ids = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ids.push(reader.uint64());
                        } else
                            message.ids.push(reader.uint64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a IDSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.IDSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.IDSet} IDSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IDSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a IDSet message.
             * @function verify
             * @memberof gravity.v1.IDSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            IDSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ids != null && message.hasOwnProperty("ids")) {
                    if (!Array.isArray(message.ids))
                        return "ids: array expected";
                    for (let i = 0; i < message.ids.length; ++i)
                        if (!$util.isInteger(message.ids[i]) && !(message.ids[i] && $util.isInteger(message.ids[i].low) && $util.isInteger(message.ids[i].high)))
                            return "ids: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a IDSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.IDSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.IDSet} IDSet
             */
            IDSet.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.IDSet)
                    return object;
                let message = new $root.gravity.v1.IDSet();
                if (object.ids) {
                    if (!Array.isArray(object.ids))
                        throw TypeError(".gravity.v1.IDSet.ids: array expected");
                    message.ids = [];
                    for (let i = 0; i < object.ids.length; ++i)
                        if ($util.Long)
                            (message.ids[i] = $util.Long.fromValue(object.ids[i])).unsigned = true;
                        else if (typeof object.ids[i] === "string")
                            message.ids[i] = parseInt(object.ids[i], 10);
                        else if (typeof object.ids[i] === "number")
                            message.ids[i] = object.ids[i];
                        else if (typeof object.ids[i] === "object")
                            message.ids[i] = new $util.LongBits(object.ids[i].low >>> 0, object.ids[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            /**
             * Creates a plain object from a IDSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.IDSet
             * @static
             * @param {gravity.v1.IDSet} message IDSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            IDSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ids = [];
                if (message.ids && message.ids.length) {
                    object.ids = [];
                    for (let j = 0; j < message.ids.length; ++j)
                        if (typeof message.ids[j] === "number")
                            object.ids[j] = options.longs === String ? String(message.ids[j]) : message.ids[j];
                        else
                            object.ids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ids[j]) : options.longs === Number ? new $util.LongBits(message.ids[j].low >>> 0, message.ids[j].high >>> 0).toNumber(true) : message.ids[j];
                }
                return object;
            };

            /**
             * Converts this IDSet to JSON.
             * @function toJSON
             * @memberof gravity.v1.IDSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            IDSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return IDSet;
        })();

        v1.BatchFees = (function() {

            /**
             * Properties of a BatchFees.
             * @memberof gravity.v1
             * @interface IBatchFees
             * @property {string|null} [token] BatchFees token
             * @property {string|null} [total_fees] BatchFees total_fees
             * @property {number|null} [tx_count] BatchFees tx_count
             */

            /**
             * Constructs a new BatchFees.
             * @memberof gravity.v1
             * @classdesc Represents a BatchFees.
             * @implements IBatchFees
             * @constructor
             * @param {gravity.v1.IBatchFees=} [properties] Properties to set
             */
            function BatchFees(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BatchFees token.
             * @member {string} token
             * @memberof gravity.v1.BatchFees
             * @instance
             */
            BatchFees.prototype.token = "";

            /**
             * BatchFees total_fees.
             * @member {string} total_fees
             * @memberof gravity.v1.BatchFees
             * @instance
             */
            BatchFees.prototype.total_fees = "";

            /**
             * BatchFees tx_count.
             * @member {number} tx_count
             * @memberof gravity.v1.BatchFees
             * @instance
             */
            BatchFees.prototype.tx_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified BatchFees message. Does not implicitly {@link gravity.v1.BatchFees.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.BatchFees
             * @static
             * @param {gravity.v1.IBatchFees} message BatchFees message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchFees.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                if (message.total_fees != null && Object.hasOwnProperty.call(message, "total_fees"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.total_fees);
                if (message.tx_count != null && Object.hasOwnProperty.call(message, "tx_count"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.tx_count);
                return writer;
            };

            /**
             * Encodes the specified BatchFees message, length delimited. Does not implicitly {@link gravity.v1.BatchFees.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.BatchFees
             * @static
             * @param {gravity.v1.IBatchFees} message BatchFees message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchFees.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BatchFees message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.BatchFees
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.BatchFees} BatchFees
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchFees.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.BatchFees();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.token = reader.string();
                        break;
                    case 2:
                        message.total_fees = reader.string();
                        break;
                    case 3:
                        message.tx_count = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BatchFees message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.BatchFees
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.BatchFees} BatchFees
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchFees.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BatchFees message.
             * @function verify
             * @memberof gravity.v1.BatchFees
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BatchFees.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.total_fees != null && message.hasOwnProperty("total_fees"))
                    if (!$util.isString(message.total_fees))
                        return "total_fees: string expected";
                if (message.tx_count != null && message.hasOwnProperty("tx_count"))
                    if (!$util.isInteger(message.tx_count) && !(message.tx_count && $util.isInteger(message.tx_count.low) && $util.isInteger(message.tx_count.high)))
                        return "tx_count: integer|Long expected";
                return null;
            };

            /**
             * Creates a BatchFees message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.BatchFees
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.BatchFees} BatchFees
             */
            BatchFees.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.BatchFees)
                    return object;
                let message = new $root.gravity.v1.BatchFees();
                if (object.token != null)
                    message.token = String(object.token);
                if (object.total_fees != null)
                    message.total_fees = String(object.total_fees);
                if (object.tx_count != null)
                    if ($util.Long)
                        (message.tx_count = $util.Long.fromValue(object.tx_count)).unsigned = true;
                    else if (typeof object.tx_count === "string")
                        message.tx_count = parseInt(object.tx_count, 10);
                    else if (typeof object.tx_count === "number")
                        message.tx_count = object.tx_count;
                    else if (typeof object.tx_count === "object")
                        message.tx_count = new $util.LongBits(object.tx_count.low >>> 0, object.tx_count.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a BatchFees message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.BatchFees
             * @static
             * @param {gravity.v1.BatchFees} message BatchFees
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BatchFees.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.token = "";
                    object.total_fees = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.tx_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.tx_count = options.longs === String ? "0" : 0;
                }
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.total_fees != null && message.hasOwnProperty("total_fees"))
                    object.total_fees = message.total_fees;
                if (message.tx_count != null && message.hasOwnProperty("tx_count"))
                    if (typeof message.tx_count === "number")
                        object.tx_count = options.longs === String ? String(message.tx_count) : message.tx_count;
                    else
                        object.tx_count = options.longs === String ? $util.Long.prototype.toString.call(message.tx_count) : options.longs === Number ? new $util.LongBits(message.tx_count.low >>> 0, message.tx_count.high >>> 0).toNumber(true) : message.tx_count;
                return object;
            };

            /**
             * Converts this BatchFees to JSON.
             * @function toJSON
             * @memberof gravity.v1.BatchFees
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BatchFees.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BatchFees;
        })();

        v1.EventWithdrawalReceived = (function() {

            /**
             * Properties of an EventWithdrawalReceived.
             * @memberof gravity.v1
             * @interface IEventWithdrawalReceived
             * @property {string|null} [bridge_contract] EventWithdrawalReceived bridge_contract
             * @property {string|null} [bridge_chain_id] EventWithdrawalReceived bridge_chain_id
             * @property {string|null} [outgoing_tx_id] EventWithdrawalReceived outgoing_tx_id
             * @property {string|null} [nonce] EventWithdrawalReceived nonce
             */

            /**
             * Constructs a new EventWithdrawalReceived.
             * @memberof gravity.v1
             * @classdesc Represents an EventWithdrawalReceived.
             * @implements IEventWithdrawalReceived
             * @constructor
             * @param {gravity.v1.IEventWithdrawalReceived=} [properties] Properties to set
             */
            function EventWithdrawalReceived(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventWithdrawalReceived bridge_contract.
             * @member {string} bridge_contract
             * @memberof gravity.v1.EventWithdrawalReceived
             * @instance
             */
            EventWithdrawalReceived.prototype.bridge_contract = "";

            /**
             * EventWithdrawalReceived bridge_chain_id.
             * @member {string} bridge_chain_id
             * @memberof gravity.v1.EventWithdrawalReceived
             * @instance
             */
            EventWithdrawalReceived.prototype.bridge_chain_id = "";

            /**
             * EventWithdrawalReceived outgoing_tx_id.
             * @member {string} outgoing_tx_id
             * @memberof gravity.v1.EventWithdrawalReceived
             * @instance
             */
            EventWithdrawalReceived.prototype.outgoing_tx_id = "";

            /**
             * EventWithdrawalReceived nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventWithdrawalReceived
             * @instance
             */
            EventWithdrawalReceived.prototype.nonce = "";

            /**
             * Encodes the specified EventWithdrawalReceived message. Does not implicitly {@link gravity.v1.EventWithdrawalReceived.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventWithdrawalReceived
             * @static
             * @param {gravity.v1.IEventWithdrawalReceived} message EventWithdrawalReceived message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventWithdrawalReceived.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bridge_contract != null && Object.hasOwnProperty.call(message, "bridge_contract"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.bridge_contract);
                if (message.bridge_chain_id != null && Object.hasOwnProperty.call(message, "bridge_chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.bridge_chain_id);
                if (message.outgoing_tx_id != null && Object.hasOwnProperty.call(message, "outgoing_tx_id"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.outgoing_tx_id);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified EventWithdrawalReceived message, length delimited. Does not implicitly {@link gravity.v1.EventWithdrawalReceived.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventWithdrawalReceived
             * @static
             * @param {gravity.v1.IEventWithdrawalReceived} message EventWithdrawalReceived message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventWithdrawalReceived.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventWithdrawalReceived message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventWithdrawalReceived
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventWithdrawalReceived} EventWithdrawalReceived
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventWithdrawalReceived.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventWithdrawalReceived();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.bridge_contract = reader.string();
                        break;
                    case 2:
                        message.bridge_chain_id = reader.string();
                        break;
                    case 3:
                        message.outgoing_tx_id = reader.string();
                        break;
                    case 4:
                        message.nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventWithdrawalReceived message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventWithdrawalReceived
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventWithdrawalReceived} EventWithdrawalReceived
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventWithdrawalReceived.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventWithdrawalReceived message.
             * @function verify
             * @memberof gravity.v1.EventWithdrawalReceived
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventWithdrawalReceived.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    if (!$util.isString(message.bridge_contract))
                        return "bridge_contract: string expected";
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    if (!$util.isString(message.bridge_chain_id))
                        return "bridge_chain_id: string expected";
                if (message.outgoing_tx_id != null && message.hasOwnProperty("outgoing_tx_id"))
                    if (!$util.isString(message.outgoing_tx_id))
                        return "outgoing_tx_id: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                return null;
            };

            /**
             * Creates an EventWithdrawalReceived message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventWithdrawalReceived
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventWithdrawalReceived} EventWithdrawalReceived
             */
            EventWithdrawalReceived.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventWithdrawalReceived)
                    return object;
                let message = new $root.gravity.v1.EventWithdrawalReceived();
                if (object.bridge_contract != null)
                    message.bridge_contract = String(object.bridge_contract);
                if (object.bridge_chain_id != null)
                    message.bridge_chain_id = String(object.bridge_chain_id);
                if (object.outgoing_tx_id != null)
                    message.outgoing_tx_id = String(object.outgoing_tx_id);
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventWithdrawalReceived message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventWithdrawalReceived
             * @static
             * @param {gravity.v1.EventWithdrawalReceived} message EventWithdrawalReceived
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventWithdrawalReceived.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.bridge_contract = "";
                    object.bridge_chain_id = "";
                    object.outgoing_tx_id = "";
                    object.nonce = "";
                }
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    object.bridge_contract = message.bridge_contract;
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    object.bridge_chain_id = message.bridge_chain_id;
                if (message.outgoing_tx_id != null && message.hasOwnProperty("outgoing_tx_id"))
                    object.outgoing_tx_id = message.outgoing_tx_id;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                return object;
            };

            /**
             * Converts this EventWithdrawalReceived to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventWithdrawalReceived
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventWithdrawalReceived.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventWithdrawalReceived;
        })();

        v1.EventWithdrawCanceled = (function() {

            /**
             * Properties of an EventWithdrawCanceled.
             * @memberof gravity.v1
             * @interface IEventWithdrawCanceled
             * @property {string|null} [sender] EventWithdrawCanceled sender
             * @property {string|null} [tx_id] EventWithdrawCanceled tx_id
             * @property {string|null} [bridge_contract] EventWithdrawCanceled bridge_contract
             * @property {string|null} [bridge_chain_id] EventWithdrawCanceled bridge_chain_id
             */

            /**
             * Constructs a new EventWithdrawCanceled.
             * @memberof gravity.v1
             * @classdesc Represents an EventWithdrawCanceled.
             * @implements IEventWithdrawCanceled
             * @constructor
             * @param {gravity.v1.IEventWithdrawCanceled=} [properties] Properties to set
             */
            function EventWithdrawCanceled(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventWithdrawCanceled sender.
             * @member {string} sender
             * @memberof gravity.v1.EventWithdrawCanceled
             * @instance
             */
            EventWithdrawCanceled.prototype.sender = "";

            /**
             * EventWithdrawCanceled tx_id.
             * @member {string} tx_id
             * @memberof gravity.v1.EventWithdrawCanceled
             * @instance
             */
            EventWithdrawCanceled.prototype.tx_id = "";

            /**
             * EventWithdrawCanceled bridge_contract.
             * @member {string} bridge_contract
             * @memberof gravity.v1.EventWithdrawCanceled
             * @instance
             */
            EventWithdrawCanceled.prototype.bridge_contract = "";

            /**
             * EventWithdrawCanceled bridge_chain_id.
             * @member {string} bridge_chain_id
             * @memberof gravity.v1.EventWithdrawCanceled
             * @instance
             */
            EventWithdrawCanceled.prototype.bridge_chain_id = "";

            /**
             * Encodes the specified EventWithdrawCanceled message. Does not implicitly {@link gravity.v1.EventWithdrawCanceled.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventWithdrawCanceled
             * @static
             * @param {gravity.v1.IEventWithdrawCanceled} message EventWithdrawCanceled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventWithdrawCanceled.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                if (message.tx_id != null && Object.hasOwnProperty.call(message, "tx_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.tx_id);
                if (message.bridge_contract != null && Object.hasOwnProperty.call(message, "bridge_contract"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.bridge_contract);
                if (message.bridge_chain_id != null && Object.hasOwnProperty.call(message, "bridge_chain_id"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.bridge_chain_id);
                return writer;
            };

            /**
             * Encodes the specified EventWithdrawCanceled message, length delimited. Does not implicitly {@link gravity.v1.EventWithdrawCanceled.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventWithdrawCanceled
             * @static
             * @param {gravity.v1.IEventWithdrawCanceled} message EventWithdrawCanceled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventWithdrawCanceled.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventWithdrawCanceled message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventWithdrawCanceled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventWithdrawCanceled} EventWithdrawCanceled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventWithdrawCanceled.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventWithdrawCanceled();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = reader.string();
                        break;
                    case 2:
                        message.tx_id = reader.string();
                        break;
                    case 3:
                        message.bridge_contract = reader.string();
                        break;
                    case 4:
                        message.bridge_chain_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventWithdrawCanceled message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventWithdrawCanceled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventWithdrawCanceled} EventWithdrawCanceled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventWithdrawCanceled.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventWithdrawCanceled message.
             * @function verify
             * @memberof gravity.v1.EventWithdrawCanceled
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventWithdrawCanceled.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                if (message.tx_id != null && message.hasOwnProperty("tx_id"))
                    if (!$util.isString(message.tx_id))
                        return "tx_id: string expected";
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    if (!$util.isString(message.bridge_contract))
                        return "bridge_contract: string expected";
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    if (!$util.isString(message.bridge_chain_id))
                        return "bridge_chain_id: string expected";
                return null;
            };

            /**
             * Creates an EventWithdrawCanceled message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventWithdrawCanceled
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventWithdrawCanceled} EventWithdrawCanceled
             */
            EventWithdrawCanceled.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventWithdrawCanceled)
                    return object;
                let message = new $root.gravity.v1.EventWithdrawCanceled();
                if (object.sender != null)
                    message.sender = String(object.sender);
                if (object.tx_id != null)
                    message.tx_id = String(object.tx_id);
                if (object.bridge_contract != null)
                    message.bridge_contract = String(object.bridge_contract);
                if (object.bridge_chain_id != null)
                    message.bridge_chain_id = String(object.bridge_chain_id);
                return message;
            };

            /**
             * Creates a plain object from an EventWithdrawCanceled message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventWithdrawCanceled
             * @static
             * @param {gravity.v1.EventWithdrawCanceled} message EventWithdrawCanceled
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventWithdrawCanceled.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.sender = "";
                    object.tx_id = "";
                    object.bridge_contract = "";
                    object.bridge_chain_id = "";
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                if (message.tx_id != null && message.hasOwnProperty("tx_id"))
                    object.tx_id = message.tx_id;
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    object.bridge_contract = message.bridge_contract;
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    object.bridge_chain_id = message.bridge_chain_id;
                return object;
            };

            /**
             * Converts this EventWithdrawCanceled to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventWithdrawCanceled
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventWithdrawCanceled.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventWithdrawCanceled;
        })();

        v1.OutgoingTxBatch = (function() {

            /**
             * Properties of an OutgoingTxBatch.
             * @memberof gravity.v1
             * @interface IOutgoingTxBatch
             * @property {number|null} [batch_nonce] OutgoingTxBatch batch_nonce
             * @property {number|null} [batch_timeout] OutgoingTxBatch batch_timeout
             * @property {Array.<gravity.v1.IOutgoingTransferTx>|null} [transactions] OutgoingTxBatch transactions
             * @property {string|null} [token_contract] OutgoingTxBatch token_contract
             * @property {number|null} [cosmos_block_created] OutgoingTxBatch cosmos_block_created
             */

            /**
             * Constructs a new OutgoingTxBatch.
             * @memberof gravity.v1
             * @classdesc Represents an OutgoingTxBatch.
             * @implements IOutgoingTxBatch
             * @constructor
             * @param {gravity.v1.IOutgoingTxBatch=} [properties] Properties to set
             */
            function OutgoingTxBatch(properties) {
                this.transactions = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OutgoingTxBatch batch_nonce.
             * @member {number} batch_nonce
             * @memberof gravity.v1.OutgoingTxBatch
             * @instance
             */
            OutgoingTxBatch.prototype.batch_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * OutgoingTxBatch batch_timeout.
             * @member {number} batch_timeout
             * @memberof gravity.v1.OutgoingTxBatch
             * @instance
             */
            OutgoingTxBatch.prototype.batch_timeout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * OutgoingTxBatch transactions.
             * @member {Array.<gravity.v1.IOutgoingTransferTx>} transactions
             * @memberof gravity.v1.OutgoingTxBatch
             * @instance
             */
            OutgoingTxBatch.prototype.transactions = $util.emptyArray;

            /**
             * OutgoingTxBatch token_contract.
             * @member {string} token_contract
             * @memberof gravity.v1.OutgoingTxBatch
             * @instance
             */
            OutgoingTxBatch.prototype.token_contract = "";

            /**
             * OutgoingTxBatch cosmos_block_created.
             * @member {number} cosmos_block_created
             * @memberof gravity.v1.OutgoingTxBatch
             * @instance
             */
            OutgoingTxBatch.prototype.cosmos_block_created = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified OutgoingTxBatch message. Does not implicitly {@link gravity.v1.OutgoingTxBatch.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.OutgoingTxBatch
             * @static
             * @param {gravity.v1.IOutgoingTxBatch} message OutgoingTxBatch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OutgoingTxBatch.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.batch_nonce != null && Object.hasOwnProperty.call(message, "batch_nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.batch_nonce);
                if (message.batch_timeout != null && Object.hasOwnProperty.call(message, "batch_timeout"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.batch_timeout);
                if (message.transactions != null && message.transactions.length)
                    for (let i = 0; i < message.transactions.length; ++i)
                        $root.gravity.v1.OutgoingTransferTx.encode(message.transactions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.token_contract != null && Object.hasOwnProperty.call(message, "token_contract"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.token_contract);
                if (message.cosmos_block_created != null && Object.hasOwnProperty.call(message, "cosmos_block_created"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.cosmos_block_created);
                return writer;
            };

            /**
             * Encodes the specified OutgoingTxBatch message, length delimited. Does not implicitly {@link gravity.v1.OutgoingTxBatch.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.OutgoingTxBatch
             * @static
             * @param {gravity.v1.IOutgoingTxBatch} message OutgoingTxBatch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OutgoingTxBatch.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OutgoingTxBatch message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.OutgoingTxBatch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.OutgoingTxBatch} OutgoingTxBatch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OutgoingTxBatch.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.OutgoingTxBatch();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.batch_nonce = reader.uint64();
                        break;
                    case 2:
                        message.batch_timeout = reader.uint64();
                        break;
                    case 3:
                        if (!(message.transactions && message.transactions.length))
                            message.transactions = [];
                        message.transactions.push($root.gravity.v1.OutgoingTransferTx.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.token_contract = reader.string();
                        break;
                    case 5:
                        message.cosmos_block_created = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OutgoingTxBatch message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.OutgoingTxBatch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.OutgoingTxBatch} OutgoingTxBatch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OutgoingTxBatch.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OutgoingTxBatch message.
             * @function verify
             * @memberof gravity.v1.OutgoingTxBatch
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OutgoingTxBatch.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.batch_nonce != null && message.hasOwnProperty("batch_nonce"))
                    if (!$util.isInteger(message.batch_nonce) && !(message.batch_nonce && $util.isInteger(message.batch_nonce.low) && $util.isInteger(message.batch_nonce.high)))
                        return "batch_nonce: integer|Long expected";
                if (message.batch_timeout != null && message.hasOwnProperty("batch_timeout"))
                    if (!$util.isInteger(message.batch_timeout) && !(message.batch_timeout && $util.isInteger(message.batch_timeout.low) && $util.isInteger(message.batch_timeout.high)))
                        return "batch_timeout: integer|Long expected";
                if (message.transactions != null && message.hasOwnProperty("transactions")) {
                    if (!Array.isArray(message.transactions))
                        return "transactions: array expected";
                    for (let i = 0; i < message.transactions.length; ++i) {
                        let error = $root.gravity.v1.OutgoingTransferTx.verify(message.transactions[i]);
                        if (error)
                            return "transactions." + error;
                    }
                }
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    if (!$util.isString(message.token_contract))
                        return "token_contract: string expected";
                if (message.cosmos_block_created != null && message.hasOwnProperty("cosmos_block_created"))
                    if (!$util.isInteger(message.cosmos_block_created) && !(message.cosmos_block_created && $util.isInteger(message.cosmos_block_created.low) && $util.isInteger(message.cosmos_block_created.high)))
                        return "cosmos_block_created: integer|Long expected";
                return null;
            };

            /**
             * Creates an OutgoingTxBatch message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.OutgoingTxBatch
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.OutgoingTxBatch} OutgoingTxBatch
             */
            OutgoingTxBatch.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.OutgoingTxBatch)
                    return object;
                let message = new $root.gravity.v1.OutgoingTxBatch();
                if (object.batch_nonce != null)
                    if ($util.Long)
                        (message.batch_nonce = $util.Long.fromValue(object.batch_nonce)).unsigned = true;
                    else if (typeof object.batch_nonce === "string")
                        message.batch_nonce = parseInt(object.batch_nonce, 10);
                    else if (typeof object.batch_nonce === "number")
                        message.batch_nonce = object.batch_nonce;
                    else if (typeof object.batch_nonce === "object")
                        message.batch_nonce = new $util.LongBits(object.batch_nonce.low >>> 0, object.batch_nonce.high >>> 0).toNumber(true);
                if (object.batch_timeout != null)
                    if ($util.Long)
                        (message.batch_timeout = $util.Long.fromValue(object.batch_timeout)).unsigned = true;
                    else if (typeof object.batch_timeout === "string")
                        message.batch_timeout = parseInt(object.batch_timeout, 10);
                    else if (typeof object.batch_timeout === "number")
                        message.batch_timeout = object.batch_timeout;
                    else if (typeof object.batch_timeout === "object")
                        message.batch_timeout = new $util.LongBits(object.batch_timeout.low >>> 0, object.batch_timeout.high >>> 0).toNumber(true);
                if (object.transactions) {
                    if (!Array.isArray(object.transactions))
                        throw TypeError(".gravity.v1.OutgoingTxBatch.transactions: array expected");
                    message.transactions = [];
                    for (let i = 0; i < object.transactions.length; ++i) {
                        if (typeof object.transactions[i] !== "object")
                            throw TypeError(".gravity.v1.OutgoingTxBatch.transactions: object expected");
                        message.transactions[i] = $root.gravity.v1.OutgoingTransferTx.fromObject(object.transactions[i]);
                    }
                }
                if (object.token_contract != null)
                    message.token_contract = String(object.token_contract);
                if (object.cosmos_block_created != null)
                    if ($util.Long)
                        (message.cosmos_block_created = $util.Long.fromValue(object.cosmos_block_created)).unsigned = true;
                    else if (typeof object.cosmos_block_created === "string")
                        message.cosmos_block_created = parseInt(object.cosmos_block_created, 10);
                    else if (typeof object.cosmos_block_created === "number")
                        message.cosmos_block_created = object.cosmos_block_created;
                    else if (typeof object.cosmos_block_created === "object")
                        message.cosmos_block_created = new $util.LongBits(object.cosmos_block_created.low >>> 0, object.cosmos_block_created.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from an OutgoingTxBatch message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.OutgoingTxBatch
             * @static
             * @param {gravity.v1.OutgoingTxBatch} message OutgoingTxBatch
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OutgoingTxBatch.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.transactions = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.batch_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.batch_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.batch_timeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.batch_timeout = options.longs === String ? "0" : 0;
                    object.token_contract = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.cosmos_block_created = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.cosmos_block_created = options.longs === String ? "0" : 0;
                }
                if (message.batch_nonce != null && message.hasOwnProperty("batch_nonce"))
                    if (typeof message.batch_nonce === "number")
                        object.batch_nonce = options.longs === String ? String(message.batch_nonce) : message.batch_nonce;
                    else
                        object.batch_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.batch_nonce) : options.longs === Number ? new $util.LongBits(message.batch_nonce.low >>> 0, message.batch_nonce.high >>> 0).toNumber(true) : message.batch_nonce;
                if (message.batch_timeout != null && message.hasOwnProperty("batch_timeout"))
                    if (typeof message.batch_timeout === "number")
                        object.batch_timeout = options.longs === String ? String(message.batch_timeout) : message.batch_timeout;
                    else
                        object.batch_timeout = options.longs === String ? $util.Long.prototype.toString.call(message.batch_timeout) : options.longs === Number ? new $util.LongBits(message.batch_timeout.low >>> 0, message.batch_timeout.high >>> 0).toNumber(true) : message.batch_timeout;
                if (message.transactions && message.transactions.length) {
                    object.transactions = [];
                    for (let j = 0; j < message.transactions.length; ++j)
                        object.transactions[j] = $root.gravity.v1.OutgoingTransferTx.toObject(message.transactions[j], options);
                }
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    object.token_contract = message.token_contract;
                if (message.cosmos_block_created != null && message.hasOwnProperty("cosmos_block_created"))
                    if (typeof message.cosmos_block_created === "number")
                        object.cosmos_block_created = options.longs === String ? String(message.cosmos_block_created) : message.cosmos_block_created;
                    else
                        object.cosmos_block_created = options.longs === String ? $util.Long.prototype.toString.call(message.cosmos_block_created) : options.longs === Number ? new $util.LongBits(message.cosmos_block_created.low >>> 0, message.cosmos_block_created.high >>> 0).toNumber(true) : message.cosmos_block_created;
                return object;
            };

            /**
             * Converts this OutgoingTxBatch to JSON.
             * @function toJSON
             * @memberof gravity.v1.OutgoingTxBatch
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OutgoingTxBatch.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OutgoingTxBatch;
        })();

        v1.OutgoingTransferTx = (function() {

            /**
             * Properties of an OutgoingTransferTx.
             * @memberof gravity.v1
             * @interface IOutgoingTransferTx
             * @property {number|null} [id] OutgoingTransferTx id
             * @property {string|null} [sender] OutgoingTransferTx sender
             * @property {string|null} [dest_address] OutgoingTransferTx dest_address
             * @property {gravity.v1.IERC20Token|null} [erc20_token] OutgoingTransferTx erc20_token
             * @property {gravity.v1.IERC20Token|null} [erc20_fee] OutgoingTransferTx erc20_fee
             */

            /**
             * Constructs a new OutgoingTransferTx.
             * @memberof gravity.v1
             * @classdesc Represents an OutgoingTransferTx.
             * @implements IOutgoingTransferTx
             * @constructor
             * @param {gravity.v1.IOutgoingTransferTx=} [properties] Properties to set
             */
            function OutgoingTransferTx(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OutgoingTransferTx id.
             * @member {number} id
             * @memberof gravity.v1.OutgoingTransferTx
             * @instance
             */
            OutgoingTransferTx.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * OutgoingTransferTx sender.
             * @member {string} sender
             * @memberof gravity.v1.OutgoingTransferTx
             * @instance
             */
            OutgoingTransferTx.prototype.sender = "";

            /**
             * OutgoingTransferTx dest_address.
             * @member {string} dest_address
             * @memberof gravity.v1.OutgoingTransferTx
             * @instance
             */
            OutgoingTransferTx.prototype.dest_address = "";

            /**
             * OutgoingTransferTx erc20_token.
             * @member {gravity.v1.IERC20Token|null|undefined} erc20_token
             * @memberof gravity.v1.OutgoingTransferTx
             * @instance
             */
            OutgoingTransferTx.prototype.erc20_token = null;

            /**
             * OutgoingTransferTx erc20_fee.
             * @member {gravity.v1.IERC20Token|null|undefined} erc20_fee
             * @memberof gravity.v1.OutgoingTransferTx
             * @instance
             */
            OutgoingTransferTx.prototype.erc20_fee = null;

            /**
             * Encodes the specified OutgoingTransferTx message. Does not implicitly {@link gravity.v1.OutgoingTransferTx.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.OutgoingTransferTx
             * @static
             * @param {gravity.v1.IOutgoingTransferTx} message OutgoingTransferTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OutgoingTransferTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);
                if (message.dest_address != null && Object.hasOwnProperty.call(message, "dest_address"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.dest_address);
                if (message.erc20_token != null && Object.hasOwnProperty.call(message, "erc20_token"))
                    $root.gravity.v1.ERC20Token.encode(message.erc20_token, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.erc20_fee != null && Object.hasOwnProperty.call(message, "erc20_fee"))
                    $root.gravity.v1.ERC20Token.encode(message.erc20_fee, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OutgoingTransferTx message, length delimited. Does not implicitly {@link gravity.v1.OutgoingTransferTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.OutgoingTransferTx
             * @static
             * @param {gravity.v1.IOutgoingTransferTx} message OutgoingTransferTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OutgoingTransferTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OutgoingTransferTx message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.OutgoingTransferTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.OutgoingTransferTx} OutgoingTransferTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OutgoingTransferTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.OutgoingTransferTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint64();
                        break;
                    case 2:
                        message.sender = reader.string();
                        break;
                    case 3:
                        message.dest_address = reader.string();
                        break;
                    case 4:
                        message.erc20_token = $root.gravity.v1.ERC20Token.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.erc20_fee = $root.gravity.v1.ERC20Token.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OutgoingTransferTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.OutgoingTransferTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.OutgoingTransferTx} OutgoingTransferTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OutgoingTransferTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OutgoingTransferTx message.
             * @function verify
             * @memberof gravity.v1.OutgoingTransferTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OutgoingTransferTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                        return "id: integer|Long expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                if (message.dest_address != null && message.hasOwnProperty("dest_address"))
                    if (!$util.isString(message.dest_address))
                        return "dest_address: string expected";
                if (message.erc20_token != null && message.hasOwnProperty("erc20_token")) {
                    let error = $root.gravity.v1.ERC20Token.verify(message.erc20_token);
                    if (error)
                        return "erc20_token." + error;
                }
                if (message.erc20_fee != null && message.hasOwnProperty("erc20_fee")) {
                    let error = $root.gravity.v1.ERC20Token.verify(message.erc20_fee);
                    if (error)
                        return "erc20_fee." + error;
                }
                return null;
            };

            /**
             * Creates an OutgoingTransferTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.OutgoingTransferTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.OutgoingTransferTx} OutgoingTransferTx
             */
            OutgoingTransferTx.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.OutgoingTransferTx)
                    return object;
                let message = new $root.gravity.v1.OutgoingTransferTx();
                if (object.id != null)
                    if ($util.Long)
                        (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                    else if (typeof object.id === "string")
                        message.id = parseInt(object.id, 10);
                    else if (typeof object.id === "number")
                        message.id = object.id;
                    else if (typeof object.id === "object")
                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                if (object.sender != null)
                    message.sender = String(object.sender);
                if (object.dest_address != null)
                    message.dest_address = String(object.dest_address);
                if (object.erc20_token != null) {
                    if (typeof object.erc20_token !== "object")
                        throw TypeError(".gravity.v1.OutgoingTransferTx.erc20_token: object expected");
                    message.erc20_token = $root.gravity.v1.ERC20Token.fromObject(object.erc20_token);
                }
                if (object.erc20_fee != null) {
                    if (typeof object.erc20_fee !== "object")
                        throw TypeError(".gravity.v1.OutgoingTransferTx.erc20_fee: object expected");
                    message.erc20_fee = $root.gravity.v1.ERC20Token.fromObject(object.erc20_fee);
                }
                return message;
            };

            /**
             * Creates a plain object from an OutgoingTransferTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.OutgoingTransferTx
             * @static
             * @param {gravity.v1.OutgoingTransferTx} message OutgoingTransferTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OutgoingTransferTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.id = options.longs === String ? "0" : 0;
                    object.sender = "";
                    object.dest_address = "";
                    object.erc20_token = null;
                    object.erc20_fee = null;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (typeof message.id === "number")
                        object.id = options.longs === String ? String(message.id) : message.id;
                    else
                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                if (message.dest_address != null && message.hasOwnProperty("dest_address"))
                    object.dest_address = message.dest_address;
                if (message.erc20_token != null && message.hasOwnProperty("erc20_token"))
                    object.erc20_token = $root.gravity.v1.ERC20Token.toObject(message.erc20_token, options);
                if (message.erc20_fee != null && message.hasOwnProperty("erc20_fee"))
                    object.erc20_fee = $root.gravity.v1.ERC20Token.toObject(message.erc20_fee, options);
                return object;
            };

            /**
             * Converts this OutgoingTransferTx to JSON.
             * @function toJSON
             * @memberof gravity.v1.OutgoingTransferTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OutgoingTransferTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OutgoingTransferTx;
        })();

        v1.OutgoingLogicCall = (function() {

            /**
             * Properties of an OutgoingLogicCall.
             * @memberof gravity.v1
             * @interface IOutgoingLogicCall
             * @property {Array.<gravity.v1.IERC20Token>|null} [transfers] OutgoingLogicCall transfers
             * @property {Array.<gravity.v1.IERC20Token>|null} [fees] OutgoingLogicCall fees
             * @property {string|null} [logic_contract_address] OutgoingLogicCall logic_contract_address
             * @property {Uint8Array|null} [payload] OutgoingLogicCall payload
             * @property {number|null} [timeout] OutgoingLogicCall timeout
             * @property {Uint8Array|null} [invalidation_id] OutgoingLogicCall invalidation_id
             * @property {number|null} [invalidation_nonce] OutgoingLogicCall invalidation_nonce
             * @property {number|null} [cosmos_block_created] OutgoingLogicCall cosmos_block_created
             */

            /**
             * Constructs a new OutgoingLogicCall.
             * @memberof gravity.v1
             * @classdesc Represents an OutgoingLogicCall.
             * @implements IOutgoingLogicCall
             * @constructor
             * @param {gravity.v1.IOutgoingLogicCall=} [properties] Properties to set
             */
            function OutgoingLogicCall(properties) {
                this.transfers = [];
                this.fees = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OutgoingLogicCall transfers.
             * @member {Array.<gravity.v1.IERC20Token>} transfers
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             */
            OutgoingLogicCall.prototype.transfers = $util.emptyArray;

            /**
             * OutgoingLogicCall fees.
             * @member {Array.<gravity.v1.IERC20Token>} fees
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             */
            OutgoingLogicCall.prototype.fees = $util.emptyArray;

            /**
             * OutgoingLogicCall logic_contract_address.
             * @member {string} logic_contract_address
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             */
            OutgoingLogicCall.prototype.logic_contract_address = "";

            /**
             * OutgoingLogicCall payload.
             * @member {Uint8Array} payload
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             */
            OutgoingLogicCall.prototype.payload = $util.newBuffer([]);

            /**
             * OutgoingLogicCall timeout.
             * @member {number} timeout
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             */
            OutgoingLogicCall.prototype.timeout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * OutgoingLogicCall invalidation_id.
             * @member {Uint8Array} invalidation_id
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             */
            OutgoingLogicCall.prototype.invalidation_id = $util.newBuffer([]);

            /**
             * OutgoingLogicCall invalidation_nonce.
             * @member {number} invalidation_nonce
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             */
            OutgoingLogicCall.prototype.invalidation_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * OutgoingLogicCall cosmos_block_created.
             * @member {number} cosmos_block_created
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             */
            OutgoingLogicCall.prototype.cosmos_block_created = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified OutgoingLogicCall message. Does not implicitly {@link gravity.v1.OutgoingLogicCall.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.OutgoingLogicCall
             * @static
             * @param {gravity.v1.IOutgoingLogicCall} message OutgoingLogicCall message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OutgoingLogicCall.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transfers != null && message.transfers.length)
                    for (let i = 0; i < message.transfers.length; ++i)
                        $root.gravity.v1.ERC20Token.encode(message.transfers[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.fees != null && message.fees.length)
                    for (let i = 0; i < message.fees.length; ++i)
                        $root.gravity.v1.ERC20Token.encode(message.fees[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.logic_contract_address != null && Object.hasOwnProperty.call(message, "logic_contract_address"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.logic_contract_address);
                if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.payload);
                if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.timeout);
                if (message.invalidation_id != null && Object.hasOwnProperty.call(message, "invalidation_id"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.invalidation_id);
                if (message.invalidation_nonce != null && Object.hasOwnProperty.call(message, "invalidation_nonce"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.invalidation_nonce);
                if (message.cosmos_block_created != null && Object.hasOwnProperty.call(message, "cosmos_block_created"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.cosmos_block_created);
                return writer;
            };

            /**
             * Encodes the specified OutgoingLogicCall message, length delimited. Does not implicitly {@link gravity.v1.OutgoingLogicCall.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.OutgoingLogicCall
             * @static
             * @param {gravity.v1.IOutgoingLogicCall} message OutgoingLogicCall message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OutgoingLogicCall.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OutgoingLogicCall message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.OutgoingLogicCall
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.OutgoingLogicCall} OutgoingLogicCall
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OutgoingLogicCall.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.OutgoingLogicCall();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.transfers && message.transfers.length))
                            message.transfers = [];
                        message.transfers.push($root.gravity.v1.ERC20Token.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        if (!(message.fees && message.fees.length))
                            message.fees = [];
                        message.fees.push($root.gravity.v1.ERC20Token.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.logic_contract_address = reader.string();
                        break;
                    case 4:
                        message.payload = reader.bytes();
                        break;
                    case 5:
                        message.timeout = reader.uint64();
                        break;
                    case 6:
                        message.invalidation_id = reader.bytes();
                        break;
                    case 7:
                        message.invalidation_nonce = reader.uint64();
                        break;
                    case 8:
                        message.cosmos_block_created = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OutgoingLogicCall message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.OutgoingLogicCall
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.OutgoingLogicCall} OutgoingLogicCall
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OutgoingLogicCall.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OutgoingLogicCall message.
             * @function verify
             * @memberof gravity.v1.OutgoingLogicCall
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OutgoingLogicCall.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.transfers != null && message.hasOwnProperty("transfers")) {
                    if (!Array.isArray(message.transfers))
                        return "transfers: array expected";
                    for (let i = 0; i < message.transfers.length; ++i) {
                        let error = $root.gravity.v1.ERC20Token.verify(message.transfers[i]);
                        if (error)
                            return "transfers." + error;
                    }
                }
                if (message.fees != null && message.hasOwnProperty("fees")) {
                    if (!Array.isArray(message.fees))
                        return "fees: array expected";
                    for (let i = 0; i < message.fees.length; ++i) {
                        let error = $root.gravity.v1.ERC20Token.verify(message.fees[i]);
                        if (error)
                            return "fees." + error;
                    }
                }
                if (message.logic_contract_address != null && message.hasOwnProperty("logic_contract_address"))
                    if (!$util.isString(message.logic_contract_address))
                        return "logic_contract_address: string expected";
                if (message.payload != null && message.hasOwnProperty("payload"))
                    if (!(message.payload && typeof message.payload.length === "number" || $util.isString(message.payload)))
                        return "payload: buffer expected";
                if (message.timeout != null && message.hasOwnProperty("timeout"))
                    if (!$util.isInteger(message.timeout) && !(message.timeout && $util.isInteger(message.timeout.low) && $util.isInteger(message.timeout.high)))
                        return "timeout: integer|Long expected";
                if (message.invalidation_id != null && message.hasOwnProperty("invalidation_id"))
                    if (!(message.invalidation_id && typeof message.invalidation_id.length === "number" || $util.isString(message.invalidation_id)))
                        return "invalidation_id: buffer expected";
                if (message.invalidation_nonce != null && message.hasOwnProperty("invalidation_nonce"))
                    if (!$util.isInteger(message.invalidation_nonce) && !(message.invalidation_nonce && $util.isInteger(message.invalidation_nonce.low) && $util.isInteger(message.invalidation_nonce.high)))
                        return "invalidation_nonce: integer|Long expected";
                if (message.cosmos_block_created != null && message.hasOwnProperty("cosmos_block_created"))
                    if (!$util.isInteger(message.cosmos_block_created) && !(message.cosmos_block_created && $util.isInteger(message.cosmos_block_created.low) && $util.isInteger(message.cosmos_block_created.high)))
                        return "cosmos_block_created: integer|Long expected";
                return null;
            };

            /**
             * Creates an OutgoingLogicCall message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.OutgoingLogicCall
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.OutgoingLogicCall} OutgoingLogicCall
             */
            OutgoingLogicCall.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.OutgoingLogicCall)
                    return object;
                let message = new $root.gravity.v1.OutgoingLogicCall();
                if (object.transfers) {
                    if (!Array.isArray(object.transfers))
                        throw TypeError(".gravity.v1.OutgoingLogicCall.transfers: array expected");
                    message.transfers = [];
                    for (let i = 0; i < object.transfers.length; ++i) {
                        if (typeof object.transfers[i] !== "object")
                            throw TypeError(".gravity.v1.OutgoingLogicCall.transfers: object expected");
                        message.transfers[i] = $root.gravity.v1.ERC20Token.fromObject(object.transfers[i]);
                    }
                }
                if (object.fees) {
                    if (!Array.isArray(object.fees))
                        throw TypeError(".gravity.v1.OutgoingLogicCall.fees: array expected");
                    message.fees = [];
                    for (let i = 0; i < object.fees.length; ++i) {
                        if (typeof object.fees[i] !== "object")
                            throw TypeError(".gravity.v1.OutgoingLogicCall.fees: object expected");
                        message.fees[i] = $root.gravity.v1.ERC20Token.fromObject(object.fees[i]);
                    }
                }
                if (object.logic_contract_address != null)
                    message.logic_contract_address = String(object.logic_contract_address);
                if (object.payload != null)
                    if (typeof object.payload === "string")
                        $util.base64.decode(object.payload, message.payload = $util.newBuffer($util.base64.length(object.payload)), 0);
                    else if (object.payload.length)
                        message.payload = object.payload;
                if (object.timeout != null)
                    if ($util.Long)
                        (message.timeout = $util.Long.fromValue(object.timeout)).unsigned = true;
                    else if (typeof object.timeout === "string")
                        message.timeout = parseInt(object.timeout, 10);
                    else if (typeof object.timeout === "number")
                        message.timeout = object.timeout;
                    else if (typeof object.timeout === "object")
                        message.timeout = new $util.LongBits(object.timeout.low >>> 0, object.timeout.high >>> 0).toNumber(true);
                if (object.invalidation_id != null)
                    if (typeof object.invalidation_id === "string")
                        $util.base64.decode(object.invalidation_id, message.invalidation_id = $util.newBuffer($util.base64.length(object.invalidation_id)), 0);
                    else if (object.invalidation_id.length)
                        message.invalidation_id = object.invalidation_id;
                if (object.invalidation_nonce != null)
                    if ($util.Long)
                        (message.invalidation_nonce = $util.Long.fromValue(object.invalidation_nonce)).unsigned = true;
                    else if (typeof object.invalidation_nonce === "string")
                        message.invalidation_nonce = parseInt(object.invalidation_nonce, 10);
                    else if (typeof object.invalidation_nonce === "number")
                        message.invalidation_nonce = object.invalidation_nonce;
                    else if (typeof object.invalidation_nonce === "object")
                        message.invalidation_nonce = new $util.LongBits(object.invalidation_nonce.low >>> 0, object.invalidation_nonce.high >>> 0).toNumber(true);
                if (object.cosmos_block_created != null)
                    if ($util.Long)
                        (message.cosmos_block_created = $util.Long.fromValue(object.cosmos_block_created)).unsigned = true;
                    else if (typeof object.cosmos_block_created === "string")
                        message.cosmos_block_created = parseInt(object.cosmos_block_created, 10);
                    else if (typeof object.cosmos_block_created === "number")
                        message.cosmos_block_created = object.cosmos_block_created;
                    else if (typeof object.cosmos_block_created === "object")
                        message.cosmos_block_created = new $util.LongBits(object.cosmos_block_created.low >>> 0, object.cosmos_block_created.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from an OutgoingLogicCall message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.OutgoingLogicCall
             * @static
             * @param {gravity.v1.OutgoingLogicCall} message OutgoingLogicCall
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OutgoingLogicCall.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.transfers = [];
                    object.fees = [];
                }
                if (options.defaults) {
                    object.logic_contract_address = "";
                    if (options.bytes === String)
                        object.payload = "";
                    else {
                        object.payload = [];
                        if (options.bytes !== Array)
                            object.payload = $util.newBuffer(object.payload);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.timeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timeout = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.invalidation_id = "";
                    else {
                        object.invalidation_id = [];
                        if (options.bytes !== Array)
                            object.invalidation_id = $util.newBuffer(object.invalidation_id);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.invalidation_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.invalidation_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.cosmos_block_created = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.cosmos_block_created = options.longs === String ? "0" : 0;
                }
                if (message.transfers && message.transfers.length) {
                    object.transfers = [];
                    for (let j = 0; j < message.transfers.length; ++j)
                        object.transfers[j] = $root.gravity.v1.ERC20Token.toObject(message.transfers[j], options);
                }
                if (message.fees && message.fees.length) {
                    object.fees = [];
                    for (let j = 0; j < message.fees.length; ++j)
                        object.fees[j] = $root.gravity.v1.ERC20Token.toObject(message.fees[j], options);
                }
                if (message.logic_contract_address != null && message.hasOwnProperty("logic_contract_address"))
                    object.logic_contract_address = message.logic_contract_address;
                if (message.payload != null && message.hasOwnProperty("payload"))
                    object.payload = options.bytes === String ? $util.base64.encode(message.payload, 0, message.payload.length) : options.bytes === Array ? Array.prototype.slice.call(message.payload) : message.payload;
                if (message.timeout != null && message.hasOwnProperty("timeout"))
                    if (typeof message.timeout === "number")
                        object.timeout = options.longs === String ? String(message.timeout) : message.timeout;
                    else
                        object.timeout = options.longs === String ? $util.Long.prototype.toString.call(message.timeout) : options.longs === Number ? new $util.LongBits(message.timeout.low >>> 0, message.timeout.high >>> 0).toNumber(true) : message.timeout;
                if (message.invalidation_id != null && message.hasOwnProperty("invalidation_id"))
                    object.invalidation_id = options.bytes === String ? $util.base64.encode(message.invalidation_id, 0, message.invalidation_id.length) : options.bytes === Array ? Array.prototype.slice.call(message.invalidation_id) : message.invalidation_id;
                if (message.invalidation_nonce != null && message.hasOwnProperty("invalidation_nonce"))
                    if (typeof message.invalidation_nonce === "number")
                        object.invalidation_nonce = options.longs === String ? String(message.invalidation_nonce) : message.invalidation_nonce;
                    else
                        object.invalidation_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.invalidation_nonce) : options.longs === Number ? new $util.LongBits(message.invalidation_nonce.low >>> 0, message.invalidation_nonce.high >>> 0).toNumber(true) : message.invalidation_nonce;
                if (message.cosmos_block_created != null && message.hasOwnProperty("cosmos_block_created"))
                    if (typeof message.cosmos_block_created === "number")
                        object.cosmos_block_created = options.longs === String ? String(message.cosmos_block_created) : message.cosmos_block_created;
                    else
                        object.cosmos_block_created = options.longs === String ? $util.Long.prototype.toString.call(message.cosmos_block_created) : options.longs === Number ? new $util.LongBits(message.cosmos_block_created.low >>> 0, message.cosmos_block_created.high >>> 0).toNumber(true) : message.cosmos_block_created;
                return object;
            };

            /**
             * Converts this OutgoingLogicCall to JSON.
             * @function toJSON
             * @memberof gravity.v1.OutgoingLogicCall
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OutgoingLogicCall.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OutgoingLogicCall;
        })();

        v1.EventOutgoingBatchCanceled = (function() {

            /**
             * Properties of an EventOutgoingBatchCanceled.
             * @memberof gravity.v1
             * @interface IEventOutgoingBatchCanceled
             * @property {string|null} [bridge_contract] EventOutgoingBatchCanceled bridge_contract
             * @property {string|null} [bridge_chain_id] EventOutgoingBatchCanceled bridge_chain_id
             * @property {string|null} [batch_id] EventOutgoingBatchCanceled batch_id
             * @property {string|null} [nonce] EventOutgoingBatchCanceled nonce
             */

            /**
             * Constructs a new EventOutgoingBatchCanceled.
             * @memberof gravity.v1
             * @classdesc Represents an EventOutgoingBatchCanceled.
             * @implements IEventOutgoingBatchCanceled
             * @constructor
             * @param {gravity.v1.IEventOutgoingBatchCanceled=} [properties] Properties to set
             */
            function EventOutgoingBatchCanceled(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventOutgoingBatchCanceled bridge_contract.
             * @member {string} bridge_contract
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @instance
             */
            EventOutgoingBatchCanceled.prototype.bridge_contract = "";

            /**
             * EventOutgoingBatchCanceled bridge_chain_id.
             * @member {string} bridge_chain_id
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @instance
             */
            EventOutgoingBatchCanceled.prototype.bridge_chain_id = "";

            /**
             * EventOutgoingBatchCanceled batch_id.
             * @member {string} batch_id
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @instance
             */
            EventOutgoingBatchCanceled.prototype.batch_id = "";

            /**
             * EventOutgoingBatchCanceled nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @instance
             */
            EventOutgoingBatchCanceled.prototype.nonce = "";

            /**
             * Encodes the specified EventOutgoingBatchCanceled message. Does not implicitly {@link gravity.v1.EventOutgoingBatchCanceled.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @static
             * @param {gravity.v1.IEventOutgoingBatchCanceled} message EventOutgoingBatchCanceled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventOutgoingBatchCanceled.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bridge_contract != null && Object.hasOwnProperty.call(message, "bridge_contract"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.bridge_contract);
                if (message.bridge_chain_id != null && Object.hasOwnProperty.call(message, "bridge_chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.bridge_chain_id);
                if (message.batch_id != null && Object.hasOwnProperty.call(message, "batch_id"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.batch_id);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified EventOutgoingBatchCanceled message, length delimited. Does not implicitly {@link gravity.v1.EventOutgoingBatchCanceled.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @static
             * @param {gravity.v1.IEventOutgoingBatchCanceled} message EventOutgoingBatchCanceled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventOutgoingBatchCanceled.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventOutgoingBatchCanceled message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventOutgoingBatchCanceled} EventOutgoingBatchCanceled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventOutgoingBatchCanceled.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventOutgoingBatchCanceled();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.bridge_contract = reader.string();
                        break;
                    case 2:
                        message.bridge_chain_id = reader.string();
                        break;
                    case 3:
                        message.batch_id = reader.string();
                        break;
                    case 4:
                        message.nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventOutgoingBatchCanceled message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventOutgoingBatchCanceled} EventOutgoingBatchCanceled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventOutgoingBatchCanceled.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventOutgoingBatchCanceled message.
             * @function verify
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventOutgoingBatchCanceled.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    if (!$util.isString(message.bridge_contract))
                        return "bridge_contract: string expected";
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    if (!$util.isString(message.bridge_chain_id))
                        return "bridge_chain_id: string expected";
                if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                    if (!$util.isString(message.batch_id))
                        return "batch_id: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                return null;
            };

            /**
             * Creates an EventOutgoingBatchCanceled message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventOutgoingBatchCanceled} EventOutgoingBatchCanceled
             */
            EventOutgoingBatchCanceled.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventOutgoingBatchCanceled)
                    return object;
                let message = new $root.gravity.v1.EventOutgoingBatchCanceled();
                if (object.bridge_contract != null)
                    message.bridge_contract = String(object.bridge_contract);
                if (object.bridge_chain_id != null)
                    message.bridge_chain_id = String(object.bridge_chain_id);
                if (object.batch_id != null)
                    message.batch_id = String(object.batch_id);
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventOutgoingBatchCanceled message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @static
             * @param {gravity.v1.EventOutgoingBatchCanceled} message EventOutgoingBatchCanceled
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventOutgoingBatchCanceled.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.bridge_contract = "";
                    object.bridge_chain_id = "";
                    object.batch_id = "";
                    object.nonce = "";
                }
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    object.bridge_contract = message.bridge_contract;
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    object.bridge_chain_id = message.bridge_chain_id;
                if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                    object.batch_id = message.batch_id;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                return object;
            };

            /**
             * Converts this EventOutgoingBatchCanceled to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventOutgoingBatchCanceled
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventOutgoingBatchCanceled.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventOutgoingBatchCanceled;
        })();

        v1.EventOutgoingBatch = (function() {

            /**
             * Properties of an EventOutgoingBatch.
             * @memberof gravity.v1
             * @interface IEventOutgoingBatch
             * @property {string|null} [bridge_contract] EventOutgoingBatch bridge_contract
             * @property {string|null} [bridge_chain_id] EventOutgoingBatch bridge_chain_id
             * @property {string|null} [batch_id] EventOutgoingBatch batch_id
             * @property {string|null} [nonce] EventOutgoingBatch nonce
             */

            /**
             * Constructs a new EventOutgoingBatch.
             * @memberof gravity.v1
             * @classdesc Represents an EventOutgoingBatch.
             * @implements IEventOutgoingBatch
             * @constructor
             * @param {gravity.v1.IEventOutgoingBatch=} [properties] Properties to set
             */
            function EventOutgoingBatch(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventOutgoingBatch bridge_contract.
             * @member {string} bridge_contract
             * @memberof gravity.v1.EventOutgoingBatch
             * @instance
             */
            EventOutgoingBatch.prototype.bridge_contract = "";

            /**
             * EventOutgoingBatch bridge_chain_id.
             * @member {string} bridge_chain_id
             * @memberof gravity.v1.EventOutgoingBatch
             * @instance
             */
            EventOutgoingBatch.prototype.bridge_chain_id = "";

            /**
             * EventOutgoingBatch batch_id.
             * @member {string} batch_id
             * @memberof gravity.v1.EventOutgoingBatch
             * @instance
             */
            EventOutgoingBatch.prototype.batch_id = "";

            /**
             * EventOutgoingBatch nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventOutgoingBatch
             * @instance
             */
            EventOutgoingBatch.prototype.nonce = "";

            /**
             * Encodes the specified EventOutgoingBatch message. Does not implicitly {@link gravity.v1.EventOutgoingBatch.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventOutgoingBatch
             * @static
             * @param {gravity.v1.IEventOutgoingBatch} message EventOutgoingBatch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventOutgoingBatch.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bridge_contract != null && Object.hasOwnProperty.call(message, "bridge_contract"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.bridge_contract);
                if (message.bridge_chain_id != null && Object.hasOwnProperty.call(message, "bridge_chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.bridge_chain_id);
                if (message.batch_id != null && Object.hasOwnProperty.call(message, "batch_id"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.batch_id);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified EventOutgoingBatch message, length delimited. Does not implicitly {@link gravity.v1.EventOutgoingBatch.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventOutgoingBatch
             * @static
             * @param {gravity.v1.IEventOutgoingBatch} message EventOutgoingBatch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventOutgoingBatch.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventOutgoingBatch message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventOutgoingBatch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventOutgoingBatch} EventOutgoingBatch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventOutgoingBatch.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventOutgoingBatch();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.bridge_contract = reader.string();
                        break;
                    case 2:
                        message.bridge_chain_id = reader.string();
                        break;
                    case 3:
                        message.batch_id = reader.string();
                        break;
                    case 4:
                        message.nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventOutgoingBatch message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventOutgoingBatch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventOutgoingBatch} EventOutgoingBatch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventOutgoingBatch.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventOutgoingBatch message.
             * @function verify
             * @memberof gravity.v1.EventOutgoingBatch
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventOutgoingBatch.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    if (!$util.isString(message.bridge_contract))
                        return "bridge_contract: string expected";
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    if (!$util.isString(message.bridge_chain_id))
                        return "bridge_chain_id: string expected";
                if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                    if (!$util.isString(message.batch_id))
                        return "batch_id: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                return null;
            };

            /**
             * Creates an EventOutgoingBatch message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventOutgoingBatch
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventOutgoingBatch} EventOutgoingBatch
             */
            EventOutgoingBatch.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventOutgoingBatch)
                    return object;
                let message = new $root.gravity.v1.EventOutgoingBatch();
                if (object.bridge_contract != null)
                    message.bridge_contract = String(object.bridge_contract);
                if (object.bridge_chain_id != null)
                    message.bridge_chain_id = String(object.bridge_chain_id);
                if (object.batch_id != null)
                    message.batch_id = String(object.batch_id);
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventOutgoingBatch message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventOutgoingBatch
             * @static
             * @param {gravity.v1.EventOutgoingBatch} message EventOutgoingBatch
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventOutgoingBatch.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.bridge_contract = "";
                    object.bridge_chain_id = "";
                    object.batch_id = "";
                    object.nonce = "";
                }
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    object.bridge_contract = message.bridge_contract;
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    object.bridge_chain_id = message.bridge_chain_id;
                if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                    object.batch_id = message.batch_id;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                return object;
            };

            /**
             * Converts this EventOutgoingBatch to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventOutgoingBatch
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventOutgoingBatch.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventOutgoingBatch;
        })();

        v1.BridgeValidator = (function() {

            /**
             * Properties of a BridgeValidator.
             * @memberof gravity.v1
             * @interface IBridgeValidator
             * @property {number|null} [power] BridgeValidator power
             * @property {string|null} [ethereum_address] BridgeValidator ethereum_address
             */

            /**
             * Constructs a new BridgeValidator.
             * @memberof gravity.v1
             * @classdesc Represents a BridgeValidator.
             * @implements IBridgeValidator
             * @constructor
             * @param {gravity.v1.IBridgeValidator=} [properties] Properties to set
             */
            function BridgeValidator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BridgeValidator power.
             * @member {number} power
             * @memberof gravity.v1.BridgeValidator
             * @instance
             */
            BridgeValidator.prototype.power = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * BridgeValidator ethereum_address.
             * @member {string} ethereum_address
             * @memberof gravity.v1.BridgeValidator
             * @instance
             */
            BridgeValidator.prototype.ethereum_address = "";

            /**
             * Encodes the specified BridgeValidator message. Does not implicitly {@link gravity.v1.BridgeValidator.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.BridgeValidator
             * @static
             * @param {gravity.v1.IBridgeValidator} message BridgeValidator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BridgeValidator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.power != null && Object.hasOwnProperty.call(message, "power"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.power);
                if (message.ethereum_address != null && Object.hasOwnProperty.call(message, "ethereum_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ethereum_address);
                return writer;
            };

            /**
             * Encodes the specified BridgeValidator message, length delimited. Does not implicitly {@link gravity.v1.BridgeValidator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.BridgeValidator
             * @static
             * @param {gravity.v1.IBridgeValidator} message BridgeValidator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BridgeValidator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BridgeValidator message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.BridgeValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.BridgeValidator} BridgeValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BridgeValidator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.BridgeValidator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.power = reader.uint64();
                        break;
                    case 2:
                        message.ethereum_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BridgeValidator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.BridgeValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.BridgeValidator} BridgeValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BridgeValidator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BridgeValidator message.
             * @function verify
             * @memberof gravity.v1.BridgeValidator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BridgeValidator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.power != null && message.hasOwnProperty("power"))
                    if (!$util.isInteger(message.power) && !(message.power && $util.isInteger(message.power.low) && $util.isInteger(message.power.high)))
                        return "power: integer|Long expected";
                if (message.ethereum_address != null && message.hasOwnProperty("ethereum_address"))
                    if (!$util.isString(message.ethereum_address))
                        return "ethereum_address: string expected";
                return null;
            };

            /**
             * Creates a BridgeValidator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.BridgeValidator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.BridgeValidator} BridgeValidator
             */
            BridgeValidator.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.BridgeValidator)
                    return object;
                let message = new $root.gravity.v1.BridgeValidator();
                if (object.power != null)
                    if ($util.Long)
                        (message.power = $util.Long.fromValue(object.power)).unsigned = true;
                    else if (typeof object.power === "string")
                        message.power = parseInt(object.power, 10);
                    else if (typeof object.power === "number")
                        message.power = object.power;
                    else if (typeof object.power === "object")
                        message.power = new $util.LongBits(object.power.low >>> 0, object.power.high >>> 0).toNumber(true);
                if (object.ethereum_address != null)
                    message.ethereum_address = String(object.ethereum_address);
                return message;
            };

            /**
             * Creates a plain object from a BridgeValidator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.BridgeValidator
             * @static
             * @param {gravity.v1.BridgeValidator} message BridgeValidator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BridgeValidator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.power = options.longs === String ? "0" : 0;
                    object.ethereum_address = "";
                }
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power === "number")
                        object.power = options.longs === String ? String(message.power) : message.power;
                    else
                        object.power = options.longs === String ? $util.Long.prototype.toString.call(message.power) : options.longs === Number ? new $util.LongBits(message.power.low >>> 0, message.power.high >>> 0).toNumber(true) : message.power;
                if (message.ethereum_address != null && message.hasOwnProperty("ethereum_address"))
                    object.ethereum_address = message.ethereum_address;
                return object;
            };

            /**
             * Converts this BridgeValidator to JSON.
             * @function toJSON
             * @memberof gravity.v1.BridgeValidator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BridgeValidator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BridgeValidator;
        })();

        v1.Valset = (function() {

            /**
             * Properties of a Valset.
             * @memberof gravity.v1
             * @interface IValset
             * @property {number|null} [nonce] Valset nonce
             * @property {Array.<gravity.v1.IBridgeValidator>|null} [members] Valset members
             * @property {number|null} [height] Valset height
             * @property {string|null} [reward_amount] Valset reward_amount
             * @property {string|null} [reward_token] Valset reward_token
             */

            /**
             * Constructs a new Valset.
             * @memberof gravity.v1
             * @classdesc Represents a Valset.
             * @implements IValset
             * @constructor
             * @param {gravity.v1.IValset=} [properties] Properties to set
             */
            function Valset(properties) {
                this.members = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Valset nonce.
             * @member {number} nonce
             * @memberof gravity.v1.Valset
             * @instance
             */
            Valset.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Valset members.
             * @member {Array.<gravity.v1.IBridgeValidator>} members
             * @memberof gravity.v1.Valset
             * @instance
             */
            Valset.prototype.members = $util.emptyArray;

            /**
             * Valset height.
             * @member {number} height
             * @memberof gravity.v1.Valset
             * @instance
             */
            Valset.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Valset reward_amount.
             * @member {string} reward_amount
             * @memberof gravity.v1.Valset
             * @instance
             */
            Valset.prototype.reward_amount = "";

            /**
             * Valset reward_token.
             * @member {string} reward_token
             * @memberof gravity.v1.Valset
             * @instance
             */
            Valset.prototype.reward_token = "";

            /**
             * Encodes the specified Valset message. Does not implicitly {@link gravity.v1.Valset.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.Valset
             * @static
             * @param {gravity.v1.IValset} message Valset message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Valset.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                if (message.members != null && message.members.length)
                    for (let i = 0; i < message.members.length; ++i)
                        $root.gravity.v1.BridgeValidator.encode(message.members[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.height);
                if (message.reward_amount != null && Object.hasOwnProperty.call(message, "reward_amount"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.reward_amount);
                if (message.reward_token != null && Object.hasOwnProperty.call(message, "reward_token"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.reward_token);
                return writer;
            };

            /**
             * Encodes the specified Valset message, length delimited. Does not implicitly {@link gravity.v1.Valset.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.Valset
             * @static
             * @param {gravity.v1.IValset} message Valset message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Valset.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Valset message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.Valset
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.Valset} Valset
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Valset.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.Valset();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    case 2:
                        if (!(message.members && message.members.length))
                            message.members = [];
                        message.members.push($root.gravity.v1.BridgeValidator.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.height = reader.uint64();
                        break;
                    case 4:
                        message.reward_amount = reader.string();
                        break;
                    case 5:
                        message.reward_token = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Valset message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.Valset
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.Valset} Valset
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Valset.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Valset message.
             * @function verify
             * @memberof gravity.v1.Valset
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Valset.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                if (message.members != null && message.hasOwnProperty("members")) {
                    if (!Array.isArray(message.members))
                        return "members: array expected";
                    for (let i = 0; i < message.members.length; ++i) {
                        let error = $root.gravity.v1.BridgeValidator.verify(message.members[i]);
                        if (error)
                            return "members." + error;
                    }
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.reward_amount != null && message.hasOwnProperty("reward_amount"))
                    if (!$util.isString(message.reward_amount))
                        return "reward_amount: string expected";
                if (message.reward_token != null && message.hasOwnProperty("reward_token"))
                    if (!$util.isString(message.reward_token))
                        return "reward_token: string expected";
                return null;
            };

            /**
             * Creates a Valset message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.Valset
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.Valset} Valset
             */
            Valset.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.Valset)
                    return object;
                let message = new $root.gravity.v1.Valset();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                if (object.members) {
                    if (!Array.isArray(object.members))
                        throw TypeError(".gravity.v1.Valset.members: array expected");
                    message.members = [];
                    for (let i = 0; i < object.members.length; ++i) {
                        if (typeof object.members[i] !== "object")
                            throw TypeError(".gravity.v1.Valset.members: object expected");
                        message.members[i] = $root.gravity.v1.BridgeValidator.fromObject(object.members[i]);
                    }
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.reward_amount != null)
                    message.reward_amount = String(object.reward_amount);
                if (object.reward_token != null)
                    message.reward_token = String(object.reward_token);
                return message;
            };

            /**
             * Creates a plain object from a Valset message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.Valset
             * @static
             * @param {gravity.v1.Valset} message Valset
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Valset.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.members = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.reward_amount = "";
                    object.reward_token = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                if (message.members && message.members.length) {
                    object.members = [];
                    for (let j = 0; j < message.members.length; ++j)
                        object.members[j] = $root.gravity.v1.BridgeValidator.toObject(message.members[j], options);
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.reward_amount != null && message.hasOwnProperty("reward_amount"))
                    object.reward_amount = message.reward_amount;
                if (message.reward_token != null && message.hasOwnProperty("reward_token"))
                    object.reward_token = message.reward_token;
                return object;
            };

            /**
             * Converts this Valset to JSON.
             * @function toJSON
             * @memberof gravity.v1.Valset
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Valset.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Valset;
        })();

        v1.LastObservedEthereumBlockHeight = (function() {

            /**
             * Properties of a LastObservedEthereumBlockHeight.
             * @memberof gravity.v1
             * @interface ILastObservedEthereumBlockHeight
             * @property {number|null} [cosmos_block_height] LastObservedEthereumBlockHeight cosmos_block_height
             * @property {number|null} [ethereum_block_height] LastObservedEthereumBlockHeight ethereum_block_height
             */

            /**
             * Constructs a new LastObservedEthereumBlockHeight.
             * @memberof gravity.v1
             * @classdesc Represents a LastObservedEthereumBlockHeight.
             * @implements ILastObservedEthereumBlockHeight
             * @constructor
             * @param {gravity.v1.ILastObservedEthereumBlockHeight=} [properties] Properties to set
             */
            function LastObservedEthereumBlockHeight(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LastObservedEthereumBlockHeight cosmos_block_height.
             * @member {number} cosmos_block_height
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @instance
             */
            LastObservedEthereumBlockHeight.prototype.cosmos_block_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * LastObservedEthereumBlockHeight ethereum_block_height.
             * @member {number} ethereum_block_height
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @instance
             */
            LastObservedEthereumBlockHeight.prototype.ethereum_block_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified LastObservedEthereumBlockHeight message. Does not implicitly {@link gravity.v1.LastObservedEthereumBlockHeight.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @static
             * @param {gravity.v1.ILastObservedEthereumBlockHeight} message LastObservedEthereumBlockHeight message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastObservedEthereumBlockHeight.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.cosmos_block_height != null && Object.hasOwnProperty.call(message, "cosmos_block_height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.cosmos_block_height);
                if (message.ethereum_block_height != null && Object.hasOwnProperty.call(message, "ethereum_block_height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ethereum_block_height);
                return writer;
            };

            /**
             * Encodes the specified LastObservedEthereumBlockHeight message, length delimited. Does not implicitly {@link gravity.v1.LastObservedEthereumBlockHeight.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @static
             * @param {gravity.v1.ILastObservedEthereumBlockHeight} message LastObservedEthereumBlockHeight message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastObservedEthereumBlockHeight.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LastObservedEthereumBlockHeight message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.LastObservedEthereumBlockHeight} LastObservedEthereumBlockHeight
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastObservedEthereumBlockHeight.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.LastObservedEthereumBlockHeight();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.cosmos_block_height = reader.uint64();
                        break;
                    case 2:
                        message.ethereum_block_height = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LastObservedEthereumBlockHeight message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.LastObservedEthereumBlockHeight} LastObservedEthereumBlockHeight
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastObservedEthereumBlockHeight.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LastObservedEthereumBlockHeight message.
             * @function verify
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LastObservedEthereumBlockHeight.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.cosmos_block_height != null && message.hasOwnProperty("cosmos_block_height"))
                    if (!$util.isInteger(message.cosmos_block_height) && !(message.cosmos_block_height && $util.isInteger(message.cosmos_block_height.low) && $util.isInteger(message.cosmos_block_height.high)))
                        return "cosmos_block_height: integer|Long expected";
                if (message.ethereum_block_height != null && message.hasOwnProperty("ethereum_block_height"))
                    if (!$util.isInteger(message.ethereum_block_height) && !(message.ethereum_block_height && $util.isInteger(message.ethereum_block_height.low) && $util.isInteger(message.ethereum_block_height.high)))
                        return "ethereum_block_height: integer|Long expected";
                return null;
            };

            /**
             * Creates a LastObservedEthereumBlockHeight message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.LastObservedEthereumBlockHeight} LastObservedEthereumBlockHeight
             */
            LastObservedEthereumBlockHeight.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.LastObservedEthereumBlockHeight)
                    return object;
                let message = new $root.gravity.v1.LastObservedEthereumBlockHeight();
                if (object.cosmos_block_height != null)
                    if ($util.Long)
                        (message.cosmos_block_height = $util.Long.fromValue(object.cosmos_block_height)).unsigned = true;
                    else if (typeof object.cosmos_block_height === "string")
                        message.cosmos_block_height = parseInt(object.cosmos_block_height, 10);
                    else if (typeof object.cosmos_block_height === "number")
                        message.cosmos_block_height = object.cosmos_block_height;
                    else if (typeof object.cosmos_block_height === "object")
                        message.cosmos_block_height = new $util.LongBits(object.cosmos_block_height.low >>> 0, object.cosmos_block_height.high >>> 0).toNumber(true);
                if (object.ethereum_block_height != null)
                    if ($util.Long)
                        (message.ethereum_block_height = $util.Long.fromValue(object.ethereum_block_height)).unsigned = true;
                    else if (typeof object.ethereum_block_height === "string")
                        message.ethereum_block_height = parseInt(object.ethereum_block_height, 10);
                    else if (typeof object.ethereum_block_height === "number")
                        message.ethereum_block_height = object.ethereum_block_height;
                    else if (typeof object.ethereum_block_height === "object")
                        message.ethereum_block_height = new $util.LongBits(object.ethereum_block_height.low >>> 0, object.ethereum_block_height.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a LastObservedEthereumBlockHeight message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @static
             * @param {gravity.v1.LastObservedEthereumBlockHeight} message LastObservedEthereumBlockHeight
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LastObservedEthereumBlockHeight.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.cosmos_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.cosmos_block_height = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.ethereum_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ethereum_block_height = options.longs === String ? "0" : 0;
                }
                if (message.cosmos_block_height != null && message.hasOwnProperty("cosmos_block_height"))
                    if (typeof message.cosmos_block_height === "number")
                        object.cosmos_block_height = options.longs === String ? String(message.cosmos_block_height) : message.cosmos_block_height;
                    else
                        object.cosmos_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.cosmos_block_height) : options.longs === Number ? new $util.LongBits(message.cosmos_block_height.low >>> 0, message.cosmos_block_height.high >>> 0).toNumber(true) : message.cosmos_block_height;
                if (message.ethereum_block_height != null && message.hasOwnProperty("ethereum_block_height"))
                    if (typeof message.ethereum_block_height === "number")
                        object.ethereum_block_height = options.longs === String ? String(message.ethereum_block_height) : message.ethereum_block_height;
                    else
                        object.ethereum_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.ethereum_block_height) : options.longs === Number ? new $util.LongBits(message.ethereum_block_height.low >>> 0, message.ethereum_block_height.high >>> 0).toNumber(true) : message.ethereum_block_height;
                return object;
            };

            /**
             * Converts this LastObservedEthereumBlockHeight to JSON.
             * @function toJSON
             * @memberof gravity.v1.LastObservedEthereumBlockHeight
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LastObservedEthereumBlockHeight.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LastObservedEthereumBlockHeight;
        })();

        v1.ERC20ToDenom = (function() {

            /**
             * Properties of a ERC20ToDenom.
             * @memberof gravity.v1
             * @interface IERC20ToDenom
             * @property {string|null} [erc20] ERC20ToDenom erc20
             * @property {string|null} [denom] ERC20ToDenom denom
             */

            /**
             * Constructs a new ERC20ToDenom.
             * @memberof gravity.v1
             * @classdesc Represents a ERC20ToDenom.
             * @implements IERC20ToDenom
             * @constructor
             * @param {gravity.v1.IERC20ToDenom=} [properties] Properties to set
             */
            function ERC20ToDenom(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ERC20ToDenom erc20.
             * @member {string} erc20
             * @memberof gravity.v1.ERC20ToDenom
             * @instance
             */
            ERC20ToDenom.prototype.erc20 = "";

            /**
             * ERC20ToDenom denom.
             * @member {string} denom
             * @memberof gravity.v1.ERC20ToDenom
             * @instance
             */
            ERC20ToDenom.prototype.denom = "";

            /**
             * Encodes the specified ERC20ToDenom message. Does not implicitly {@link gravity.v1.ERC20ToDenom.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.ERC20ToDenom
             * @static
             * @param {gravity.v1.IERC20ToDenom} message ERC20ToDenom message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ERC20ToDenom.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.erc20 != null && Object.hasOwnProperty.call(message, "erc20"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.erc20);
                if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                return writer;
            };

            /**
             * Encodes the specified ERC20ToDenom message, length delimited. Does not implicitly {@link gravity.v1.ERC20ToDenom.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.ERC20ToDenom
             * @static
             * @param {gravity.v1.IERC20ToDenom} message ERC20ToDenom message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ERC20ToDenom.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ERC20ToDenom message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.ERC20ToDenom
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.ERC20ToDenom} ERC20ToDenom
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ERC20ToDenom.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.ERC20ToDenom();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.erc20 = reader.string();
                        break;
                    case 2:
                        message.denom = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ERC20ToDenom message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.ERC20ToDenom
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.ERC20ToDenom} ERC20ToDenom
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ERC20ToDenom.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ERC20ToDenom message.
             * @function verify
             * @memberof gravity.v1.ERC20ToDenom
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ERC20ToDenom.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.erc20 != null && message.hasOwnProperty("erc20"))
                    if (!$util.isString(message.erc20))
                        return "erc20: string expected";
                if (message.denom != null && message.hasOwnProperty("denom"))
                    if (!$util.isString(message.denom))
                        return "denom: string expected";
                return null;
            };

            /**
             * Creates a ERC20ToDenom message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.ERC20ToDenom
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.ERC20ToDenom} ERC20ToDenom
             */
            ERC20ToDenom.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.ERC20ToDenom)
                    return object;
                let message = new $root.gravity.v1.ERC20ToDenom();
                if (object.erc20 != null)
                    message.erc20 = String(object.erc20);
                if (object.denom != null)
                    message.denom = String(object.denom);
                return message;
            };

            /**
             * Creates a plain object from a ERC20ToDenom message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.ERC20ToDenom
             * @static
             * @param {gravity.v1.ERC20ToDenom} message ERC20ToDenom
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ERC20ToDenom.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.erc20 = "";
                    object.denom = "";
                }
                if (message.erc20 != null && message.hasOwnProperty("erc20"))
                    object.erc20 = message.erc20;
                if (message.denom != null && message.hasOwnProperty("denom"))
                    object.denom = message.denom;
                return object;
            };

            /**
             * Converts this ERC20ToDenom to JSON.
             * @function toJSON
             * @memberof gravity.v1.ERC20ToDenom
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ERC20ToDenom.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ERC20ToDenom;
        })();

        v1.UnhaltBridgeProposal = (function() {

            /**
             * Properties of an UnhaltBridgeProposal.
             * @memberof gravity.v1
             * @interface IUnhaltBridgeProposal
             * @property {string|null} [title] UnhaltBridgeProposal title
             * @property {string|null} [description] UnhaltBridgeProposal description
             * @property {number|null} [target_nonce] UnhaltBridgeProposal target_nonce
             */

            /**
             * Constructs a new UnhaltBridgeProposal.
             * @memberof gravity.v1
             * @classdesc Represents an UnhaltBridgeProposal.
             * @implements IUnhaltBridgeProposal
             * @constructor
             * @param {gravity.v1.IUnhaltBridgeProposal=} [properties] Properties to set
             */
            function UnhaltBridgeProposal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UnhaltBridgeProposal title.
             * @member {string} title
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @instance
             */
            UnhaltBridgeProposal.prototype.title = "";

            /**
             * UnhaltBridgeProposal description.
             * @member {string} description
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @instance
             */
            UnhaltBridgeProposal.prototype.description = "";

            /**
             * UnhaltBridgeProposal target_nonce.
             * @member {number} target_nonce
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @instance
             */
            UnhaltBridgeProposal.prototype.target_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified UnhaltBridgeProposal message. Does not implicitly {@link gravity.v1.UnhaltBridgeProposal.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @static
             * @param {gravity.v1.IUnhaltBridgeProposal} message UnhaltBridgeProposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UnhaltBridgeProposal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                if (message.target_nonce != null && Object.hasOwnProperty.call(message, "target_nonce"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.target_nonce);
                return writer;
            };

            /**
             * Encodes the specified UnhaltBridgeProposal message, length delimited. Does not implicitly {@link gravity.v1.UnhaltBridgeProposal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @static
             * @param {gravity.v1.IUnhaltBridgeProposal} message UnhaltBridgeProposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UnhaltBridgeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UnhaltBridgeProposal message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.UnhaltBridgeProposal} UnhaltBridgeProposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UnhaltBridgeProposal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.UnhaltBridgeProposal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.title = reader.string();
                        break;
                    case 2:
                        message.description = reader.string();
                        break;
                    case 4:
                        message.target_nonce = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UnhaltBridgeProposal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.UnhaltBridgeProposal} UnhaltBridgeProposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UnhaltBridgeProposal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UnhaltBridgeProposal message.
             * @function verify
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UnhaltBridgeProposal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                if (message.target_nonce != null && message.hasOwnProperty("target_nonce"))
                    if (!$util.isInteger(message.target_nonce) && !(message.target_nonce && $util.isInteger(message.target_nonce.low) && $util.isInteger(message.target_nonce.high)))
                        return "target_nonce: integer|Long expected";
                return null;
            };

            /**
             * Creates an UnhaltBridgeProposal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.UnhaltBridgeProposal} UnhaltBridgeProposal
             */
            UnhaltBridgeProposal.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.UnhaltBridgeProposal)
                    return object;
                let message = new $root.gravity.v1.UnhaltBridgeProposal();
                if (object.title != null)
                    message.title = String(object.title);
                if (object.description != null)
                    message.description = String(object.description);
                if (object.target_nonce != null)
                    if ($util.Long)
                        (message.target_nonce = $util.Long.fromValue(object.target_nonce)).unsigned = true;
                    else if (typeof object.target_nonce === "string")
                        message.target_nonce = parseInt(object.target_nonce, 10);
                    else if (typeof object.target_nonce === "number")
                        message.target_nonce = object.target_nonce;
                    else if (typeof object.target_nonce === "object")
                        message.target_nonce = new $util.LongBits(object.target_nonce.low >>> 0, object.target_nonce.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from an UnhaltBridgeProposal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @static
             * @param {gravity.v1.UnhaltBridgeProposal} message UnhaltBridgeProposal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UnhaltBridgeProposal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.title = "";
                    object.description = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.target_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.target_nonce = options.longs === String ? "0" : 0;
                }
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                if (message.target_nonce != null && message.hasOwnProperty("target_nonce"))
                    if (typeof message.target_nonce === "number")
                        object.target_nonce = options.longs === String ? String(message.target_nonce) : message.target_nonce;
                    else
                        object.target_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.target_nonce) : options.longs === Number ? new $util.LongBits(message.target_nonce.low >>> 0, message.target_nonce.high >>> 0).toNumber(true) : message.target_nonce;
                return object;
            };

            /**
             * Converts this UnhaltBridgeProposal to JSON.
             * @function toJSON
             * @memberof gravity.v1.UnhaltBridgeProposal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UnhaltBridgeProposal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UnhaltBridgeProposal;
        })();

        v1.AirdropProposal = (function() {

            /**
             * Properties of an AirdropProposal.
             * @memberof gravity.v1
             * @interface IAirdropProposal
             * @property {string|null} [title] AirdropProposal title
             * @property {string|null} [description] AirdropProposal description
             * @property {string|null} [denom] AirdropProposal denom
             * @property {Uint8Array|null} [recipients] AirdropProposal recipients
             * @property {Array.<number>|null} [amounts] AirdropProposal amounts
             */

            /**
             * Constructs a new AirdropProposal.
             * @memberof gravity.v1
             * @classdesc Represents an AirdropProposal.
             * @implements IAirdropProposal
             * @constructor
             * @param {gravity.v1.IAirdropProposal=} [properties] Properties to set
             */
            function AirdropProposal(properties) {
                this.amounts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AirdropProposal title.
             * @member {string} title
             * @memberof gravity.v1.AirdropProposal
             * @instance
             */
            AirdropProposal.prototype.title = "";

            /**
             * AirdropProposal description.
             * @member {string} description
             * @memberof gravity.v1.AirdropProposal
             * @instance
             */
            AirdropProposal.prototype.description = "";

            /**
             * AirdropProposal denom.
             * @member {string} denom
             * @memberof gravity.v1.AirdropProposal
             * @instance
             */
            AirdropProposal.prototype.denom = "";

            /**
             * AirdropProposal recipients.
             * @member {Uint8Array} recipients
             * @memberof gravity.v1.AirdropProposal
             * @instance
             */
            AirdropProposal.prototype.recipients = $util.newBuffer([]);

            /**
             * AirdropProposal amounts.
             * @member {Array.<number>} amounts
             * @memberof gravity.v1.AirdropProposal
             * @instance
             */
            AirdropProposal.prototype.amounts = $util.emptyArray;

            /**
             * Encodes the specified AirdropProposal message. Does not implicitly {@link gravity.v1.AirdropProposal.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.AirdropProposal
             * @static
             * @param {gravity.v1.IAirdropProposal} message AirdropProposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AirdropProposal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denom);
                if (message.recipients != null && Object.hasOwnProperty.call(message, "recipients"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.recipients);
                if (message.amounts != null && message.amounts.length) {
                    writer.uint32(/* id 5, wireType 2 =*/42).fork();
                    for (let i = 0; i < message.amounts.length; ++i)
                        writer.uint64(message.amounts[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified AirdropProposal message, length delimited. Does not implicitly {@link gravity.v1.AirdropProposal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.AirdropProposal
             * @static
             * @param {gravity.v1.IAirdropProposal} message AirdropProposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AirdropProposal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AirdropProposal message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.AirdropProposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.AirdropProposal} AirdropProposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AirdropProposal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.AirdropProposal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.title = reader.string();
                        break;
                    case 2:
                        message.description = reader.string();
                        break;
                    case 3:
                        message.denom = reader.string();
                        break;
                    case 4:
                        message.recipients = reader.bytes();
                        break;
                    case 5:
                        if (!(message.amounts && message.amounts.length))
                            message.amounts = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.amounts.push(reader.uint64());
                        } else
                            message.amounts.push(reader.uint64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AirdropProposal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.AirdropProposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.AirdropProposal} AirdropProposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AirdropProposal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AirdropProposal message.
             * @function verify
             * @memberof gravity.v1.AirdropProposal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AirdropProposal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                if (message.denom != null && message.hasOwnProperty("denom"))
                    if (!$util.isString(message.denom))
                        return "denom: string expected";
                if (message.recipients != null && message.hasOwnProperty("recipients"))
                    if (!(message.recipients && typeof message.recipients.length === "number" || $util.isString(message.recipients)))
                        return "recipients: buffer expected";
                if (message.amounts != null && message.hasOwnProperty("amounts")) {
                    if (!Array.isArray(message.amounts))
                        return "amounts: array expected";
                    for (let i = 0; i < message.amounts.length; ++i)
                        if (!$util.isInteger(message.amounts[i]) && !(message.amounts[i] && $util.isInteger(message.amounts[i].low) && $util.isInteger(message.amounts[i].high)))
                            return "amounts: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates an AirdropProposal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.AirdropProposal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.AirdropProposal} AirdropProposal
             */
            AirdropProposal.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.AirdropProposal)
                    return object;
                let message = new $root.gravity.v1.AirdropProposal();
                if (object.title != null)
                    message.title = String(object.title);
                if (object.description != null)
                    message.description = String(object.description);
                if (object.denom != null)
                    message.denom = String(object.denom);
                if (object.recipients != null)
                    if (typeof object.recipients === "string")
                        $util.base64.decode(object.recipients, message.recipients = $util.newBuffer($util.base64.length(object.recipients)), 0);
                    else if (object.recipients.length)
                        message.recipients = object.recipients;
                if (object.amounts) {
                    if (!Array.isArray(object.amounts))
                        throw TypeError(".gravity.v1.AirdropProposal.amounts: array expected");
                    message.amounts = [];
                    for (let i = 0; i < object.amounts.length; ++i)
                        if ($util.Long)
                            (message.amounts[i] = $util.Long.fromValue(object.amounts[i])).unsigned = true;
                        else if (typeof object.amounts[i] === "string")
                            message.amounts[i] = parseInt(object.amounts[i], 10);
                        else if (typeof object.amounts[i] === "number")
                            message.amounts[i] = object.amounts[i];
                        else if (typeof object.amounts[i] === "object")
                            message.amounts[i] = new $util.LongBits(object.amounts[i].low >>> 0, object.amounts[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            /**
             * Creates a plain object from an AirdropProposal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.AirdropProposal
             * @static
             * @param {gravity.v1.AirdropProposal} message AirdropProposal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AirdropProposal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.amounts = [];
                if (options.defaults) {
                    object.title = "";
                    object.description = "";
                    object.denom = "";
                    if (options.bytes === String)
                        object.recipients = "";
                    else {
                        object.recipients = [];
                        if (options.bytes !== Array)
                            object.recipients = $util.newBuffer(object.recipients);
                    }
                }
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                if (message.denom != null && message.hasOwnProperty("denom"))
                    object.denom = message.denom;
                if (message.recipients != null && message.hasOwnProperty("recipients"))
                    object.recipients = options.bytes === String ? $util.base64.encode(message.recipients, 0, message.recipients.length) : options.bytes === Array ? Array.prototype.slice.call(message.recipients) : message.recipients;
                if (message.amounts && message.amounts.length) {
                    object.amounts = [];
                    for (let j = 0; j < message.amounts.length; ++j)
                        if (typeof message.amounts[j] === "number")
                            object.amounts[j] = options.longs === String ? String(message.amounts[j]) : message.amounts[j];
                        else
                            object.amounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.amounts[j]) : options.longs === Number ? new $util.LongBits(message.amounts[j].low >>> 0, message.amounts[j].high >>> 0).toNumber(true) : message.amounts[j];
                }
                return object;
            };

            /**
             * Converts this AirdropProposal to JSON.
             * @function toJSON
             * @memberof gravity.v1.AirdropProposal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AirdropProposal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AirdropProposal;
        })();

        v1.IBCMetadataProposal = (function() {

            /**
             * Properties of a IBCMetadataProposal.
             * @memberof gravity.v1
             * @interface IIBCMetadataProposal
             * @property {string|null} [title] IBCMetadataProposal title
             * @property {string|null} [description] IBCMetadataProposal description
             * @property {cosmos.bank.v1beta1.IMetadata|null} [metadata] IBCMetadataProposal metadata
             * @property {string|null} [ibc_denom] IBCMetadataProposal ibc_denom
             */

            /**
             * Constructs a new IBCMetadataProposal.
             * @memberof gravity.v1
             * @classdesc Represents a IBCMetadataProposal.
             * @implements IIBCMetadataProposal
             * @constructor
             * @param {gravity.v1.IIBCMetadataProposal=} [properties] Properties to set
             */
            function IBCMetadataProposal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * IBCMetadataProposal title.
             * @member {string} title
             * @memberof gravity.v1.IBCMetadataProposal
             * @instance
             */
            IBCMetadataProposal.prototype.title = "";

            /**
             * IBCMetadataProposal description.
             * @member {string} description
             * @memberof gravity.v1.IBCMetadataProposal
             * @instance
             */
            IBCMetadataProposal.prototype.description = "";

            /**
             * IBCMetadataProposal metadata.
             * @member {cosmos.bank.v1beta1.IMetadata|null|undefined} metadata
             * @memberof gravity.v1.IBCMetadataProposal
             * @instance
             */
            IBCMetadataProposal.prototype.metadata = null;

            /**
             * IBCMetadataProposal ibc_denom.
             * @member {string} ibc_denom
             * @memberof gravity.v1.IBCMetadataProposal
             * @instance
             */
            IBCMetadataProposal.prototype.ibc_denom = "";

            /**
             * Encodes the specified IBCMetadataProposal message. Does not implicitly {@link gravity.v1.IBCMetadataProposal.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.IBCMetadataProposal
             * @static
             * @param {gravity.v1.IIBCMetadataProposal} message IBCMetadataProposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IBCMetadataProposal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    $root.cosmos.bank.v1beta1.Metadata.encode(message.metadata, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.ibc_denom != null && Object.hasOwnProperty.call(message, "ibc_denom"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.ibc_denom);
                return writer;
            };

            /**
             * Encodes the specified IBCMetadataProposal message, length delimited. Does not implicitly {@link gravity.v1.IBCMetadataProposal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.IBCMetadataProposal
             * @static
             * @param {gravity.v1.IIBCMetadataProposal} message IBCMetadataProposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IBCMetadataProposal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a IBCMetadataProposal message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.IBCMetadataProposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.IBCMetadataProposal} IBCMetadataProposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IBCMetadataProposal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.IBCMetadataProposal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.title = reader.string();
                        break;
                    case 2:
                        message.description = reader.string();
                        break;
                    case 3:
                        message.metadata = $root.cosmos.bank.v1beta1.Metadata.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.ibc_denom = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a IBCMetadataProposal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.IBCMetadataProposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.IBCMetadataProposal} IBCMetadataProposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IBCMetadataProposal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a IBCMetadataProposal message.
             * @function verify
             * @memberof gravity.v1.IBCMetadataProposal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            IBCMetadataProposal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                if (message.metadata != null && message.hasOwnProperty("metadata")) {
                    let error = $root.cosmos.bank.v1beta1.Metadata.verify(message.metadata);
                    if (error)
                        return "metadata." + error;
                }
                if (message.ibc_denom != null && message.hasOwnProperty("ibc_denom"))
                    if (!$util.isString(message.ibc_denom))
                        return "ibc_denom: string expected";
                return null;
            };

            /**
             * Creates a IBCMetadataProposal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.IBCMetadataProposal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.IBCMetadataProposal} IBCMetadataProposal
             */
            IBCMetadataProposal.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.IBCMetadataProposal)
                    return object;
                let message = new $root.gravity.v1.IBCMetadataProposal();
                if (object.title != null)
                    message.title = String(object.title);
                if (object.description != null)
                    message.description = String(object.description);
                if (object.metadata != null) {
                    if (typeof object.metadata !== "object")
                        throw TypeError(".gravity.v1.IBCMetadataProposal.metadata: object expected");
                    message.metadata = $root.cosmos.bank.v1beta1.Metadata.fromObject(object.metadata);
                }
                if (object.ibc_denom != null)
                    message.ibc_denom = String(object.ibc_denom);
                return message;
            };

            /**
             * Creates a plain object from a IBCMetadataProposal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.IBCMetadataProposal
             * @static
             * @param {gravity.v1.IBCMetadataProposal} message IBCMetadataProposal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            IBCMetadataProposal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.title = "";
                    object.description = "";
                    object.metadata = null;
                    object.ibc_denom = "";
                }
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = $root.cosmos.bank.v1beta1.Metadata.toObject(message.metadata, options);
                if (message.ibc_denom != null && message.hasOwnProperty("ibc_denom"))
                    object.ibc_denom = message.ibc_denom;
                return object;
            };

            /**
             * Converts this IBCMetadataProposal to JSON.
             * @function toJSON
             * @memberof gravity.v1.IBCMetadataProposal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            IBCMetadataProposal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return IBCMetadataProposal;
        })();

        v1.PendingIbcAutoForward = (function() {

            /**
             * Properties of a PendingIbcAutoForward.
             * @memberof gravity.v1
             * @interface IPendingIbcAutoForward
             * @property {string|null} [foreign_receiver] PendingIbcAutoForward foreign_receiver
             * @property {cosmos.base.v1beta1.ICoin|null} [token] PendingIbcAutoForward token
             * @property {string|null} [ibc_channel] PendingIbcAutoForward ibc_channel
             * @property {number|null} [event_nonce] PendingIbcAutoForward event_nonce
             */

            /**
             * Constructs a new PendingIbcAutoForward.
             * @memberof gravity.v1
             * @classdesc Represents a PendingIbcAutoForward.
             * @implements IPendingIbcAutoForward
             * @constructor
             * @param {gravity.v1.IPendingIbcAutoForward=} [properties] Properties to set
             */
            function PendingIbcAutoForward(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PendingIbcAutoForward foreign_receiver.
             * @member {string} foreign_receiver
             * @memberof gravity.v1.PendingIbcAutoForward
             * @instance
             */
            PendingIbcAutoForward.prototype.foreign_receiver = "";

            /**
             * PendingIbcAutoForward token.
             * @member {cosmos.base.v1beta1.ICoin|null|undefined} token
             * @memberof gravity.v1.PendingIbcAutoForward
             * @instance
             */
            PendingIbcAutoForward.prototype.token = null;

            /**
             * PendingIbcAutoForward ibc_channel.
             * @member {string} ibc_channel
             * @memberof gravity.v1.PendingIbcAutoForward
             * @instance
             */
            PendingIbcAutoForward.prototype.ibc_channel = "";

            /**
             * PendingIbcAutoForward event_nonce.
             * @member {number} event_nonce
             * @memberof gravity.v1.PendingIbcAutoForward
             * @instance
             */
            PendingIbcAutoForward.prototype.event_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified PendingIbcAutoForward message. Does not implicitly {@link gravity.v1.PendingIbcAutoForward.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.PendingIbcAutoForward
             * @static
             * @param {gravity.v1.IPendingIbcAutoForward} message PendingIbcAutoForward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PendingIbcAutoForward.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.foreign_receiver != null && Object.hasOwnProperty.call(message, "foreign_receiver"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.foreign_receiver);
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    $root.cosmos.base.v1beta1.Coin.encode(message.token, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.ibc_channel != null && Object.hasOwnProperty.call(message, "ibc_channel"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.ibc_channel);
                if (message.event_nonce != null && Object.hasOwnProperty.call(message, "event_nonce"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.event_nonce);
                return writer;
            };

            /**
             * Encodes the specified PendingIbcAutoForward message, length delimited. Does not implicitly {@link gravity.v1.PendingIbcAutoForward.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.PendingIbcAutoForward
             * @static
             * @param {gravity.v1.IPendingIbcAutoForward} message PendingIbcAutoForward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PendingIbcAutoForward.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PendingIbcAutoForward message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.PendingIbcAutoForward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.PendingIbcAutoForward} PendingIbcAutoForward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PendingIbcAutoForward.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.PendingIbcAutoForward();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.foreign_receiver = reader.string();
                        break;
                    case 2:
                        message.token = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.ibc_channel = reader.string();
                        break;
                    case 4:
                        message.event_nonce = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PendingIbcAutoForward message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.PendingIbcAutoForward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.PendingIbcAutoForward} PendingIbcAutoForward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PendingIbcAutoForward.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PendingIbcAutoForward message.
             * @function verify
             * @memberof gravity.v1.PendingIbcAutoForward
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PendingIbcAutoForward.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.foreign_receiver != null && message.hasOwnProperty("foreign_receiver"))
                    if (!$util.isString(message.foreign_receiver))
                        return "foreign_receiver: string expected";
                if (message.token != null && message.hasOwnProperty("token")) {
                    let error = $root.cosmos.base.v1beta1.Coin.verify(message.token);
                    if (error)
                        return "token." + error;
                }
                if (message.ibc_channel != null && message.hasOwnProperty("ibc_channel"))
                    if (!$util.isString(message.ibc_channel))
                        return "ibc_channel: string expected";
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (!$util.isInteger(message.event_nonce) && !(message.event_nonce && $util.isInteger(message.event_nonce.low) && $util.isInteger(message.event_nonce.high)))
                        return "event_nonce: integer|Long expected";
                return null;
            };

            /**
             * Creates a PendingIbcAutoForward message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.PendingIbcAutoForward
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.PendingIbcAutoForward} PendingIbcAutoForward
             */
            PendingIbcAutoForward.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.PendingIbcAutoForward)
                    return object;
                let message = new $root.gravity.v1.PendingIbcAutoForward();
                if (object.foreign_receiver != null)
                    message.foreign_receiver = String(object.foreign_receiver);
                if (object.token != null) {
                    if (typeof object.token !== "object")
                        throw TypeError(".gravity.v1.PendingIbcAutoForward.token: object expected");
                    message.token = $root.cosmos.base.v1beta1.Coin.fromObject(object.token);
                }
                if (object.ibc_channel != null)
                    message.ibc_channel = String(object.ibc_channel);
                if (object.event_nonce != null)
                    if ($util.Long)
                        (message.event_nonce = $util.Long.fromValue(object.event_nonce)).unsigned = true;
                    else if (typeof object.event_nonce === "string")
                        message.event_nonce = parseInt(object.event_nonce, 10);
                    else if (typeof object.event_nonce === "number")
                        message.event_nonce = object.event_nonce;
                    else if (typeof object.event_nonce === "object")
                        message.event_nonce = new $util.LongBits(object.event_nonce.low >>> 0, object.event_nonce.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a PendingIbcAutoForward message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.PendingIbcAutoForward
             * @static
             * @param {gravity.v1.PendingIbcAutoForward} message PendingIbcAutoForward
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PendingIbcAutoForward.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.foreign_receiver = "";
                    object.token = null;
                    object.ibc_channel = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.event_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.event_nonce = options.longs === String ? "0" : 0;
                }
                if (message.foreign_receiver != null && message.hasOwnProperty("foreign_receiver"))
                    object.foreign_receiver = message.foreign_receiver;
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = $root.cosmos.base.v1beta1.Coin.toObject(message.token, options);
                if (message.ibc_channel != null && message.hasOwnProperty("ibc_channel"))
                    object.ibc_channel = message.ibc_channel;
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (typeof message.event_nonce === "number")
                        object.event_nonce = options.longs === String ? String(message.event_nonce) : message.event_nonce;
                    else
                        object.event_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.event_nonce) : options.longs === Number ? new $util.LongBits(message.event_nonce.low >>> 0, message.event_nonce.high >>> 0).toNumber(true) : message.event_nonce;
                return object;
            };

            /**
             * Converts this PendingIbcAutoForward to JSON.
             * @function toJSON
             * @memberof gravity.v1.PendingIbcAutoForward
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PendingIbcAutoForward.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PendingIbcAutoForward;
        })();

        v1.Query = (function() {

            /**
             * Constructs a new Query service.
             * @memberof gravity.v1
             * @classdesc Represents a Query
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function Query(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

            /**
             * Callback as used by {@link gravity.v1.Query#params}.
             * @memberof gravity.v1.Query
             * @typedef ParamsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryParamsResponse} [response] QueryParamsResponse
             */

            /**
             * Calls Params.
             * @function params
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
             * @param {gravity.v1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.params = function params(request, callback) {
                return this.rpcCall(params, $root.gravity.v1.QueryParamsRequest, $root.gravity.v1.QueryParamsResponse, request, callback);
            }, "name", { value: "Params" });

            /**
             * Calls Params.
             * @function params
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
             * @returns {Promise<gravity.v1.QueryParamsResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#currentValset}.
             * @memberof gravity.v1.Query
             * @typedef CurrentValsetCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryCurrentValsetResponse} [response] QueryCurrentValsetResponse
             */

            /**
             * Calls CurrentValset.
             * @function currentValset
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryCurrentValsetRequest} request QueryCurrentValsetRequest message or plain object
             * @param {gravity.v1.Query.CurrentValsetCallback} callback Node-style callback called with the error, if any, and QueryCurrentValsetResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.currentValset = function currentValset(request, callback) {
                return this.rpcCall(currentValset, $root.gravity.v1.QueryCurrentValsetRequest, $root.gravity.v1.QueryCurrentValsetResponse, request, callback);
            }, "name", { value: "CurrentValset" });

            /**
             * Calls CurrentValset.
             * @function currentValset
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryCurrentValsetRequest} request QueryCurrentValsetRequest message or plain object
             * @returns {Promise<gravity.v1.QueryCurrentValsetResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#valsetRequest}.
             * @memberof gravity.v1.Query
             * @typedef ValsetRequestCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryValsetRequestResponse} [response] QueryValsetRequestResponse
             */

            /**
             * Calls ValsetRequest.
             * @function valsetRequest
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryValsetRequestRequest} request QueryValsetRequestRequest message or plain object
             * @param {gravity.v1.Query.ValsetRequestCallback} callback Node-style callback called with the error, if any, and QueryValsetRequestResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.valsetRequest = function valsetRequest(request, callback) {
                return this.rpcCall(valsetRequest, $root.gravity.v1.QueryValsetRequestRequest, $root.gravity.v1.QueryValsetRequestResponse, request, callback);
            }, "name", { value: "ValsetRequest" });

            /**
             * Calls ValsetRequest.
             * @function valsetRequest
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryValsetRequestRequest} request QueryValsetRequestRequest message or plain object
             * @returns {Promise<gravity.v1.QueryValsetRequestResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#valsetConfirm}.
             * @memberof gravity.v1.Query
             * @typedef ValsetConfirmCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryValsetConfirmResponse} [response] QueryValsetConfirmResponse
             */

            /**
             * Calls ValsetConfirm.
             * @function valsetConfirm
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryValsetConfirmRequest} request QueryValsetConfirmRequest message or plain object
             * @param {gravity.v1.Query.ValsetConfirmCallback} callback Node-style callback called with the error, if any, and QueryValsetConfirmResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.valsetConfirm = function valsetConfirm(request, callback) {
                return this.rpcCall(valsetConfirm, $root.gravity.v1.QueryValsetConfirmRequest, $root.gravity.v1.QueryValsetConfirmResponse, request, callback);
            }, "name", { value: "ValsetConfirm" });

            /**
             * Calls ValsetConfirm.
             * @function valsetConfirm
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryValsetConfirmRequest} request QueryValsetConfirmRequest message or plain object
             * @returns {Promise<gravity.v1.QueryValsetConfirmResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#valsetConfirmsByNonce}.
             * @memberof gravity.v1.Query
             * @typedef ValsetConfirmsByNonceCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryValsetConfirmsByNonceResponse} [response] QueryValsetConfirmsByNonceResponse
             */

            /**
             * Calls ValsetConfirmsByNonce.
             * @function valsetConfirmsByNonce
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryValsetConfirmsByNonceRequest} request QueryValsetConfirmsByNonceRequest message or plain object
             * @param {gravity.v1.Query.ValsetConfirmsByNonceCallback} callback Node-style callback called with the error, if any, and QueryValsetConfirmsByNonceResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.valsetConfirmsByNonce = function valsetConfirmsByNonce(request, callback) {
                return this.rpcCall(valsetConfirmsByNonce, $root.gravity.v1.QueryValsetConfirmsByNonceRequest, $root.gravity.v1.QueryValsetConfirmsByNonceResponse, request, callback);
            }, "name", { value: "ValsetConfirmsByNonce" });

            /**
             * Calls ValsetConfirmsByNonce.
             * @function valsetConfirmsByNonce
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryValsetConfirmsByNonceRequest} request QueryValsetConfirmsByNonceRequest message or plain object
             * @returns {Promise<gravity.v1.QueryValsetConfirmsByNonceResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#lastValsetRequests}.
             * @memberof gravity.v1.Query
             * @typedef LastValsetRequestsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryLastValsetRequestsResponse} [response] QueryLastValsetRequestsResponse
             */

            /**
             * Calls LastValsetRequests.
             * @function lastValsetRequests
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastValsetRequestsRequest} request QueryLastValsetRequestsRequest message or plain object
             * @param {gravity.v1.Query.LastValsetRequestsCallback} callback Node-style callback called with the error, if any, and QueryLastValsetRequestsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.lastValsetRequests = function lastValsetRequests(request, callback) {
                return this.rpcCall(lastValsetRequests, $root.gravity.v1.QueryLastValsetRequestsRequest, $root.gravity.v1.QueryLastValsetRequestsResponse, request, callback);
            }, "name", { value: "LastValsetRequests" });

            /**
             * Calls LastValsetRequests.
             * @function lastValsetRequests
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastValsetRequestsRequest} request QueryLastValsetRequestsRequest message or plain object
             * @returns {Promise<gravity.v1.QueryLastValsetRequestsResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#lastPendingValsetRequestByAddr}.
             * @memberof gravity.v1.Query
             * @typedef LastPendingValsetRequestByAddrCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryLastPendingValsetRequestByAddrResponse} [response] QueryLastPendingValsetRequestByAddrResponse
             */

            /**
             * Calls LastPendingValsetRequestByAddr.
             * @function lastPendingValsetRequestByAddr
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastPendingValsetRequestByAddrRequest} request QueryLastPendingValsetRequestByAddrRequest message or plain object
             * @param {gravity.v1.Query.LastPendingValsetRequestByAddrCallback} callback Node-style callback called with the error, if any, and QueryLastPendingValsetRequestByAddrResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.lastPendingValsetRequestByAddr = function lastPendingValsetRequestByAddr(request, callback) {
                return this.rpcCall(lastPendingValsetRequestByAddr, $root.gravity.v1.QueryLastPendingValsetRequestByAddrRequest, $root.gravity.v1.QueryLastPendingValsetRequestByAddrResponse, request, callback);
            }, "name", { value: "LastPendingValsetRequestByAddr" });

            /**
             * Calls LastPendingValsetRequestByAddr.
             * @function lastPendingValsetRequestByAddr
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastPendingValsetRequestByAddrRequest} request QueryLastPendingValsetRequestByAddrRequest message or plain object
             * @returns {Promise<gravity.v1.QueryLastPendingValsetRequestByAddrResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#lastPendingBatchRequestByAddr}.
             * @memberof gravity.v1.Query
             * @typedef LastPendingBatchRequestByAddrCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryLastPendingBatchRequestByAddrResponse} [response] QueryLastPendingBatchRequestByAddrResponse
             */

            /**
             * Calls LastPendingBatchRequestByAddr.
             * @function lastPendingBatchRequestByAddr
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastPendingBatchRequestByAddrRequest} request QueryLastPendingBatchRequestByAddrRequest message or plain object
             * @param {gravity.v1.Query.LastPendingBatchRequestByAddrCallback} callback Node-style callback called with the error, if any, and QueryLastPendingBatchRequestByAddrResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.lastPendingBatchRequestByAddr = function lastPendingBatchRequestByAddr(request, callback) {
                return this.rpcCall(lastPendingBatchRequestByAddr, $root.gravity.v1.QueryLastPendingBatchRequestByAddrRequest, $root.gravity.v1.QueryLastPendingBatchRequestByAddrResponse, request, callback);
            }, "name", { value: "LastPendingBatchRequestByAddr" });

            /**
             * Calls LastPendingBatchRequestByAddr.
             * @function lastPendingBatchRequestByAddr
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastPendingBatchRequestByAddrRequest} request QueryLastPendingBatchRequestByAddrRequest message or plain object
             * @returns {Promise<gravity.v1.QueryLastPendingBatchRequestByAddrResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#lastPendingLogicCallByAddr}.
             * @memberof gravity.v1.Query
             * @typedef LastPendingLogicCallByAddrCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryLastPendingLogicCallByAddrResponse} [response] QueryLastPendingLogicCallByAddrResponse
             */

            /**
             * Calls LastPendingLogicCallByAddr.
             * @function lastPendingLogicCallByAddr
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastPendingLogicCallByAddrRequest} request QueryLastPendingLogicCallByAddrRequest message or plain object
             * @param {gravity.v1.Query.LastPendingLogicCallByAddrCallback} callback Node-style callback called with the error, if any, and QueryLastPendingLogicCallByAddrResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.lastPendingLogicCallByAddr = function lastPendingLogicCallByAddr(request, callback) {
                return this.rpcCall(lastPendingLogicCallByAddr, $root.gravity.v1.QueryLastPendingLogicCallByAddrRequest, $root.gravity.v1.QueryLastPendingLogicCallByAddrResponse, request, callback);
            }, "name", { value: "LastPendingLogicCallByAddr" });

            /**
             * Calls LastPendingLogicCallByAddr.
             * @function lastPendingLogicCallByAddr
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastPendingLogicCallByAddrRequest} request QueryLastPendingLogicCallByAddrRequest message or plain object
             * @returns {Promise<gravity.v1.QueryLastPendingLogicCallByAddrResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#lastEventNonceByAddr}.
             * @memberof gravity.v1.Query
             * @typedef LastEventNonceByAddrCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryLastEventNonceByAddrResponse} [response] QueryLastEventNonceByAddrResponse
             */

            /**
             * Calls LastEventNonceByAddr.
             * @function lastEventNonceByAddr
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastEventNonceByAddrRequest} request QueryLastEventNonceByAddrRequest message or plain object
             * @param {gravity.v1.Query.LastEventNonceByAddrCallback} callback Node-style callback called with the error, if any, and QueryLastEventNonceByAddrResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.lastEventNonceByAddr = function lastEventNonceByAddr(request, callback) {
                return this.rpcCall(lastEventNonceByAddr, $root.gravity.v1.QueryLastEventNonceByAddrRequest, $root.gravity.v1.QueryLastEventNonceByAddrResponse, request, callback);
            }, "name", { value: "LastEventNonceByAddr" });

            /**
             * Calls LastEventNonceByAddr.
             * @function lastEventNonceByAddr
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastEventNonceByAddrRequest} request QueryLastEventNonceByAddrRequest message or plain object
             * @returns {Promise<gravity.v1.QueryLastEventNonceByAddrResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#batchFees}.
             * @memberof gravity.v1.Query
             * @typedef BatchFeesCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryBatchFeeResponse} [response] QueryBatchFeeResponse
             */

            /**
             * Calls BatchFees.
             * @function batchFees
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryBatchFeeRequest} request QueryBatchFeeRequest message or plain object
             * @param {gravity.v1.Query.BatchFeesCallback} callback Node-style callback called with the error, if any, and QueryBatchFeeResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.batchFees = function batchFees(request, callback) {
                return this.rpcCall(batchFees, $root.gravity.v1.QueryBatchFeeRequest, $root.gravity.v1.QueryBatchFeeResponse, request, callback);
            }, "name", { value: "BatchFees" });

            /**
             * Calls BatchFees.
             * @function batchFees
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryBatchFeeRequest} request QueryBatchFeeRequest message or plain object
             * @returns {Promise<gravity.v1.QueryBatchFeeResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#outgoingTxBatches}.
             * @memberof gravity.v1.Query
             * @typedef OutgoingTxBatchesCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryOutgoingTxBatchesResponse} [response] QueryOutgoingTxBatchesResponse
             */

            /**
             * Calls OutgoingTxBatches.
             * @function outgoingTxBatches
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryOutgoingTxBatchesRequest} request QueryOutgoingTxBatchesRequest message or plain object
             * @param {gravity.v1.Query.OutgoingTxBatchesCallback} callback Node-style callback called with the error, if any, and QueryOutgoingTxBatchesResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.outgoingTxBatches = function outgoingTxBatches(request, callback) {
                return this.rpcCall(outgoingTxBatches, $root.gravity.v1.QueryOutgoingTxBatchesRequest, $root.gravity.v1.QueryOutgoingTxBatchesResponse, request, callback);
            }, "name", { value: "OutgoingTxBatches" });

            /**
             * Calls OutgoingTxBatches.
             * @function outgoingTxBatches
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryOutgoingTxBatchesRequest} request QueryOutgoingTxBatchesRequest message or plain object
             * @returns {Promise<gravity.v1.QueryOutgoingTxBatchesResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#outgoingLogicCalls}.
             * @memberof gravity.v1.Query
             * @typedef OutgoingLogicCallsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryOutgoingLogicCallsResponse} [response] QueryOutgoingLogicCallsResponse
             */

            /**
             * Calls OutgoingLogicCalls.
             * @function outgoingLogicCalls
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryOutgoingLogicCallsRequest} request QueryOutgoingLogicCallsRequest message or plain object
             * @param {gravity.v1.Query.OutgoingLogicCallsCallback} callback Node-style callback called with the error, if any, and QueryOutgoingLogicCallsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.outgoingLogicCalls = function outgoingLogicCalls(request, callback) {
                return this.rpcCall(outgoingLogicCalls, $root.gravity.v1.QueryOutgoingLogicCallsRequest, $root.gravity.v1.QueryOutgoingLogicCallsResponse, request, callback);
            }, "name", { value: "OutgoingLogicCalls" });

            /**
             * Calls OutgoingLogicCalls.
             * @function outgoingLogicCalls
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryOutgoingLogicCallsRequest} request QueryOutgoingLogicCallsRequest message or plain object
             * @returns {Promise<gravity.v1.QueryOutgoingLogicCallsResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#batchRequestByNonce}.
             * @memberof gravity.v1.Query
             * @typedef BatchRequestByNonceCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryBatchRequestByNonceResponse} [response] QueryBatchRequestByNonceResponse
             */

            /**
             * Calls BatchRequestByNonce.
             * @function batchRequestByNonce
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryBatchRequestByNonceRequest} request QueryBatchRequestByNonceRequest message or plain object
             * @param {gravity.v1.Query.BatchRequestByNonceCallback} callback Node-style callback called with the error, if any, and QueryBatchRequestByNonceResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.batchRequestByNonce = function batchRequestByNonce(request, callback) {
                return this.rpcCall(batchRequestByNonce, $root.gravity.v1.QueryBatchRequestByNonceRequest, $root.gravity.v1.QueryBatchRequestByNonceResponse, request, callback);
            }, "name", { value: "BatchRequestByNonce" });

            /**
             * Calls BatchRequestByNonce.
             * @function batchRequestByNonce
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryBatchRequestByNonceRequest} request QueryBatchRequestByNonceRequest message or plain object
             * @returns {Promise<gravity.v1.QueryBatchRequestByNonceResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#batchConfirms}.
             * @memberof gravity.v1.Query
             * @typedef BatchConfirmsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryBatchConfirmsResponse} [response] QueryBatchConfirmsResponse
             */

            /**
             * Calls BatchConfirms.
             * @function batchConfirms
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryBatchConfirmsRequest} request QueryBatchConfirmsRequest message or plain object
             * @param {gravity.v1.Query.BatchConfirmsCallback} callback Node-style callback called with the error, if any, and QueryBatchConfirmsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.batchConfirms = function batchConfirms(request, callback) {
                return this.rpcCall(batchConfirms, $root.gravity.v1.QueryBatchConfirmsRequest, $root.gravity.v1.QueryBatchConfirmsResponse, request, callback);
            }, "name", { value: "BatchConfirms" });

            /**
             * Calls BatchConfirms.
             * @function batchConfirms
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryBatchConfirmsRequest} request QueryBatchConfirmsRequest message or plain object
             * @returns {Promise<gravity.v1.QueryBatchConfirmsResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#logicConfirms}.
             * @memberof gravity.v1.Query
             * @typedef LogicConfirmsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryLogicConfirmsResponse} [response] QueryLogicConfirmsResponse
             */

            /**
             * Calls LogicConfirms.
             * @function logicConfirms
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLogicConfirmsRequest} request QueryLogicConfirmsRequest message or plain object
             * @param {gravity.v1.Query.LogicConfirmsCallback} callback Node-style callback called with the error, if any, and QueryLogicConfirmsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.logicConfirms = function logicConfirms(request, callback) {
                return this.rpcCall(logicConfirms, $root.gravity.v1.QueryLogicConfirmsRequest, $root.gravity.v1.QueryLogicConfirmsResponse, request, callback);
            }, "name", { value: "LogicConfirms" });

            /**
             * Calls LogicConfirms.
             * @function logicConfirms
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLogicConfirmsRequest} request QueryLogicConfirmsRequest message or plain object
             * @returns {Promise<gravity.v1.QueryLogicConfirmsResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#eRC20ToDenom}.
             * @memberof gravity.v1.Query
             * @typedef ERC20ToDenomCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryERC20ToDenomResponse} [response] QueryERC20ToDenomResponse
             */

            /**
             * Calls ERC20ToDenom.
             * @function eRC20ToDenom
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryERC20ToDenomRequest} request QueryERC20ToDenomRequest message or plain object
             * @param {gravity.v1.Query.ERC20ToDenomCallback} callback Node-style callback called with the error, if any, and QueryERC20ToDenomResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.eRC20ToDenom = function eRC20ToDenom(request, callback) {
                return this.rpcCall(eRC20ToDenom, $root.gravity.v1.QueryERC20ToDenomRequest, $root.gravity.v1.QueryERC20ToDenomResponse, request, callback);
            }, "name", { value: "ERC20ToDenom" });

            /**
             * Calls ERC20ToDenom.
             * @function eRC20ToDenom
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryERC20ToDenomRequest} request QueryERC20ToDenomRequest message or plain object
             * @returns {Promise<gravity.v1.QueryERC20ToDenomResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#denomToERC20}.
             * @memberof gravity.v1.Query
             * @typedef DenomToERC20Callback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryDenomToERC20Response} [response] QueryDenomToERC20Response
             */

            /**
             * Calls DenomToERC20.
             * @function denomToERC20
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryDenomToERC20Request} request QueryDenomToERC20Request message or plain object
             * @param {gravity.v1.Query.DenomToERC20Callback} callback Node-style callback called with the error, if any, and QueryDenomToERC20Response
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.denomToERC20 = function denomToERC20(request, callback) {
                return this.rpcCall(denomToERC20, $root.gravity.v1.QueryDenomToERC20Request, $root.gravity.v1.QueryDenomToERC20Response, request, callback);
            }, "name", { value: "DenomToERC20" });

            /**
             * Calls DenomToERC20.
             * @function denomToERC20
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryDenomToERC20Request} request QueryDenomToERC20Request message or plain object
             * @returns {Promise<gravity.v1.QueryDenomToERC20Response>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#getLastObservedEthBlock}.
             * @memberof gravity.v1.Query
             * @typedef GetLastObservedEthBlockCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryLastObservedEthBlockResponse} [response] QueryLastObservedEthBlockResponse
             */

            /**
             * Calls GetLastObservedEthBlock.
             * @function getLastObservedEthBlock
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastObservedEthBlockRequest} request QueryLastObservedEthBlockRequest message or plain object
             * @param {gravity.v1.Query.GetLastObservedEthBlockCallback} callback Node-style callback called with the error, if any, and QueryLastObservedEthBlockResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.getLastObservedEthBlock = function getLastObservedEthBlock(request, callback) {
                return this.rpcCall(getLastObservedEthBlock, $root.gravity.v1.QueryLastObservedEthBlockRequest, $root.gravity.v1.QueryLastObservedEthBlockResponse, request, callback);
            }, "name", { value: "GetLastObservedEthBlock" });

            /**
             * Calls GetLastObservedEthBlock.
             * @function getLastObservedEthBlock
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastObservedEthBlockRequest} request QueryLastObservedEthBlockRequest message or plain object
             * @returns {Promise<gravity.v1.QueryLastObservedEthBlockResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#getLastObservedEthNonce}.
             * @memberof gravity.v1.Query
             * @typedef GetLastObservedEthNonceCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryLastObservedEthNonceResponse} [response] QueryLastObservedEthNonceResponse
             */

            /**
             * Calls GetLastObservedEthNonce.
             * @function getLastObservedEthNonce
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastObservedEthNonceRequest} request QueryLastObservedEthNonceRequest message or plain object
             * @param {gravity.v1.Query.GetLastObservedEthNonceCallback} callback Node-style callback called with the error, if any, and QueryLastObservedEthNonceResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.getLastObservedEthNonce = function getLastObservedEthNonce(request, callback) {
                return this.rpcCall(getLastObservedEthNonce, $root.gravity.v1.QueryLastObservedEthNonceRequest, $root.gravity.v1.QueryLastObservedEthNonceResponse, request, callback);
            }, "name", { value: "GetLastObservedEthNonce" });

            /**
             * Calls GetLastObservedEthNonce.
             * @function getLastObservedEthNonce
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryLastObservedEthNonceRequest} request QueryLastObservedEthNonceRequest message or plain object
             * @returns {Promise<gravity.v1.QueryLastObservedEthNonceResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#getAttestations}.
             * @memberof gravity.v1.Query
             * @typedef GetAttestationsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryAttestationsResponse} [response] QueryAttestationsResponse
             */

            /**
             * Calls GetAttestations.
             * @function getAttestations
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryAttestationsRequest} request QueryAttestationsRequest message or plain object
             * @param {gravity.v1.Query.GetAttestationsCallback} callback Node-style callback called with the error, if any, and QueryAttestationsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.getAttestations = function getAttestations(request, callback) {
                return this.rpcCall(getAttestations, $root.gravity.v1.QueryAttestationsRequest, $root.gravity.v1.QueryAttestationsResponse, request, callback);
            }, "name", { value: "GetAttestations" });

            /**
             * Calls GetAttestations.
             * @function getAttestations
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryAttestationsRequest} request QueryAttestationsRequest message or plain object
             * @returns {Promise<gravity.v1.QueryAttestationsResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#getDelegateKeyByValidator}.
             * @memberof gravity.v1.Query
             * @typedef GetDelegateKeyByValidatorCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryDelegateKeysByValidatorAddressResponse} [response] QueryDelegateKeysByValidatorAddressResponse
             */

            /**
             * Calls GetDelegateKeyByValidator.
             * @function getDelegateKeyByValidator
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryDelegateKeysByValidatorAddress} request QueryDelegateKeysByValidatorAddress message or plain object
             * @param {gravity.v1.Query.GetDelegateKeyByValidatorCallback} callback Node-style callback called with the error, if any, and QueryDelegateKeysByValidatorAddressResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.getDelegateKeyByValidator = function getDelegateKeyByValidator(request, callback) {
                return this.rpcCall(getDelegateKeyByValidator, $root.gravity.v1.QueryDelegateKeysByValidatorAddress, $root.gravity.v1.QueryDelegateKeysByValidatorAddressResponse, request, callback);
            }, "name", { value: "GetDelegateKeyByValidator" });

            /**
             * Calls GetDelegateKeyByValidator.
             * @function getDelegateKeyByValidator
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryDelegateKeysByValidatorAddress} request QueryDelegateKeysByValidatorAddress message or plain object
             * @returns {Promise<gravity.v1.QueryDelegateKeysByValidatorAddressResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#getDelegateKeyByEth}.
             * @memberof gravity.v1.Query
             * @typedef GetDelegateKeyByEthCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryDelegateKeysByEthAddressResponse} [response] QueryDelegateKeysByEthAddressResponse
             */

            /**
             * Calls GetDelegateKeyByEth.
             * @function getDelegateKeyByEth
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryDelegateKeysByEthAddress} request QueryDelegateKeysByEthAddress message or plain object
             * @param {gravity.v1.Query.GetDelegateKeyByEthCallback} callback Node-style callback called with the error, if any, and QueryDelegateKeysByEthAddressResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.getDelegateKeyByEth = function getDelegateKeyByEth(request, callback) {
                return this.rpcCall(getDelegateKeyByEth, $root.gravity.v1.QueryDelegateKeysByEthAddress, $root.gravity.v1.QueryDelegateKeysByEthAddressResponse, request, callback);
            }, "name", { value: "GetDelegateKeyByEth" });

            /**
             * Calls GetDelegateKeyByEth.
             * @function getDelegateKeyByEth
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryDelegateKeysByEthAddress} request QueryDelegateKeysByEthAddress message or plain object
             * @returns {Promise<gravity.v1.QueryDelegateKeysByEthAddressResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#getDelegateKeyByOrchestrator}.
             * @memberof gravity.v1.Query
             * @typedef GetDelegateKeyByOrchestratorCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse} [response] QueryDelegateKeysByOrchestratorAddressResponse
             */

            /**
             * Calls GetDelegateKeyByOrchestrator.
             * @function getDelegateKeyByOrchestrator
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryDelegateKeysByOrchestratorAddress} request QueryDelegateKeysByOrchestratorAddress message or plain object
             * @param {gravity.v1.Query.GetDelegateKeyByOrchestratorCallback} callback Node-style callback called with the error, if any, and QueryDelegateKeysByOrchestratorAddressResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.getDelegateKeyByOrchestrator = function getDelegateKeyByOrchestrator(request, callback) {
                return this.rpcCall(getDelegateKeyByOrchestrator, $root.gravity.v1.QueryDelegateKeysByOrchestratorAddress, $root.gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse, request, callback);
            }, "name", { value: "GetDelegateKeyByOrchestrator" });

            /**
             * Calls GetDelegateKeyByOrchestrator.
             * @function getDelegateKeyByOrchestrator
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryDelegateKeysByOrchestratorAddress} request QueryDelegateKeysByOrchestratorAddress message or plain object
             * @returns {Promise<gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#getPendingSendToEth}.
             * @memberof gravity.v1.Query
             * @typedef GetPendingSendToEthCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryPendingSendToEthResponse} [response] QueryPendingSendToEthResponse
             */

            /**
             * Calls GetPendingSendToEth.
             * @function getPendingSendToEth
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryPendingSendToEth} request QueryPendingSendToEth message or plain object
             * @param {gravity.v1.Query.GetPendingSendToEthCallback} callback Node-style callback called with the error, if any, and QueryPendingSendToEthResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.getPendingSendToEth = function getPendingSendToEth(request, callback) {
                return this.rpcCall(getPendingSendToEth, $root.gravity.v1.QueryPendingSendToEth, $root.gravity.v1.QueryPendingSendToEthResponse, request, callback);
            }, "name", { value: "GetPendingSendToEth" });

            /**
             * Calls GetPendingSendToEth.
             * @function getPendingSendToEth
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryPendingSendToEth} request QueryPendingSendToEth message or plain object
             * @returns {Promise<gravity.v1.QueryPendingSendToEthResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Query#getPendingIbcAutoForwards}.
             * @memberof gravity.v1.Query
             * @typedef GetPendingIbcAutoForwardsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.QueryPendingIbcAutoForwardsResponse} [response] QueryPendingIbcAutoForwardsResponse
             */

            /**
             * Calls GetPendingIbcAutoForwards.
             * @function getPendingIbcAutoForwards
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryPendingIbcAutoForwards} request QueryPendingIbcAutoForwards message or plain object
             * @param {gravity.v1.Query.GetPendingIbcAutoForwardsCallback} callback Node-style callback called with the error, if any, and QueryPendingIbcAutoForwardsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Query.prototype.getPendingIbcAutoForwards = function getPendingIbcAutoForwards(request, callback) {
                return this.rpcCall(getPendingIbcAutoForwards, $root.gravity.v1.QueryPendingIbcAutoForwards, $root.gravity.v1.QueryPendingIbcAutoForwardsResponse, request, callback);
            }, "name", { value: "GetPendingIbcAutoForwards" });

            /**
             * Calls GetPendingIbcAutoForwards.
             * @function getPendingIbcAutoForwards
             * @memberof gravity.v1.Query
             * @instance
             * @param {gravity.v1.IQueryPendingIbcAutoForwards} request QueryPendingIbcAutoForwards message or plain object
             * @returns {Promise<gravity.v1.QueryPendingIbcAutoForwardsResponse>} Promise
             * @variation 2
             */

            return Query;
        })();

        v1.QueryParamsRequest = (function() {

            /**
             * Properties of a QueryParamsRequest.
             * @memberof gravity.v1
             * @interface IQueryParamsRequest
             */

            /**
             * Constructs a new QueryParamsRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryParamsRequest.
             * @implements IQueryParamsRequest
             * @constructor
             * @param {gravity.v1.IQueryParamsRequest=} [properties] Properties to set
             */
            function QueryParamsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified QueryParamsRequest message. Does not implicitly {@link gravity.v1.QueryParamsRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryParamsRequest
             * @static
             * @param {gravity.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryParamsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryParamsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryParamsRequest
             * @static
             * @param {gravity.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryParamsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryParamsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryParamsRequest} QueryParamsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryParamsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryParamsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryParamsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryParamsRequest} QueryParamsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryParamsRequest message.
             * @function verify
             * @memberof gravity.v1.QueryParamsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryParamsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryParamsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryParamsRequest} QueryParamsRequest
             */
            QueryParamsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryParamsRequest)
                    return object;
                return new $root.gravity.v1.QueryParamsRequest();
            };

            /**
             * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryParamsRequest
             * @static
             * @param {gravity.v1.QueryParamsRequest} message QueryParamsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryParamsRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this QueryParamsRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryParamsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryParamsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryParamsRequest;
        })();

        v1.QueryParamsResponse = (function() {

            /**
             * Properties of a QueryParamsResponse.
             * @memberof gravity.v1
             * @interface IQueryParamsResponse
             * @property {gravity.v1.IParams|null} [params] QueryParamsResponse params
             */

            /**
             * Constructs a new QueryParamsResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryParamsResponse.
             * @implements IQueryParamsResponse
             * @constructor
             * @param {gravity.v1.IQueryParamsResponse=} [properties] Properties to set
             */
            function QueryParamsResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryParamsResponse params.
             * @member {gravity.v1.IParams|null|undefined} params
             * @memberof gravity.v1.QueryParamsResponse
             * @instance
             */
            QueryParamsResponse.prototype.params = null;

            /**
             * Encodes the specified QueryParamsResponse message. Does not implicitly {@link gravity.v1.QueryParamsResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryParamsResponse
             * @static
             * @param {gravity.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryParamsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                    $root.gravity.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryParamsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryParamsResponse
             * @static
             * @param {gravity.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryParamsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryParamsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryParamsResponse} QueryParamsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryParamsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryParamsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.params = $root.gravity.v1.Params.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryParamsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryParamsResponse} QueryParamsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryParamsResponse message.
             * @function verify
             * @memberof gravity.v1.QueryParamsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryParamsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.params != null && message.hasOwnProperty("params")) {
                    let error = $root.gravity.v1.Params.verify(message.params);
                    if (error)
                        return "params." + error;
                }
                return null;
            };

            /**
             * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryParamsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryParamsResponse} QueryParamsResponse
             */
            QueryParamsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryParamsResponse)
                    return object;
                let message = new $root.gravity.v1.QueryParamsResponse();
                if (object.params != null) {
                    if (typeof object.params !== "object")
                        throw TypeError(".gravity.v1.QueryParamsResponse.params: object expected");
                    message.params = $root.gravity.v1.Params.fromObject(object.params);
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryParamsResponse
             * @static
             * @param {gravity.v1.QueryParamsResponse} message QueryParamsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryParamsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.params = null;
                if (message.params != null && message.hasOwnProperty("params"))
                    object.params = $root.gravity.v1.Params.toObject(message.params, options);
                return object;
            };

            /**
             * Converts this QueryParamsResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryParamsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryParamsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryParamsResponse;
        })();

        v1.QueryCurrentValsetRequest = (function() {

            /**
             * Properties of a QueryCurrentValsetRequest.
             * @memberof gravity.v1
             * @interface IQueryCurrentValsetRequest
             */

            /**
             * Constructs a new QueryCurrentValsetRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryCurrentValsetRequest.
             * @implements IQueryCurrentValsetRequest
             * @constructor
             * @param {gravity.v1.IQueryCurrentValsetRequest=} [properties] Properties to set
             */
            function QueryCurrentValsetRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified QueryCurrentValsetRequest message. Does not implicitly {@link gravity.v1.QueryCurrentValsetRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryCurrentValsetRequest
             * @static
             * @param {gravity.v1.IQueryCurrentValsetRequest} message QueryCurrentValsetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryCurrentValsetRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified QueryCurrentValsetRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryCurrentValsetRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryCurrentValsetRequest
             * @static
             * @param {gravity.v1.IQueryCurrentValsetRequest} message QueryCurrentValsetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryCurrentValsetRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryCurrentValsetRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryCurrentValsetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryCurrentValsetRequest} QueryCurrentValsetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryCurrentValsetRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryCurrentValsetRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryCurrentValsetRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryCurrentValsetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryCurrentValsetRequest} QueryCurrentValsetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryCurrentValsetRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryCurrentValsetRequest message.
             * @function verify
             * @memberof gravity.v1.QueryCurrentValsetRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryCurrentValsetRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a QueryCurrentValsetRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryCurrentValsetRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryCurrentValsetRequest} QueryCurrentValsetRequest
             */
            QueryCurrentValsetRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryCurrentValsetRequest)
                    return object;
                return new $root.gravity.v1.QueryCurrentValsetRequest();
            };

            /**
             * Creates a plain object from a QueryCurrentValsetRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryCurrentValsetRequest
             * @static
             * @param {gravity.v1.QueryCurrentValsetRequest} message QueryCurrentValsetRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryCurrentValsetRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this QueryCurrentValsetRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryCurrentValsetRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryCurrentValsetRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryCurrentValsetRequest;
        })();

        v1.QueryCurrentValsetResponse = (function() {

            /**
             * Properties of a QueryCurrentValsetResponse.
             * @memberof gravity.v1
             * @interface IQueryCurrentValsetResponse
             * @property {gravity.v1.IValset|null} [valset] QueryCurrentValsetResponse valset
             */

            /**
             * Constructs a new QueryCurrentValsetResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryCurrentValsetResponse.
             * @implements IQueryCurrentValsetResponse
             * @constructor
             * @param {gravity.v1.IQueryCurrentValsetResponse=} [properties] Properties to set
             */
            function QueryCurrentValsetResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryCurrentValsetResponse valset.
             * @member {gravity.v1.IValset|null|undefined} valset
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @instance
             */
            QueryCurrentValsetResponse.prototype.valset = null;

            /**
             * Encodes the specified QueryCurrentValsetResponse message. Does not implicitly {@link gravity.v1.QueryCurrentValsetResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @static
             * @param {gravity.v1.IQueryCurrentValsetResponse} message QueryCurrentValsetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryCurrentValsetResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.valset != null && Object.hasOwnProperty.call(message, "valset"))
                    $root.gravity.v1.Valset.encode(message.valset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryCurrentValsetResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryCurrentValsetResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @static
             * @param {gravity.v1.IQueryCurrentValsetResponse} message QueryCurrentValsetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryCurrentValsetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryCurrentValsetResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryCurrentValsetResponse} QueryCurrentValsetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryCurrentValsetResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryCurrentValsetResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.valset = $root.gravity.v1.Valset.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryCurrentValsetResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryCurrentValsetResponse} QueryCurrentValsetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryCurrentValsetResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryCurrentValsetResponse message.
             * @function verify
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryCurrentValsetResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.valset != null && message.hasOwnProperty("valset")) {
                    let error = $root.gravity.v1.Valset.verify(message.valset);
                    if (error)
                        return "valset." + error;
                }
                return null;
            };

            /**
             * Creates a QueryCurrentValsetResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryCurrentValsetResponse} QueryCurrentValsetResponse
             */
            QueryCurrentValsetResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryCurrentValsetResponse)
                    return object;
                let message = new $root.gravity.v1.QueryCurrentValsetResponse();
                if (object.valset != null) {
                    if (typeof object.valset !== "object")
                        throw TypeError(".gravity.v1.QueryCurrentValsetResponse.valset: object expected");
                    message.valset = $root.gravity.v1.Valset.fromObject(object.valset);
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryCurrentValsetResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @static
             * @param {gravity.v1.QueryCurrentValsetResponse} message QueryCurrentValsetResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryCurrentValsetResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.valset = null;
                if (message.valset != null && message.hasOwnProperty("valset"))
                    object.valset = $root.gravity.v1.Valset.toObject(message.valset, options);
                return object;
            };

            /**
             * Converts this QueryCurrentValsetResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryCurrentValsetResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryCurrentValsetResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryCurrentValsetResponse;
        })();

        v1.QueryValsetRequestRequest = (function() {

            /**
             * Properties of a QueryValsetRequestRequest.
             * @memberof gravity.v1
             * @interface IQueryValsetRequestRequest
             * @property {number|null} [nonce] QueryValsetRequestRequest nonce
             */

            /**
             * Constructs a new QueryValsetRequestRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryValsetRequestRequest.
             * @implements IQueryValsetRequestRequest
             * @constructor
             * @param {gravity.v1.IQueryValsetRequestRequest=} [properties] Properties to set
             */
            function QueryValsetRequestRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryValsetRequestRequest nonce.
             * @member {number} nonce
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @instance
             */
            QueryValsetRequestRequest.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified QueryValsetRequestRequest message. Does not implicitly {@link gravity.v1.QueryValsetRequestRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @static
             * @param {gravity.v1.IQueryValsetRequestRequest} message QueryValsetRequestRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetRequestRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified QueryValsetRequestRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryValsetRequestRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @static
             * @param {gravity.v1.IQueryValsetRequestRequest} message QueryValsetRequestRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetRequestRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryValsetRequestRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryValsetRequestRequest} QueryValsetRequestRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetRequestRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryValsetRequestRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryValsetRequestRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryValsetRequestRequest} QueryValsetRequestRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetRequestRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryValsetRequestRequest message.
             * @function verify
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryValsetRequestRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                return null;
            };

            /**
             * Creates a QueryValsetRequestRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryValsetRequestRequest} QueryValsetRequestRequest
             */
            QueryValsetRequestRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryValsetRequestRequest)
                    return object;
                let message = new $root.gravity.v1.QueryValsetRequestRequest();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a QueryValsetRequestRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @static
             * @param {gravity.v1.QueryValsetRequestRequest} message QueryValsetRequestRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryValsetRequestRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                return object;
            };

            /**
             * Converts this QueryValsetRequestRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryValsetRequestRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryValsetRequestRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryValsetRequestRequest;
        })();

        v1.QueryValsetRequestResponse = (function() {

            /**
             * Properties of a QueryValsetRequestResponse.
             * @memberof gravity.v1
             * @interface IQueryValsetRequestResponse
             * @property {gravity.v1.IValset|null} [valset] QueryValsetRequestResponse valset
             */

            /**
             * Constructs a new QueryValsetRequestResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryValsetRequestResponse.
             * @implements IQueryValsetRequestResponse
             * @constructor
             * @param {gravity.v1.IQueryValsetRequestResponse=} [properties] Properties to set
             */
            function QueryValsetRequestResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryValsetRequestResponse valset.
             * @member {gravity.v1.IValset|null|undefined} valset
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @instance
             */
            QueryValsetRequestResponse.prototype.valset = null;

            /**
             * Encodes the specified QueryValsetRequestResponse message. Does not implicitly {@link gravity.v1.QueryValsetRequestResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @static
             * @param {gravity.v1.IQueryValsetRequestResponse} message QueryValsetRequestResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetRequestResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.valset != null && Object.hasOwnProperty.call(message, "valset"))
                    $root.gravity.v1.Valset.encode(message.valset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryValsetRequestResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryValsetRequestResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @static
             * @param {gravity.v1.IQueryValsetRequestResponse} message QueryValsetRequestResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetRequestResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryValsetRequestResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryValsetRequestResponse} QueryValsetRequestResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetRequestResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryValsetRequestResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.valset = $root.gravity.v1.Valset.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryValsetRequestResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryValsetRequestResponse} QueryValsetRequestResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetRequestResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryValsetRequestResponse message.
             * @function verify
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryValsetRequestResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.valset != null && message.hasOwnProperty("valset")) {
                    let error = $root.gravity.v1.Valset.verify(message.valset);
                    if (error)
                        return "valset." + error;
                }
                return null;
            };

            /**
             * Creates a QueryValsetRequestResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryValsetRequestResponse} QueryValsetRequestResponse
             */
            QueryValsetRequestResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryValsetRequestResponse)
                    return object;
                let message = new $root.gravity.v1.QueryValsetRequestResponse();
                if (object.valset != null) {
                    if (typeof object.valset !== "object")
                        throw TypeError(".gravity.v1.QueryValsetRequestResponse.valset: object expected");
                    message.valset = $root.gravity.v1.Valset.fromObject(object.valset);
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryValsetRequestResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @static
             * @param {gravity.v1.QueryValsetRequestResponse} message QueryValsetRequestResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryValsetRequestResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.valset = null;
                if (message.valset != null && message.hasOwnProperty("valset"))
                    object.valset = $root.gravity.v1.Valset.toObject(message.valset, options);
                return object;
            };

            /**
             * Converts this QueryValsetRequestResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryValsetRequestResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryValsetRequestResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryValsetRequestResponse;
        })();

        v1.QueryValsetConfirmRequest = (function() {

            /**
             * Properties of a QueryValsetConfirmRequest.
             * @memberof gravity.v1
             * @interface IQueryValsetConfirmRequest
             * @property {number|null} [nonce] QueryValsetConfirmRequest nonce
             * @property {string|null} [address] QueryValsetConfirmRequest address
             */

            /**
             * Constructs a new QueryValsetConfirmRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryValsetConfirmRequest.
             * @implements IQueryValsetConfirmRequest
             * @constructor
             * @param {gravity.v1.IQueryValsetConfirmRequest=} [properties] Properties to set
             */
            function QueryValsetConfirmRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryValsetConfirmRequest nonce.
             * @member {number} nonce
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @instance
             */
            QueryValsetConfirmRequest.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * QueryValsetConfirmRequest address.
             * @member {string} address
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @instance
             */
            QueryValsetConfirmRequest.prototype.address = "";

            /**
             * Encodes the specified QueryValsetConfirmRequest message. Does not implicitly {@link gravity.v1.QueryValsetConfirmRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @static
             * @param {gravity.v1.IQueryValsetConfirmRequest} message QueryValsetConfirmRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetConfirmRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.address);
                return writer;
            };

            /**
             * Encodes the specified QueryValsetConfirmRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryValsetConfirmRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @static
             * @param {gravity.v1.IQueryValsetConfirmRequest} message QueryValsetConfirmRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetConfirmRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryValsetConfirmRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryValsetConfirmRequest} QueryValsetConfirmRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetConfirmRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryValsetConfirmRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    case 2:
                        message.address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryValsetConfirmRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryValsetConfirmRequest} QueryValsetConfirmRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetConfirmRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryValsetConfirmRequest message.
             * @function verify
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryValsetConfirmRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                return null;
            };

            /**
             * Creates a QueryValsetConfirmRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryValsetConfirmRequest} QueryValsetConfirmRequest
             */
            QueryValsetConfirmRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryValsetConfirmRequest)
                    return object;
                let message = new $root.gravity.v1.QueryValsetConfirmRequest();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                if (object.address != null)
                    message.address = String(object.address);
                return message;
            };

            /**
             * Creates a plain object from a QueryValsetConfirmRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @static
             * @param {gravity.v1.QueryValsetConfirmRequest} message QueryValsetConfirmRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryValsetConfirmRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                    object.address = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                return object;
            };

            /**
             * Converts this QueryValsetConfirmRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryValsetConfirmRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryValsetConfirmRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryValsetConfirmRequest;
        })();

        v1.QueryValsetConfirmResponse = (function() {

            /**
             * Properties of a QueryValsetConfirmResponse.
             * @memberof gravity.v1
             * @interface IQueryValsetConfirmResponse
             * @property {gravity.v1.IMsgValsetConfirm|null} [confirm] QueryValsetConfirmResponse confirm
             */

            /**
             * Constructs a new QueryValsetConfirmResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryValsetConfirmResponse.
             * @implements IQueryValsetConfirmResponse
             * @constructor
             * @param {gravity.v1.IQueryValsetConfirmResponse=} [properties] Properties to set
             */
            function QueryValsetConfirmResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryValsetConfirmResponse confirm.
             * @member {gravity.v1.IMsgValsetConfirm|null|undefined} confirm
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @instance
             */
            QueryValsetConfirmResponse.prototype.confirm = null;

            /**
             * Encodes the specified QueryValsetConfirmResponse message. Does not implicitly {@link gravity.v1.QueryValsetConfirmResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @static
             * @param {gravity.v1.IQueryValsetConfirmResponse} message QueryValsetConfirmResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetConfirmResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.confirm != null && Object.hasOwnProperty.call(message, "confirm"))
                    $root.gravity.v1.MsgValsetConfirm.encode(message.confirm, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryValsetConfirmResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryValsetConfirmResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @static
             * @param {gravity.v1.IQueryValsetConfirmResponse} message QueryValsetConfirmResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryValsetConfirmResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryValsetConfirmResponse} QueryValsetConfirmResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetConfirmResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryValsetConfirmResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.confirm = $root.gravity.v1.MsgValsetConfirm.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryValsetConfirmResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryValsetConfirmResponse} QueryValsetConfirmResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryValsetConfirmResponse message.
             * @function verify
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryValsetConfirmResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.confirm != null && message.hasOwnProperty("confirm")) {
                    let error = $root.gravity.v1.MsgValsetConfirm.verify(message.confirm);
                    if (error)
                        return "confirm." + error;
                }
                return null;
            };

            /**
             * Creates a QueryValsetConfirmResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryValsetConfirmResponse} QueryValsetConfirmResponse
             */
            QueryValsetConfirmResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryValsetConfirmResponse)
                    return object;
                let message = new $root.gravity.v1.QueryValsetConfirmResponse();
                if (object.confirm != null) {
                    if (typeof object.confirm !== "object")
                        throw TypeError(".gravity.v1.QueryValsetConfirmResponse.confirm: object expected");
                    message.confirm = $root.gravity.v1.MsgValsetConfirm.fromObject(object.confirm);
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryValsetConfirmResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @static
             * @param {gravity.v1.QueryValsetConfirmResponse} message QueryValsetConfirmResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryValsetConfirmResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.confirm = null;
                if (message.confirm != null && message.hasOwnProperty("confirm"))
                    object.confirm = $root.gravity.v1.MsgValsetConfirm.toObject(message.confirm, options);
                return object;
            };

            /**
             * Converts this QueryValsetConfirmResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryValsetConfirmResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryValsetConfirmResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryValsetConfirmResponse;
        })();

        v1.QueryValsetConfirmsByNonceRequest = (function() {

            /**
             * Properties of a QueryValsetConfirmsByNonceRequest.
             * @memberof gravity.v1
             * @interface IQueryValsetConfirmsByNonceRequest
             * @property {number|null} [nonce] QueryValsetConfirmsByNonceRequest nonce
             */

            /**
             * Constructs a new QueryValsetConfirmsByNonceRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryValsetConfirmsByNonceRequest.
             * @implements IQueryValsetConfirmsByNonceRequest
             * @constructor
             * @param {gravity.v1.IQueryValsetConfirmsByNonceRequest=} [properties] Properties to set
             */
            function QueryValsetConfirmsByNonceRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryValsetConfirmsByNonceRequest nonce.
             * @member {number} nonce
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @instance
             */
            QueryValsetConfirmsByNonceRequest.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified QueryValsetConfirmsByNonceRequest message. Does not implicitly {@link gravity.v1.QueryValsetConfirmsByNonceRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @static
             * @param {gravity.v1.IQueryValsetConfirmsByNonceRequest} message QueryValsetConfirmsByNonceRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetConfirmsByNonceRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified QueryValsetConfirmsByNonceRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryValsetConfirmsByNonceRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @static
             * @param {gravity.v1.IQueryValsetConfirmsByNonceRequest} message QueryValsetConfirmsByNonceRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetConfirmsByNonceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryValsetConfirmsByNonceRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryValsetConfirmsByNonceRequest} QueryValsetConfirmsByNonceRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetConfirmsByNonceRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryValsetConfirmsByNonceRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryValsetConfirmsByNonceRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryValsetConfirmsByNonceRequest} QueryValsetConfirmsByNonceRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetConfirmsByNonceRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryValsetConfirmsByNonceRequest message.
             * @function verify
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryValsetConfirmsByNonceRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                return null;
            };

            /**
             * Creates a QueryValsetConfirmsByNonceRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryValsetConfirmsByNonceRequest} QueryValsetConfirmsByNonceRequest
             */
            QueryValsetConfirmsByNonceRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryValsetConfirmsByNonceRequest)
                    return object;
                let message = new $root.gravity.v1.QueryValsetConfirmsByNonceRequest();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a QueryValsetConfirmsByNonceRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @static
             * @param {gravity.v1.QueryValsetConfirmsByNonceRequest} message QueryValsetConfirmsByNonceRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryValsetConfirmsByNonceRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                return object;
            };

            /**
             * Converts this QueryValsetConfirmsByNonceRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryValsetConfirmsByNonceRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryValsetConfirmsByNonceRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryValsetConfirmsByNonceRequest;
        })();

        v1.QueryValsetConfirmsByNonceResponse = (function() {

            /**
             * Properties of a QueryValsetConfirmsByNonceResponse.
             * @memberof gravity.v1
             * @interface IQueryValsetConfirmsByNonceResponse
             * @property {Array.<gravity.v1.IMsgValsetConfirm>|null} [confirms] QueryValsetConfirmsByNonceResponse confirms
             */

            /**
             * Constructs a new QueryValsetConfirmsByNonceResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryValsetConfirmsByNonceResponse.
             * @implements IQueryValsetConfirmsByNonceResponse
             * @constructor
             * @param {gravity.v1.IQueryValsetConfirmsByNonceResponse=} [properties] Properties to set
             */
            function QueryValsetConfirmsByNonceResponse(properties) {
                this.confirms = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryValsetConfirmsByNonceResponse confirms.
             * @member {Array.<gravity.v1.IMsgValsetConfirm>} confirms
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @instance
             */
            QueryValsetConfirmsByNonceResponse.prototype.confirms = $util.emptyArray;

            /**
             * Encodes the specified QueryValsetConfirmsByNonceResponse message. Does not implicitly {@link gravity.v1.QueryValsetConfirmsByNonceResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @static
             * @param {gravity.v1.IQueryValsetConfirmsByNonceResponse} message QueryValsetConfirmsByNonceResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetConfirmsByNonceResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.confirms != null && message.confirms.length)
                    for (let i = 0; i < message.confirms.length; ++i)
                        $root.gravity.v1.MsgValsetConfirm.encode(message.confirms[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryValsetConfirmsByNonceResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryValsetConfirmsByNonceResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @static
             * @param {gravity.v1.IQueryValsetConfirmsByNonceResponse} message QueryValsetConfirmsByNonceResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryValsetConfirmsByNonceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryValsetConfirmsByNonceResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryValsetConfirmsByNonceResponse} QueryValsetConfirmsByNonceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetConfirmsByNonceResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryValsetConfirmsByNonceResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.confirms && message.confirms.length))
                            message.confirms = [];
                        message.confirms.push($root.gravity.v1.MsgValsetConfirm.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryValsetConfirmsByNonceResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryValsetConfirmsByNonceResponse} QueryValsetConfirmsByNonceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryValsetConfirmsByNonceResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryValsetConfirmsByNonceResponse message.
             * @function verify
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryValsetConfirmsByNonceResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.confirms != null && message.hasOwnProperty("confirms")) {
                    if (!Array.isArray(message.confirms))
                        return "confirms: array expected";
                    for (let i = 0; i < message.confirms.length; ++i) {
                        let error = $root.gravity.v1.MsgValsetConfirm.verify(message.confirms[i]);
                        if (error)
                            return "confirms." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryValsetConfirmsByNonceResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryValsetConfirmsByNonceResponse} QueryValsetConfirmsByNonceResponse
             */
            QueryValsetConfirmsByNonceResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryValsetConfirmsByNonceResponse)
                    return object;
                let message = new $root.gravity.v1.QueryValsetConfirmsByNonceResponse();
                if (object.confirms) {
                    if (!Array.isArray(object.confirms))
                        throw TypeError(".gravity.v1.QueryValsetConfirmsByNonceResponse.confirms: array expected");
                    message.confirms = [];
                    for (let i = 0; i < object.confirms.length; ++i) {
                        if (typeof object.confirms[i] !== "object")
                            throw TypeError(".gravity.v1.QueryValsetConfirmsByNonceResponse.confirms: object expected");
                        message.confirms[i] = $root.gravity.v1.MsgValsetConfirm.fromObject(object.confirms[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryValsetConfirmsByNonceResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @static
             * @param {gravity.v1.QueryValsetConfirmsByNonceResponse} message QueryValsetConfirmsByNonceResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryValsetConfirmsByNonceResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.confirms = [];
                if (message.confirms && message.confirms.length) {
                    object.confirms = [];
                    for (let j = 0; j < message.confirms.length; ++j)
                        object.confirms[j] = $root.gravity.v1.MsgValsetConfirm.toObject(message.confirms[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryValsetConfirmsByNonceResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryValsetConfirmsByNonceResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryValsetConfirmsByNonceResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryValsetConfirmsByNonceResponse;
        })();

        v1.QueryLastValsetRequestsRequest = (function() {

            /**
             * Properties of a QueryLastValsetRequestsRequest.
             * @memberof gravity.v1
             * @interface IQueryLastValsetRequestsRequest
             */

            /**
             * Constructs a new QueryLastValsetRequestsRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastValsetRequestsRequest.
             * @implements IQueryLastValsetRequestsRequest
             * @constructor
             * @param {gravity.v1.IQueryLastValsetRequestsRequest=} [properties] Properties to set
             */
            function QueryLastValsetRequestsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified QueryLastValsetRequestsRequest message. Does not implicitly {@link gravity.v1.QueryLastValsetRequestsRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastValsetRequestsRequest
             * @static
             * @param {gravity.v1.IQueryLastValsetRequestsRequest} message QueryLastValsetRequestsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastValsetRequestsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified QueryLastValsetRequestsRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryLastValsetRequestsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastValsetRequestsRequest
             * @static
             * @param {gravity.v1.IQueryLastValsetRequestsRequest} message QueryLastValsetRequestsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastValsetRequestsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastValsetRequestsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastValsetRequestsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastValsetRequestsRequest} QueryLastValsetRequestsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastValsetRequestsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastValsetRequestsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastValsetRequestsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastValsetRequestsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastValsetRequestsRequest} QueryLastValsetRequestsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastValsetRequestsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastValsetRequestsRequest message.
             * @function verify
             * @memberof gravity.v1.QueryLastValsetRequestsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastValsetRequestsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a QueryLastValsetRequestsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastValsetRequestsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastValsetRequestsRequest} QueryLastValsetRequestsRequest
             */
            QueryLastValsetRequestsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastValsetRequestsRequest)
                    return object;
                return new $root.gravity.v1.QueryLastValsetRequestsRequest();
            };

            /**
             * Creates a plain object from a QueryLastValsetRequestsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastValsetRequestsRequest
             * @static
             * @param {gravity.v1.QueryLastValsetRequestsRequest} message QueryLastValsetRequestsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastValsetRequestsRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this QueryLastValsetRequestsRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastValsetRequestsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastValsetRequestsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastValsetRequestsRequest;
        })();

        v1.QueryLastValsetRequestsResponse = (function() {

            /**
             * Properties of a QueryLastValsetRequestsResponse.
             * @memberof gravity.v1
             * @interface IQueryLastValsetRequestsResponse
             * @property {Array.<gravity.v1.IValset>|null} [valsets] QueryLastValsetRequestsResponse valsets
             */

            /**
             * Constructs a new QueryLastValsetRequestsResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastValsetRequestsResponse.
             * @implements IQueryLastValsetRequestsResponse
             * @constructor
             * @param {gravity.v1.IQueryLastValsetRequestsResponse=} [properties] Properties to set
             */
            function QueryLastValsetRequestsResponse(properties) {
                this.valsets = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastValsetRequestsResponse valsets.
             * @member {Array.<gravity.v1.IValset>} valsets
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @instance
             */
            QueryLastValsetRequestsResponse.prototype.valsets = $util.emptyArray;

            /**
             * Encodes the specified QueryLastValsetRequestsResponse message. Does not implicitly {@link gravity.v1.QueryLastValsetRequestsResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @static
             * @param {gravity.v1.IQueryLastValsetRequestsResponse} message QueryLastValsetRequestsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastValsetRequestsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.valsets != null && message.valsets.length)
                    for (let i = 0; i < message.valsets.length; ++i)
                        $root.gravity.v1.Valset.encode(message.valsets[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryLastValsetRequestsResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryLastValsetRequestsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @static
             * @param {gravity.v1.IQueryLastValsetRequestsResponse} message QueryLastValsetRequestsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastValsetRequestsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastValsetRequestsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastValsetRequestsResponse} QueryLastValsetRequestsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastValsetRequestsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastValsetRequestsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.valsets && message.valsets.length))
                            message.valsets = [];
                        message.valsets.push($root.gravity.v1.Valset.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastValsetRequestsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastValsetRequestsResponse} QueryLastValsetRequestsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastValsetRequestsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastValsetRequestsResponse message.
             * @function verify
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastValsetRequestsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.valsets != null && message.hasOwnProperty("valsets")) {
                    if (!Array.isArray(message.valsets))
                        return "valsets: array expected";
                    for (let i = 0; i < message.valsets.length; ++i) {
                        let error = $root.gravity.v1.Valset.verify(message.valsets[i]);
                        if (error)
                            return "valsets." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryLastValsetRequestsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastValsetRequestsResponse} QueryLastValsetRequestsResponse
             */
            QueryLastValsetRequestsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastValsetRequestsResponse)
                    return object;
                let message = new $root.gravity.v1.QueryLastValsetRequestsResponse();
                if (object.valsets) {
                    if (!Array.isArray(object.valsets))
                        throw TypeError(".gravity.v1.QueryLastValsetRequestsResponse.valsets: array expected");
                    message.valsets = [];
                    for (let i = 0; i < object.valsets.length; ++i) {
                        if (typeof object.valsets[i] !== "object")
                            throw TypeError(".gravity.v1.QueryLastValsetRequestsResponse.valsets: object expected");
                        message.valsets[i] = $root.gravity.v1.Valset.fromObject(object.valsets[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryLastValsetRequestsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @static
             * @param {gravity.v1.QueryLastValsetRequestsResponse} message QueryLastValsetRequestsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastValsetRequestsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.valsets = [];
                if (message.valsets && message.valsets.length) {
                    object.valsets = [];
                    for (let j = 0; j < message.valsets.length; ++j)
                        object.valsets[j] = $root.gravity.v1.Valset.toObject(message.valsets[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryLastValsetRequestsResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastValsetRequestsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastValsetRequestsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastValsetRequestsResponse;
        })();

        v1.QueryLastPendingValsetRequestByAddrRequest = (function() {

            /**
             * Properties of a QueryLastPendingValsetRequestByAddrRequest.
             * @memberof gravity.v1
             * @interface IQueryLastPendingValsetRequestByAddrRequest
             * @property {string|null} [address] QueryLastPendingValsetRequestByAddrRequest address
             */

            /**
             * Constructs a new QueryLastPendingValsetRequestByAddrRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastPendingValsetRequestByAddrRequest.
             * @implements IQueryLastPendingValsetRequestByAddrRequest
             * @constructor
             * @param {gravity.v1.IQueryLastPendingValsetRequestByAddrRequest=} [properties] Properties to set
             */
            function QueryLastPendingValsetRequestByAddrRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastPendingValsetRequestByAddrRequest address.
             * @member {string} address
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @instance
             */
            QueryLastPendingValsetRequestByAddrRequest.prototype.address = "";

            /**
             * Encodes the specified QueryLastPendingValsetRequestByAddrRequest message. Does not implicitly {@link gravity.v1.QueryLastPendingValsetRequestByAddrRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @static
             * @param {gravity.v1.IQueryLastPendingValsetRequestByAddrRequest} message QueryLastPendingValsetRequestByAddrRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingValsetRequestByAddrRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                return writer;
            };

            /**
             * Encodes the specified QueryLastPendingValsetRequestByAddrRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryLastPendingValsetRequestByAddrRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @static
             * @param {gravity.v1.IQueryLastPendingValsetRequestByAddrRequest} message QueryLastPendingValsetRequestByAddrRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingValsetRequestByAddrRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastPendingValsetRequestByAddrRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastPendingValsetRequestByAddrRequest} QueryLastPendingValsetRequestByAddrRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingValsetRequestByAddrRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastPendingValsetRequestByAddrRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastPendingValsetRequestByAddrRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastPendingValsetRequestByAddrRequest} QueryLastPendingValsetRequestByAddrRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingValsetRequestByAddrRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastPendingValsetRequestByAddrRequest message.
             * @function verify
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastPendingValsetRequestByAddrRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                return null;
            };

            /**
             * Creates a QueryLastPendingValsetRequestByAddrRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastPendingValsetRequestByAddrRequest} QueryLastPendingValsetRequestByAddrRequest
             */
            QueryLastPendingValsetRequestByAddrRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastPendingValsetRequestByAddrRequest)
                    return object;
                let message = new $root.gravity.v1.QueryLastPendingValsetRequestByAddrRequest();
                if (object.address != null)
                    message.address = String(object.address);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastPendingValsetRequestByAddrRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @static
             * @param {gravity.v1.QueryLastPendingValsetRequestByAddrRequest} message QueryLastPendingValsetRequestByAddrRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastPendingValsetRequestByAddrRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.address = "";
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                return object;
            };

            /**
             * Converts this QueryLastPendingValsetRequestByAddrRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastPendingValsetRequestByAddrRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastPendingValsetRequestByAddrRequest;
        })();

        v1.QueryLastPendingValsetRequestByAddrResponse = (function() {

            /**
             * Properties of a QueryLastPendingValsetRequestByAddrResponse.
             * @memberof gravity.v1
             * @interface IQueryLastPendingValsetRequestByAddrResponse
             * @property {Array.<gravity.v1.IValset>|null} [valsets] QueryLastPendingValsetRequestByAddrResponse valsets
             */

            /**
             * Constructs a new QueryLastPendingValsetRequestByAddrResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastPendingValsetRequestByAddrResponse.
             * @implements IQueryLastPendingValsetRequestByAddrResponse
             * @constructor
             * @param {gravity.v1.IQueryLastPendingValsetRequestByAddrResponse=} [properties] Properties to set
             */
            function QueryLastPendingValsetRequestByAddrResponse(properties) {
                this.valsets = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastPendingValsetRequestByAddrResponse valsets.
             * @member {Array.<gravity.v1.IValset>} valsets
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @instance
             */
            QueryLastPendingValsetRequestByAddrResponse.prototype.valsets = $util.emptyArray;

            /**
             * Encodes the specified QueryLastPendingValsetRequestByAddrResponse message. Does not implicitly {@link gravity.v1.QueryLastPendingValsetRequestByAddrResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @static
             * @param {gravity.v1.IQueryLastPendingValsetRequestByAddrResponse} message QueryLastPendingValsetRequestByAddrResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingValsetRequestByAddrResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.valsets != null && message.valsets.length)
                    for (let i = 0; i < message.valsets.length; ++i)
                        $root.gravity.v1.Valset.encode(message.valsets[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryLastPendingValsetRequestByAddrResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryLastPendingValsetRequestByAddrResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @static
             * @param {gravity.v1.IQueryLastPendingValsetRequestByAddrResponse} message QueryLastPendingValsetRequestByAddrResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingValsetRequestByAddrResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastPendingValsetRequestByAddrResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastPendingValsetRequestByAddrResponse} QueryLastPendingValsetRequestByAddrResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingValsetRequestByAddrResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastPendingValsetRequestByAddrResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.valsets && message.valsets.length))
                            message.valsets = [];
                        message.valsets.push($root.gravity.v1.Valset.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastPendingValsetRequestByAddrResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastPendingValsetRequestByAddrResponse} QueryLastPendingValsetRequestByAddrResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingValsetRequestByAddrResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastPendingValsetRequestByAddrResponse message.
             * @function verify
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastPendingValsetRequestByAddrResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.valsets != null && message.hasOwnProperty("valsets")) {
                    if (!Array.isArray(message.valsets))
                        return "valsets: array expected";
                    for (let i = 0; i < message.valsets.length; ++i) {
                        let error = $root.gravity.v1.Valset.verify(message.valsets[i]);
                        if (error)
                            return "valsets." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryLastPendingValsetRequestByAddrResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastPendingValsetRequestByAddrResponse} QueryLastPendingValsetRequestByAddrResponse
             */
            QueryLastPendingValsetRequestByAddrResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastPendingValsetRequestByAddrResponse)
                    return object;
                let message = new $root.gravity.v1.QueryLastPendingValsetRequestByAddrResponse();
                if (object.valsets) {
                    if (!Array.isArray(object.valsets))
                        throw TypeError(".gravity.v1.QueryLastPendingValsetRequestByAddrResponse.valsets: array expected");
                    message.valsets = [];
                    for (let i = 0; i < object.valsets.length; ++i) {
                        if (typeof object.valsets[i] !== "object")
                            throw TypeError(".gravity.v1.QueryLastPendingValsetRequestByAddrResponse.valsets: object expected");
                        message.valsets[i] = $root.gravity.v1.Valset.fromObject(object.valsets[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryLastPendingValsetRequestByAddrResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @static
             * @param {gravity.v1.QueryLastPendingValsetRequestByAddrResponse} message QueryLastPendingValsetRequestByAddrResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastPendingValsetRequestByAddrResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.valsets = [];
                if (message.valsets && message.valsets.length) {
                    object.valsets = [];
                    for (let j = 0; j < message.valsets.length; ++j)
                        object.valsets[j] = $root.gravity.v1.Valset.toObject(message.valsets[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryLastPendingValsetRequestByAddrResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastPendingValsetRequestByAddrResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastPendingValsetRequestByAddrResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastPendingValsetRequestByAddrResponse;
        })();

        v1.QueryBatchFeeRequest = (function() {

            /**
             * Properties of a QueryBatchFeeRequest.
             * @memberof gravity.v1
             * @interface IQueryBatchFeeRequest
             */

            /**
             * Constructs a new QueryBatchFeeRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryBatchFeeRequest.
             * @implements IQueryBatchFeeRequest
             * @constructor
             * @param {gravity.v1.IQueryBatchFeeRequest=} [properties] Properties to set
             */
            function QueryBatchFeeRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified QueryBatchFeeRequest message. Does not implicitly {@link gravity.v1.QueryBatchFeeRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryBatchFeeRequest
             * @static
             * @param {gravity.v1.IQueryBatchFeeRequest} message QueryBatchFeeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchFeeRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified QueryBatchFeeRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryBatchFeeRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryBatchFeeRequest
             * @static
             * @param {gravity.v1.IQueryBatchFeeRequest} message QueryBatchFeeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchFeeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryBatchFeeRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryBatchFeeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryBatchFeeRequest} QueryBatchFeeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchFeeRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryBatchFeeRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryBatchFeeRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryBatchFeeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryBatchFeeRequest} QueryBatchFeeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchFeeRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryBatchFeeRequest message.
             * @function verify
             * @memberof gravity.v1.QueryBatchFeeRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryBatchFeeRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a QueryBatchFeeRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryBatchFeeRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryBatchFeeRequest} QueryBatchFeeRequest
             */
            QueryBatchFeeRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryBatchFeeRequest)
                    return object;
                return new $root.gravity.v1.QueryBatchFeeRequest();
            };

            /**
             * Creates a plain object from a QueryBatchFeeRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryBatchFeeRequest
             * @static
             * @param {gravity.v1.QueryBatchFeeRequest} message QueryBatchFeeRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryBatchFeeRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this QueryBatchFeeRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryBatchFeeRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryBatchFeeRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryBatchFeeRequest;
        })();

        v1.QueryBatchFeeResponse = (function() {

            /**
             * Properties of a QueryBatchFeeResponse.
             * @memberof gravity.v1
             * @interface IQueryBatchFeeResponse
             * @property {Array.<gravity.v1.IBatchFees>|null} [batch_fees] QueryBatchFeeResponse batch_fees
             */

            /**
             * Constructs a new QueryBatchFeeResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryBatchFeeResponse.
             * @implements IQueryBatchFeeResponse
             * @constructor
             * @param {gravity.v1.IQueryBatchFeeResponse=} [properties] Properties to set
             */
            function QueryBatchFeeResponse(properties) {
                this.batch_fees = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryBatchFeeResponse batch_fees.
             * @member {Array.<gravity.v1.IBatchFees>} batch_fees
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @instance
             */
            QueryBatchFeeResponse.prototype.batch_fees = $util.emptyArray;

            /**
             * Encodes the specified QueryBatchFeeResponse message. Does not implicitly {@link gravity.v1.QueryBatchFeeResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @static
             * @param {gravity.v1.IQueryBatchFeeResponse} message QueryBatchFeeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchFeeResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.batch_fees != null && message.batch_fees.length)
                    for (let i = 0; i < message.batch_fees.length; ++i)
                        $root.gravity.v1.BatchFees.encode(message.batch_fees[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryBatchFeeResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryBatchFeeResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @static
             * @param {gravity.v1.IQueryBatchFeeResponse} message QueryBatchFeeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchFeeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryBatchFeeResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryBatchFeeResponse} QueryBatchFeeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchFeeResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryBatchFeeResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.batch_fees && message.batch_fees.length))
                            message.batch_fees = [];
                        message.batch_fees.push($root.gravity.v1.BatchFees.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryBatchFeeResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryBatchFeeResponse} QueryBatchFeeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchFeeResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryBatchFeeResponse message.
             * @function verify
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryBatchFeeResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.batch_fees != null && message.hasOwnProperty("batch_fees")) {
                    if (!Array.isArray(message.batch_fees))
                        return "batch_fees: array expected";
                    for (let i = 0; i < message.batch_fees.length; ++i) {
                        let error = $root.gravity.v1.BatchFees.verify(message.batch_fees[i]);
                        if (error)
                            return "batch_fees." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryBatchFeeResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryBatchFeeResponse} QueryBatchFeeResponse
             */
            QueryBatchFeeResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryBatchFeeResponse)
                    return object;
                let message = new $root.gravity.v1.QueryBatchFeeResponse();
                if (object.batch_fees) {
                    if (!Array.isArray(object.batch_fees))
                        throw TypeError(".gravity.v1.QueryBatchFeeResponse.batch_fees: array expected");
                    message.batch_fees = [];
                    for (let i = 0; i < object.batch_fees.length; ++i) {
                        if (typeof object.batch_fees[i] !== "object")
                            throw TypeError(".gravity.v1.QueryBatchFeeResponse.batch_fees: object expected");
                        message.batch_fees[i] = $root.gravity.v1.BatchFees.fromObject(object.batch_fees[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryBatchFeeResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @static
             * @param {gravity.v1.QueryBatchFeeResponse} message QueryBatchFeeResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryBatchFeeResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.batch_fees = [];
                if (message.batch_fees && message.batch_fees.length) {
                    object.batch_fees = [];
                    for (let j = 0; j < message.batch_fees.length; ++j)
                        object.batch_fees[j] = $root.gravity.v1.BatchFees.toObject(message.batch_fees[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryBatchFeeResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryBatchFeeResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryBatchFeeResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryBatchFeeResponse;
        })();

        v1.QueryLastPendingBatchRequestByAddrRequest = (function() {

            /**
             * Properties of a QueryLastPendingBatchRequestByAddrRequest.
             * @memberof gravity.v1
             * @interface IQueryLastPendingBatchRequestByAddrRequest
             * @property {string|null} [address] QueryLastPendingBatchRequestByAddrRequest address
             */

            /**
             * Constructs a new QueryLastPendingBatchRequestByAddrRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastPendingBatchRequestByAddrRequest.
             * @implements IQueryLastPendingBatchRequestByAddrRequest
             * @constructor
             * @param {gravity.v1.IQueryLastPendingBatchRequestByAddrRequest=} [properties] Properties to set
             */
            function QueryLastPendingBatchRequestByAddrRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastPendingBatchRequestByAddrRequest address.
             * @member {string} address
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @instance
             */
            QueryLastPendingBatchRequestByAddrRequest.prototype.address = "";

            /**
             * Encodes the specified QueryLastPendingBatchRequestByAddrRequest message. Does not implicitly {@link gravity.v1.QueryLastPendingBatchRequestByAddrRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @static
             * @param {gravity.v1.IQueryLastPendingBatchRequestByAddrRequest} message QueryLastPendingBatchRequestByAddrRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingBatchRequestByAddrRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                return writer;
            };

            /**
             * Encodes the specified QueryLastPendingBatchRequestByAddrRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryLastPendingBatchRequestByAddrRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @static
             * @param {gravity.v1.IQueryLastPendingBatchRequestByAddrRequest} message QueryLastPendingBatchRequestByAddrRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingBatchRequestByAddrRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastPendingBatchRequestByAddrRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastPendingBatchRequestByAddrRequest} QueryLastPendingBatchRequestByAddrRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingBatchRequestByAddrRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastPendingBatchRequestByAddrRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastPendingBatchRequestByAddrRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastPendingBatchRequestByAddrRequest} QueryLastPendingBatchRequestByAddrRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingBatchRequestByAddrRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastPendingBatchRequestByAddrRequest message.
             * @function verify
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastPendingBatchRequestByAddrRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                return null;
            };

            /**
             * Creates a QueryLastPendingBatchRequestByAddrRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastPendingBatchRequestByAddrRequest} QueryLastPendingBatchRequestByAddrRequest
             */
            QueryLastPendingBatchRequestByAddrRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastPendingBatchRequestByAddrRequest)
                    return object;
                let message = new $root.gravity.v1.QueryLastPendingBatchRequestByAddrRequest();
                if (object.address != null)
                    message.address = String(object.address);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastPendingBatchRequestByAddrRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @static
             * @param {gravity.v1.QueryLastPendingBatchRequestByAddrRequest} message QueryLastPendingBatchRequestByAddrRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastPendingBatchRequestByAddrRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.address = "";
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                return object;
            };

            /**
             * Converts this QueryLastPendingBatchRequestByAddrRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastPendingBatchRequestByAddrRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastPendingBatchRequestByAddrRequest;
        })();

        v1.QueryLastPendingBatchRequestByAddrResponse = (function() {

            /**
             * Properties of a QueryLastPendingBatchRequestByAddrResponse.
             * @memberof gravity.v1
             * @interface IQueryLastPendingBatchRequestByAddrResponse
             * @property {Array.<gravity.v1.IOutgoingTxBatch>|null} [batch] QueryLastPendingBatchRequestByAddrResponse batch
             */

            /**
             * Constructs a new QueryLastPendingBatchRequestByAddrResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastPendingBatchRequestByAddrResponse.
             * @implements IQueryLastPendingBatchRequestByAddrResponse
             * @constructor
             * @param {gravity.v1.IQueryLastPendingBatchRequestByAddrResponse=} [properties] Properties to set
             */
            function QueryLastPendingBatchRequestByAddrResponse(properties) {
                this.batch = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastPendingBatchRequestByAddrResponse batch.
             * @member {Array.<gravity.v1.IOutgoingTxBatch>} batch
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @instance
             */
            QueryLastPendingBatchRequestByAddrResponse.prototype.batch = $util.emptyArray;

            /**
             * Encodes the specified QueryLastPendingBatchRequestByAddrResponse message. Does not implicitly {@link gravity.v1.QueryLastPendingBatchRequestByAddrResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @static
             * @param {gravity.v1.IQueryLastPendingBatchRequestByAddrResponse} message QueryLastPendingBatchRequestByAddrResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingBatchRequestByAddrResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.batch != null && message.batch.length)
                    for (let i = 0; i < message.batch.length; ++i)
                        $root.gravity.v1.OutgoingTxBatch.encode(message.batch[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryLastPendingBatchRequestByAddrResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryLastPendingBatchRequestByAddrResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @static
             * @param {gravity.v1.IQueryLastPendingBatchRequestByAddrResponse} message QueryLastPendingBatchRequestByAddrResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingBatchRequestByAddrResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastPendingBatchRequestByAddrResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastPendingBatchRequestByAddrResponse} QueryLastPendingBatchRequestByAddrResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingBatchRequestByAddrResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastPendingBatchRequestByAddrResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.batch && message.batch.length))
                            message.batch = [];
                        message.batch.push($root.gravity.v1.OutgoingTxBatch.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastPendingBatchRequestByAddrResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastPendingBatchRequestByAddrResponse} QueryLastPendingBatchRequestByAddrResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingBatchRequestByAddrResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastPendingBatchRequestByAddrResponse message.
             * @function verify
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastPendingBatchRequestByAddrResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.batch != null && message.hasOwnProperty("batch")) {
                    if (!Array.isArray(message.batch))
                        return "batch: array expected";
                    for (let i = 0; i < message.batch.length; ++i) {
                        let error = $root.gravity.v1.OutgoingTxBatch.verify(message.batch[i]);
                        if (error)
                            return "batch." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryLastPendingBatchRequestByAddrResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastPendingBatchRequestByAddrResponse} QueryLastPendingBatchRequestByAddrResponse
             */
            QueryLastPendingBatchRequestByAddrResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastPendingBatchRequestByAddrResponse)
                    return object;
                let message = new $root.gravity.v1.QueryLastPendingBatchRequestByAddrResponse();
                if (object.batch) {
                    if (!Array.isArray(object.batch))
                        throw TypeError(".gravity.v1.QueryLastPendingBatchRequestByAddrResponse.batch: array expected");
                    message.batch = [];
                    for (let i = 0; i < object.batch.length; ++i) {
                        if (typeof object.batch[i] !== "object")
                            throw TypeError(".gravity.v1.QueryLastPendingBatchRequestByAddrResponse.batch: object expected");
                        message.batch[i] = $root.gravity.v1.OutgoingTxBatch.fromObject(object.batch[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryLastPendingBatchRequestByAddrResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @static
             * @param {gravity.v1.QueryLastPendingBatchRequestByAddrResponse} message QueryLastPendingBatchRequestByAddrResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastPendingBatchRequestByAddrResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.batch = [];
                if (message.batch && message.batch.length) {
                    object.batch = [];
                    for (let j = 0; j < message.batch.length; ++j)
                        object.batch[j] = $root.gravity.v1.OutgoingTxBatch.toObject(message.batch[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryLastPendingBatchRequestByAddrResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastPendingBatchRequestByAddrResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastPendingBatchRequestByAddrResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastPendingBatchRequestByAddrResponse;
        })();

        v1.QueryLastPendingLogicCallByAddrRequest = (function() {

            /**
             * Properties of a QueryLastPendingLogicCallByAddrRequest.
             * @memberof gravity.v1
             * @interface IQueryLastPendingLogicCallByAddrRequest
             * @property {string|null} [address] QueryLastPendingLogicCallByAddrRequest address
             */

            /**
             * Constructs a new QueryLastPendingLogicCallByAddrRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastPendingLogicCallByAddrRequest.
             * @implements IQueryLastPendingLogicCallByAddrRequest
             * @constructor
             * @param {gravity.v1.IQueryLastPendingLogicCallByAddrRequest=} [properties] Properties to set
             */
            function QueryLastPendingLogicCallByAddrRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastPendingLogicCallByAddrRequest address.
             * @member {string} address
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @instance
             */
            QueryLastPendingLogicCallByAddrRequest.prototype.address = "";

            /**
             * Encodes the specified QueryLastPendingLogicCallByAddrRequest message. Does not implicitly {@link gravity.v1.QueryLastPendingLogicCallByAddrRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @static
             * @param {gravity.v1.IQueryLastPendingLogicCallByAddrRequest} message QueryLastPendingLogicCallByAddrRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingLogicCallByAddrRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                return writer;
            };

            /**
             * Encodes the specified QueryLastPendingLogicCallByAddrRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryLastPendingLogicCallByAddrRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @static
             * @param {gravity.v1.IQueryLastPendingLogicCallByAddrRequest} message QueryLastPendingLogicCallByAddrRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingLogicCallByAddrRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastPendingLogicCallByAddrRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastPendingLogicCallByAddrRequest} QueryLastPendingLogicCallByAddrRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingLogicCallByAddrRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastPendingLogicCallByAddrRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastPendingLogicCallByAddrRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastPendingLogicCallByAddrRequest} QueryLastPendingLogicCallByAddrRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingLogicCallByAddrRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastPendingLogicCallByAddrRequest message.
             * @function verify
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastPendingLogicCallByAddrRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                return null;
            };

            /**
             * Creates a QueryLastPendingLogicCallByAddrRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastPendingLogicCallByAddrRequest} QueryLastPendingLogicCallByAddrRequest
             */
            QueryLastPendingLogicCallByAddrRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastPendingLogicCallByAddrRequest)
                    return object;
                let message = new $root.gravity.v1.QueryLastPendingLogicCallByAddrRequest();
                if (object.address != null)
                    message.address = String(object.address);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastPendingLogicCallByAddrRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @static
             * @param {gravity.v1.QueryLastPendingLogicCallByAddrRequest} message QueryLastPendingLogicCallByAddrRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastPendingLogicCallByAddrRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.address = "";
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                return object;
            };

            /**
             * Converts this QueryLastPendingLogicCallByAddrRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastPendingLogicCallByAddrRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastPendingLogicCallByAddrRequest;
        })();

        v1.QueryLastPendingLogicCallByAddrResponse = (function() {

            /**
             * Properties of a QueryLastPendingLogicCallByAddrResponse.
             * @memberof gravity.v1
             * @interface IQueryLastPendingLogicCallByAddrResponse
             * @property {Array.<gravity.v1.IOutgoingLogicCall>|null} [call] QueryLastPendingLogicCallByAddrResponse call
             */

            /**
             * Constructs a new QueryLastPendingLogicCallByAddrResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastPendingLogicCallByAddrResponse.
             * @implements IQueryLastPendingLogicCallByAddrResponse
             * @constructor
             * @param {gravity.v1.IQueryLastPendingLogicCallByAddrResponse=} [properties] Properties to set
             */
            function QueryLastPendingLogicCallByAddrResponse(properties) {
                this.call = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastPendingLogicCallByAddrResponse call.
             * @member {Array.<gravity.v1.IOutgoingLogicCall>} call
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @instance
             */
            QueryLastPendingLogicCallByAddrResponse.prototype.call = $util.emptyArray;

            /**
             * Encodes the specified QueryLastPendingLogicCallByAddrResponse message. Does not implicitly {@link gravity.v1.QueryLastPendingLogicCallByAddrResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @static
             * @param {gravity.v1.IQueryLastPendingLogicCallByAddrResponse} message QueryLastPendingLogicCallByAddrResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingLogicCallByAddrResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.call != null && message.call.length)
                    for (let i = 0; i < message.call.length; ++i)
                        $root.gravity.v1.OutgoingLogicCall.encode(message.call[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryLastPendingLogicCallByAddrResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryLastPendingLogicCallByAddrResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @static
             * @param {gravity.v1.IQueryLastPendingLogicCallByAddrResponse} message QueryLastPendingLogicCallByAddrResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastPendingLogicCallByAddrResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastPendingLogicCallByAddrResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastPendingLogicCallByAddrResponse} QueryLastPendingLogicCallByAddrResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingLogicCallByAddrResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastPendingLogicCallByAddrResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.call && message.call.length))
                            message.call = [];
                        message.call.push($root.gravity.v1.OutgoingLogicCall.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastPendingLogicCallByAddrResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastPendingLogicCallByAddrResponse} QueryLastPendingLogicCallByAddrResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastPendingLogicCallByAddrResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastPendingLogicCallByAddrResponse message.
             * @function verify
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastPendingLogicCallByAddrResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.call != null && message.hasOwnProperty("call")) {
                    if (!Array.isArray(message.call))
                        return "call: array expected";
                    for (let i = 0; i < message.call.length; ++i) {
                        let error = $root.gravity.v1.OutgoingLogicCall.verify(message.call[i]);
                        if (error)
                            return "call." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryLastPendingLogicCallByAddrResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastPendingLogicCallByAddrResponse} QueryLastPendingLogicCallByAddrResponse
             */
            QueryLastPendingLogicCallByAddrResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastPendingLogicCallByAddrResponse)
                    return object;
                let message = new $root.gravity.v1.QueryLastPendingLogicCallByAddrResponse();
                if (object.call) {
                    if (!Array.isArray(object.call))
                        throw TypeError(".gravity.v1.QueryLastPendingLogicCallByAddrResponse.call: array expected");
                    message.call = [];
                    for (let i = 0; i < object.call.length; ++i) {
                        if (typeof object.call[i] !== "object")
                            throw TypeError(".gravity.v1.QueryLastPendingLogicCallByAddrResponse.call: object expected");
                        message.call[i] = $root.gravity.v1.OutgoingLogicCall.fromObject(object.call[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryLastPendingLogicCallByAddrResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @static
             * @param {gravity.v1.QueryLastPendingLogicCallByAddrResponse} message QueryLastPendingLogicCallByAddrResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastPendingLogicCallByAddrResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.call = [];
                if (message.call && message.call.length) {
                    object.call = [];
                    for (let j = 0; j < message.call.length; ++j)
                        object.call[j] = $root.gravity.v1.OutgoingLogicCall.toObject(message.call[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryLastPendingLogicCallByAddrResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastPendingLogicCallByAddrResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastPendingLogicCallByAddrResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastPendingLogicCallByAddrResponse;
        })();

        v1.QueryOutgoingTxBatchesRequest = (function() {

            /**
             * Properties of a QueryOutgoingTxBatchesRequest.
             * @memberof gravity.v1
             * @interface IQueryOutgoingTxBatchesRequest
             */

            /**
             * Constructs a new QueryOutgoingTxBatchesRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryOutgoingTxBatchesRequest.
             * @implements IQueryOutgoingTxBatchesRequest
             * @constructor
             * @param {gravity.v1.IQueryOutgoingTxBatchesRequest=} [properties] Properties to set
             */
            function QueryOutgoingTxBatchesRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified QueryOutgoingTxBatchesRequest message. Does not implicitly {@link gravity.v1.QueryOutgoingTxBatchesRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryOutgoingTxBatchesRequest
             * @static
             * @param {gravity.v1.IQueryOutgoingTxBatchesRequest} message QueryOutgoingTxBatchesRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryOutgoingTxBatchesRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified QueryOutgoingTxBatchesRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryOutgoingTxBatchesRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryOutgoingTxBatchesRequest
             * @static
             * @param {gravity.v1.IQueryOutgoingTxBatchesRequest} message QueryOutgoingTxBatchesRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryOutgoingTxBatchesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryOutgoingTxBatchesRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryOutgoingTxBatchesRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryOutgoingTxBatchesRequest} QueryOutgoingTxBatchesRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryOutgoingTxBatchesRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryOutgoingTxBatchesRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryOutgoingTxBatchesRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryOutgoingTxBatchesRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryOutgoingTxBatchesRequest} QueryOutgoingTxBatchesRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryOutgoingTxBatchesRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryOutgoingTxBatchesRequest message.
             * @function verify
             * @memberof gravity.v1.QueryOutgoingTxBatchesRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryOutgoingTxBatchesRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a QueryOutgoingTxBatchesRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryOutgoingTxBatchesRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryOutgoingTxBatchesRequest} QueryOutgoingTxBatchesRequest
             */
            QueryOutgoingTxBatchesRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryOutgoingTxBatchesRequest)
                    return object;
                return new $root.gravity.v1.QueryOutgoingTxBatchesRequest();
            };

            /**
             * Creates a plain object from a QueryOutgoingTxBatchesRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryOutgoingTxBatchesRequest
             * @static
             * @param {gravity.v1.QueryOutgoingTxBatchesRequest} message QueryOutgoingTxBatchesRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryOutgoingTxBatchesRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this QueryOutgoingTxBatchesRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryOutgoingTxBatchesRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryOutgoingTxBatchesRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryOutgoingTxBatchesRequest;
        })();

        v1.QueryOutgoingTxBatchesResponse = (function() {

            /**
             * Properties of a QueryOutgoingTxBatchesResponse.
             * @memberof gravity.v1
             * @interface IQueryOutgoingTxBatchesResponse
             * @property {Array.<gravity.v1.IOutgoingTxBatch>|null} [batches] QueryOutgoingTxBatchesResponse batches
             */

            /**
             * Constructs a new QueryOutgoingTxBatchesResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryOutgoingTxBatchesResponse.
             * @implements IQueryOutgoingTxBatchesResponse
             * @constructor
             * @param {gravity.v1.IQueryOutgoingTxBatchesResponse=} [properties] Properties to set
             */
            function QueryOutgoingTxBatchesResponse(properties) {
                this.batches = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryOutgoingTxBatchesResponse batches.
             * @member {Array.<gravity.v1.IOutgoingTxBatch>} batches
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @instance
             */
            QueryOutgoingTxBatchesResponse.prototype.batches = $util.emptyArray;

            /**
             * Encodes the specified QueryOutgoingTxBatchesResponse message. Does not implicitly {@link gravity.v1.QueryOutgoingTxBatchesResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @static
             * @param {gravity.v1.IQueryOutgoingTxBatchesResponse} message QueryOutgoingTxBatchesResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryOutgoingTxBatchesResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.batches != null && message.batches.length)
                    for (let i = 0; i < message.batches.length; ++i)
                        $root.gravity.v1.OutgoingTxBatch.encode(message.batches[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryOutgoingTxBatchesResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryOutgoingTxBatchesResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @static
             * @param {gravity.v1.IQueryOutgoingTxBatchesResponse} message QueryOutgoingTxBatchesResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryOutgoingTxBatchesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryOutgoingTxBatchesResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryOutgoingTxBatchesResponse} QueryOutgoingTxBatchesResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryOutgoingTxBatchesResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryOutgoingTxBatchesResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.batches && message.batches.length))
                            message.batches = [];
                        message.batches.push($root.gravity.v1.OutgoingTxBatch.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryOutgoingTxBatchesResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryOutgoingTxBatchesResponse} QueryOutgoingTxBatchesResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryOutgoingTxBatchesResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryOutgoingTxBatchesResponse message.
             * @function verify
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryOutgoingTxBatchesResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.batches != null && message.hasOwnProperty("batches")) {
                    if (!Array.isArray(message.batches))
                        return "batches: array expected";
                    for (let i = 0; i < message.batches.length; ++i) {
                        let error = $root.gravity.v1.OutgoingTxBatch.verify(message.batches[i]);
                        if (error)
                            return "batches." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryOutgoingTxBatchesResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryOutgoingTxBatchesResponse} QueryOutgoingTxBatchesResponse
             */
            QueryOutgoingTxBatchesResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryOutgoingTxBatchesResponse)
                    return object;
                let message = new $root.gravity.v1.QueryOutgoingTxBatchesResponse();
                if (object.batches) {
                    if (!Array.isArray(object.batches))
                        throw TypeError(".gravity.v1.QueryOutgoingTxBatchesResponse.batches: array expected");
                    message.batches = [];
                    for (let i = 0; i < object.batches.length; ++i) {
                        if (typeof object.batches[i] !== "object")
                            throw TypeError(".gravity.v1.QueryOutgoingTxBatchesResponse.batches: object expected");
                        message.batches[i] = $root.gravity.v1.OutgoingTxBatch.fromObject(object.batches[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryOutgoingTxBatchesResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @static
             * @param {gravity.v1.QueryOutgoingTxBatchesResponse} message QueryOutgoingTxBatchesResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryOutgoingTxBatchesResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.batches = [];
                if (message.batches && message.batches.length) {
                    object.batches = [];
                    for (let j = 0; j < message.batches.length; ++j)
                        object.batches[j] = $root.gravity.v1.OutgoingTxBatch.toObject(message.batches[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryOutgoingTxBatchesResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryOutgoingTxBatchesResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryOutgoingTxBatchesResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryOutgoingTxBatchesResponse;
        })();

        v1.QueryOutgoingLogicCallsRequest = (function() {

            /**
             * Properties of a QueryOutgoingLogicCallsRequest.
             * @memberof gravity.v1
             * @interface IQueryOutgoingLogicCallsRequest
             */

            /**
             * Constructs a new QueryOutgoingLogicCallsRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryOutgoingLogicCallsRequest.
             * @implements IQueryOutgoingLogicCallsRequest
             * @constructor
             * @param {gravity.v1.IQueryOutgoingLogicCallsRequest=} [properties] Properties to set
             */
            function QueryOutgoingLogicCallsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified QueryOutgoingLogicCallsRequest message. Does not implicitly {@link gravity.v1.QueryOutgoingLogicCallsRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryOutgoingLogicCallsRequest
             * @static
             * @param {gravity.v1.IQueryOutgoingLogicCallsRequest} message QueryOutgoingLogicCallsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryOutgoingLogicCallsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified QueryOutgoingLogicCallsRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryOutgoingLogicCallsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryOutgoingLogicCallsRequest
             * @static
             * @param {gravity.v1.IQueryOutgoingLogicCallsRequest} message QueryOutgoingLogicCallsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryOutgoingLogicCallsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryOutgoingLogicCallsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryOutgoingLogicCallsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryOutgoingLogicCallsRequest} QueryOutgoingLogicCallsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryOutgoingLogicCallsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryOutgoingLogicCallsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryOutgoingLogicCallsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryOutgoingLogicCallsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryOutgoingLogicCallsRequest} QueryOutgoingLogicCallsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryOutgoingLogicCallsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryOutgoingLogicCallsRequest message.
             * @function verify
             * @memberof gravity.v1.QueryOutgoingLogicCallsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryOutgoingLogicCallsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a QueryOutgoingLogicCallsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryOutgoingLogicCallsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryOutgoingLogicCallsRequest} QueryOutgoingLogicCallsRequest
             */
            QueryOutgoingLogicCallsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryOutgoingLogicCallsRequest)
                    return object;
                return new $root.gravity.v1.QueryOutgoingLogicCallsRequest();
            };

            /**
             * Creates a plain object from a QueryOutgoingLogicCallsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryOutgoingLogicCallsRequest
             * @static
             * @param {gravity.v1.QueryOutgoingLogicCallsRequest} message QueryOutgoingLogicCallsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryOutgoingLogicCallsRequest.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this QueryOutgoingLogicCallsRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryOutgoingLogicCallsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryOutgoingLogicCallsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryOutgoingLogicCallsRequest;
        })();

        v1.QueryOutgoingLogicCallsResponse = (function() {

            /**
             * Properties of a QueryOutgoingLogicCallsResponse.
             * @memberof gravity.v1
             * @interface IQueryOutgoingLogicCallsResponse
             * @property {Array.<gravity.v1.IOutgoingLogicCall>|null} [calls] QueryOutgoingLogicCallsResponse calls
             */

            /**
             * Constructs a new QueryOutgoingLogicCallsResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryOutgoingLogicCallsResponse.
             * @implements IQueryOutgoingLogicCallsResponse
             * @constructor
             * @param {gravity.v1.IQueryOutgoingLogicCallsResponse=} [properties] Properties to set
             */
            function QueryOutgoingLogicCallsResponse(properties) {
                this.calls = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryOutgoingLogicCallsResponse calls.
             * @member {Array.<gravity.v1.IOutgoingLogicCall>} calls
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @instance
             */
            QueryOutgoingLogicCallsResponse.prototype.calls = $util.emptyArray;

            /**
             * Encodes the specified QueryOutgoingLogicCallsResponse message. Does not implicitly {@link gravity.v1.QueryOutgoingLogicCallsResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @static
             * @param {gravity.v1.IQueryOutgoingLogicCallsResponse} message QueryOutgoingLogicCallsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryOutgoingLogicCallsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.calls != null && message.calls.length)
                    for (let i = 0; i < message.calls.length; ++i)
                        $root.gravity.v1.OutgoingLogicCall.encode(message.calls[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryOutgoingLogicCallsResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryOutgoingLogicCallsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @static
             * @param {gravity.v1.IQueryOutgoingLogicCallsResponse} message QueryOutgoingLogicCallsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryOutgoingLogicCallsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryOutgoingLogicCallsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryOutgoingLogicCallsResponse} QueryOutgoingLogicCallsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryOutgoingLogicCallsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryOutgoingLogicCallsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.calls && message.calls.length))
                            message.calls = [];
                        message.calls.push($root.gravity.v1.OutgoingLogicCall.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryOutgoingLogicCallsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryOutgoingLogicCallsResponse} QueryOutgoingLogicCallsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryOutgoingLogicCallsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryOutgoingLogicCallsResponse message.
             * @function verify
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryOutgoingLogicCallsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.calls != null && message.hasOwnProperty("calls")) {
                    if (!Array.isArray(message.calls))
                        return "calls: array expected";
                    for (let i = 0; i < message.calls.length; ++i) {
                        let error = $root.gravity.v1.OutgoingLogicCall.verify(message.calls[i]);
                        if (error)
                            return "calls." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryOutgoingLogicCallsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryOutgoingLogicCallsResponse} QueryOutgoingLogicCallsResponse
             */
            QueryOutgoingLogicCallsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryOutgoingLogicCallsResponse)
                    return object;
                let message = new $root.gravity.v1.QueryOutgoingLogicCallsResponse();
                if (object.calls) {
                    if (!Array.isArray(object.calls))
                        throw TypeError(".gravity.v1.QueryOutgoingLogicCallsResponse.calls: array expected");
                    message.calls = [];
                    for (let i = 0; i < object.calls.length; ++i) {
                        if (typeof object.calls[i] !== "object")
                            throw TypeError(".gravity.v1.QueryOutgoingLogicCallsResponse.calls: object expected");
                        message.calls[i] = $root.gravity.v1.OutgoingLogicCall.fromObject(object.calls[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryOutgoingLogicCallsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @static
             * @param {gravity.v1.QueryOutgoingLogicCallsResponse} message QueryOutgoingLogicCallsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryOutgoingLogicCallsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.calls = [];
                if (message.calls && message.calls.length) {
                    object.calls = [];
                    for (let j = 0; j < message.calls.length; ++j)
                        object.calls[j] = $root.gravity.v1.OutgoingLogicCall.toObject(message.calls[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryOutgoingLogicCallsResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryOutgoingLogicCallsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryOutgoingLogicCallsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryOutgoingLogicCallsResponse;
        })();

        v1.QueryBatchRequestByNonceRequest = (function() {

            /**
             * Properties of a QueryBatchRequestByNonceRequest.
             * @memberof gravity.v1
             * @interface IQueryBatchRequestByNonceRequest
             * @property {number|null} [nonce] QueryBatchRequestByNonceRequest nonce
             * @property {string|null} [contract_address] QueryBatchRequestByNonceRequest contract_address
             */

            /**
             * Constructs a new QueryBatchRequestByNonceRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryBatchRequestByNonceRequest.
             * @implements IQueryBatchRequestByNonceRequest
             * @constructor
             * @param {gravity.v1.IQueryBatchRequestByNonceRequest=} [properties] Properties to set
             */
            function QueryBatchRequestByNonceRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryBatchRequestByNonceRequest nonce.
             * @member {number} nonce
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @instance
             */
            QueryBatchRequestByNonceRequest.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * QueryBatchRequestByNonceRequest contract_address.
             * @member {string} contract_address
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @instance
             */
            QueryBatchRequestByNonceRequest.prototype.contract_address = "";

            /**
             * Encodes the specified QueryBatchRequestByNonceRequest message. Does not implicitly {@link gravity.v1.QueryBatchRequestByNonceRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @static
             * @param {gravity.v1.IQueryBatchRequestByNonceRequest} message QueryBatchRequestByNonceRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchRequestByNonceRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                if (message.contract_address != null && Object.hasOwnProperty.call(message, "contract_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.contract_address);
                return writer;
            };

            /**
             * Encodes the specified QueryBatchRequestByNonceRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryBatchRequestByNonceRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @static
             * @param {gravity.v1.IQueryBatchRequestByNonceRequest} message QueryBatchRequestByNonceRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchRequestByNonceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryBatchRequestByNonceRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryBatchRequestByNonceRequest} QueryBatchRequestByNonceRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchRequestByNonceRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryBatchRequestByNonceRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    case 2:
                        message.contract_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryBatchRequestByNonceRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryBatchRequestByNonceRequest} QueryBatchRequestByNonceRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchRequestByNonceRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryBatchRequestByNonceRequest message.
             * @function verify
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryBatchRequestByNonceRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                if (message.contract_address != null && message.hasOwnProperty("contract_address"))
                    if (!$util.isString(message.contract_address))
                        return "contract_address: string expected";
                return null;
            };

            /**
             * Creates a QueryBatchRequestByNonceRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryBatchRequestByNonceRequest} QueryBatchRequestByNonceRequest
             */
            QueryBatchRequestByNonceRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryBatchRequestByNonceRequest)
                    return object;
                let message = new $root.gravity.v1.QueryBatchRequestByNonceRequest();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                if (object.contract_address != null)
                    message.contract_address = String(object.contract_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryBatchRequestByNonceRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @static
             * @param {gravity.v1.QueryBatchRequestByNonceRequest} message QueryBatchRequestByNonceRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryBatchRequestByNonceRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                    object.contract_address = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                if (message.contract_address != null && message.hasOwnProperty("contract_address"))
                    object.contract_address = message.contract_address;
                return object;
            };

            /**
             * Converts this QueryBatchRequestByNonceRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryBatchRequestByNonceRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryBatchRequestByNonceRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryBatchRequestByNonceRequest;
        })();

        v1.QueryBatchRequestByNonceResponse = (function() {

            /**
             * Properties of a QueryBatchRequestByNonceResponse.
             * @memberof gravity.v1
             * @interface IQueryBatchRequestByNonceResponse
             * @property {gravity.v1.IOutgoingTxBatch|null} [batch] QueryBatchRequestByNonceResponse batch
             */

            /**
             * Constructs a new QueryBatchRequestByNonceResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryBatchRequestByNonceResponse.
             * @implements IQueryBatchRequestByNonceResponse
             * @constructor
             * @param {gravity.v1.IQueryBatchRequestByNonceResponse=} [properties] Properties to set
             */
            function QueryBatchRequestByNonceResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryBatchRequestByNonceResponse batch.
             * @member {gravity.v1.IOutgoingTxBatch|null|undefined} batch
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @instance
             */
            QueryBatchRequestByNonceResponse.prototype.batch = null;

            /**
             * Encodes the specified QueryBatchRequestByNonceResponse message. Does not implicitly {@link gravity.v1.QueryBatchRequestByNonceResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @static
             * @param {gravity.v1.IQueryBatchRequestByNonceResponse} message QueryBatchRequestByNonceResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchRequestByNonceResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.batch != null && Object.hasOwnProperty.call(message, "batch"))
                    $root.gravity.v1.OutgoingTxBatch.encode(message.batch, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryBatchRequestByNonceResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryBatchRequestByNonceResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @static
             * @param {gravity.v1.IQueryBatchRequestByNonceResponse} message QueryBatchRequestByNonceResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchRequestByNonceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryBatchRequestByNonceResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryBatchRequestByNonceResponse} QueryBatchRequestByNonceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchRequestByNonceResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryBatchRequestByNonceResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.batch = $root.gravity.v1.OutgoingTxBatch.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryBatchRequestByNonceResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryBatchRequestByNonceResponse} QueryBatchRequestByNonceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchRequestByNonceResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryBatchRequestByNonceResponse message.
             * @function verify
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryBatchRequestByNonceResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.batch != null && message.hasOwnProperty("batch")) {
                    let error = $root.gravity.v1.OutgoingTxBatch.verify(message.batch);
                    if (error)
                        return "batch." + error;
                }
                return null;
            };

            /**
             * Creates a QueryBatchRequestByNonceResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryBatchRequestByNonceResponse} QueryBatchRequestByNonceResponse
             */
            QueryBatchRequestByNonceResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryBatchRequestByNonceResponse)
                    return object;
                let message = new $root.gravity.v1.QueryBatchRequestByNonceResponse();
                if (object.batch != null) {
                    if (typeof object.batch !== "object")
                        throw TypeError(".gravity.v1.QueryBatchRequestByNonceResponse.batch: object expected");
                    message.batch = $root.gravity.v1.OutgoingTxBatch.fromObject(object.batch);
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryBatchRequestByNonceResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @static
             * @param {gravity.v1.QueryBatchRequestByNonceResponse} message QueryBatchRequestByNonceResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryBatchRequestByNonceResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.batch = null;
                if (message.batch != null && message.hasOwnProperty("batch"))
                    object.batch = $root.gravity.v1.OutgoingTxBatch.toObject(message.batch, options);
                return object;
            };

            /**
             * Converts this QueryBatchRequestByNonceResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryBatchRequestByNonceResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryBatchRequestByNonceResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryBatchRequestByNonceResponse;
        })();

        v1.QueryBatchConfirmsRequest = (function() {

            /**
             * Properties of a QueryBatchConfirmsRequest.
             * @memberof gravity.v1
             * @interface IQueryBatchConfirmsRequest
             * @property {number|null} [nonce] QueryBatchConfirmsRequest nonce
             * @property {string|null} [contract_address] QueryBatchConfirmsRequest contract_address
             */

            /**
             * Constructs a new QueryBatchConfirmsRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryBatchConfirmsRequest.
             * @implements IQueryBatchConfirmsRequest
             * @constructor
             * @param {gravity.v1.IQueryBatchConfirmsRequest=} [properties] Properties to set
             */
            function QueryBatchConfirmsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryBatchConfirmsRequest nonce.
             * @member {number} nonce
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @instance
             */
            QueryBatchConfirmsRequest.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * QueryBatchConfirmsRequest contract_address.
             * @member {string} contract_address
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @instance
             */
            QueryBatchConfirmsRequest.prototype.contract_address = "";

            /**
             * Encodes the specified QueryBatchConfirmsRequest message. Does not implicitly {@link gravity.v1.QueryBatchConfirmsRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @static
             * @param {gravity.v1.IQueryBatchConfirmsRequest} message QueryBatchConfirmsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchConfirmsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                if (message.contract_address != null && Object.hasOwnProperty.call(message, "contract_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.contract_address);
                return writer;
            };

            /**
             * Encodes the specified QueryBatchConfirmsRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryBatchConfirmsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @static
             * @param {gravity.v1.IQueryBatchConfirmsRequest} message QueryBatchConfirmsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchConfirmsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryBatchConfirmsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryBatchConfirmsRequest} QueryBatchConfirmsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchConfirmsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryBatchConfirmsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    case 2:
                        message.contract_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryBatchConfirmsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryBatchConfirmsRequest} QueryBatchConfirmsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchConfirmsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryBatchConfirmsRequest message.
             * @function verify
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryBatchConfirmsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                if (message.contract_address != null && message.hasOwnProperty("contract_address"))
                    if (!$util.isString(message.contract_address))
                        return "contract_address: string expected";
                return null;
            };

            /**
             * Creates a QueryBatchConfirmsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryBatchConfirmsRequest} QueryBatchConfirmsRequest
             */
            QueryBatchConfirmsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryBatchConfirmsRequest)
                    return object;
                let message = new $root.gravity.v1.QueryBatchConfirmsRequest();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                if (object.contract_address != null)
                    message.contract_address = String(object.contract_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryBatchConfirmsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @static
             * @param {gravity.v1.QueryBatchConfirmsRequest} message QueryBatchConfirmsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryBatchConfirmsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                    object.contract_address = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                if (message.contract_address != null && message.hasOwnProperty("contract_address"))
                    object.contract_address = message.contract_address;
                return object;
            };

            /**
             * Converts this QueryBatchConfirmsRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryBatchConfirmsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryBatchConfirmsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryBatchConfirmsRequest;
        })();

        v1.QueryBatchConfirmsResponse = (function() {

            /**
             * Properties of a QueryBatchConfirmsResponse.
             * @memberof gravity.v1
             * @interface IQueryBatchConfirmsResponse
             * @property {Array.<gravity.v1.IMsgConfirmBatch>|null} [confirms] QueryBatchConfirmsResponse confirms
             */

            /**
             * Constructs a new QueryBatchConfirmsResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryBatchConfirmsResponse.
             * @implements IQueryBatchConfirmsResponse
             * @constructor
             * @param {gravity.v1.IQueryBatchConfirmsResponse=} [properties] Properties to set
             */
            function QueryBatchConfirmsResponse(properties) {
                this.confirms = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryBatchConfirmsResponse confirms.
             * @member {Array.<gravity.v1.IMsgConfirmBatch>} confirms
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @instance
             */
            QueryBatchConfirmsResponse.prototype.confirms = $util.emptyArray;

            /**
             * Encodes the specified QueryBatchConfirmsResponse message. Does not implicitly {@link gravity.v1.QueryBatchConfirmsResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @static
             * @param {gravity.v1.IQueryBatchConfirmsResponse} message QueryBatchConfirmsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchConfirmsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.confirms != null && message.confirms.length)
                    for (let i = 0; i < message.confirms.length; ++i)
                        $root.gravity.v1.MsgConfirmBatch.encode(message.confirms[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryBatchConfirmsResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryBatchConfirmsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @static
             * @param {gravity.v1.IQueryBatchConfirmsResponse} message QueryBatchConfirmsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryBatchConfirmsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryBatchConfirmsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryBatchConfirmsResponse} QueryBatchConfirmsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchConfirmsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryBatchConfirmsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.confirms && message.confirms.length))
                            message.confirms = [];
                        message.confirms.push($root.gravity.v1.MsgConfirmBatch.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryBatchConfirmsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryBatchConfirmsResponse} QueryBatchConfirmsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryBatchConfirmsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryBatchConfirmsResponse message.
             * @function verify
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryBatchConfirmsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.confirms != null && message.hasOwnProperty("confirms")) {
                    if (!Array.isArray(message.confirms))
                        return "confirms: array expected";
                    for (let i = 0; i < message.confirms.length; ++i) {
                        let error = $root.gravity.v1.MsgConfirmBatch.verify(message.confirms[i]);
                        if (error)
                            return "confirms." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryBatchConfirmsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryBatchConfirmsResponse} QueryBatchConfirmsResponse
             */
            QueryBatchConfirmsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryBatchConfirmsResponse)
                    return object;
                let message = new $root.gravity.v1.QueryBatchConfirmsResponse();
                if (object.confirms) {
                    if (!Array.isArray(object.confirms))
                        throw TypeError(".gravity.v1.QueryBatchConfirmsResponse.confirms: array expected");
                    message.confirms = [];
                    for (let i = 0; i < object.confirms.length; ++i) {
                        if (typeof object.confirms[i] !== "object")
                            throw TypeError(".gravity.v1.QueryBatchConfirmsResponse.confirms: object expected");
                        message.confirms[i] = $root.gravity.v1.MsgConfirmBatch.fromObject(object.confirms[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryBatchConfirmsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @static
             * @param {gravity.v1.QueryBatchConfirmsResponse} message QueryBatchConfirmsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryBatchConfirmsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.confirms = [];
                if (message.confirms && message.confirms.length) {
                    object.confirms = [];
                    for (let j = 0; j < message.confirms.length; ++j)
                        object.confirms[j] = $root.gravity.v1.MsgConfirmBatch.toObject(message.confirms[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryBatchConfirmsResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryBatchConfirmsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryBatchConfirmsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryBatchConfirmsResponse;
        })();

        v1.QueryLogicConfirmsRequest = (function() {

            /**
             * Properties of a QueryLogicConfirmsRequest.
             * @memberof gravity.v1
             * @interface IQueryLogicConfirmsRequest
             * @property {Uint8Array|null} [invalidation_id] QueryLogicConfirmsRequest invalidation_id
             * @property {number|null} [invalidation_nonce] QueryLogicConfirmsRequest invalidation_nonce
             */

            /**
             * Constructs a new QueryLogicConfirmsRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLogicConfirmsRequest.
             * @implements IQueryLogicConfirmsRequest
             * @constructor
             * @param {gravity.v1.IQueryLogicConfirmsRequest=} [properties] Properties to set
             */
            function QueryLogicConfirmsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLogicConfirmsRequest invalidation_id.
             * @member {Uint8Array} invalidation_id
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @instance
             */
            QueryLogicConfirmsRequest.prototype.invalidation_id = $util.newBuffer([]);

            /**
             * QueryLogicConfirmsRequest invalidation_nonce.
             * @member {number} invalidation_nonce
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @instance
             */
            QueryLogicConfirmsRequest.prototype.invalidation_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified QueryLogicConfirmsRequest message. Does not implicitly {@link gravity.v1.QueryLogicConfirmsRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @static
             * @param {gravity.v1.IQueryLogicConfirmsRequest} message QueryLogicConfirmsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLogicConfirmsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.invalidation_id != null && Object.hasOwnProperty.call(message, "invalidation_id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.invalidation_id);
                if (message.invalidation_nonce != null && Object.hasOwnProperty.call(message, "invalidation_nonce"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.invalidation_nonce);
                return writer;
            };

            /**
             * Encodes the specified QueryLogicConfirmsRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryLogicConfirmsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @static
             * @param {gravity.v1.IQueryLogicConfirmsRequest} message QueryLogicConfirmsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLogicConfirmsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLogicConfirmsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLogicConfirmsRequest} QueryLogicConfirmsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLogicConfirmsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLogicConfirmsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.invalidation_id = reader.bytes();
                        break;
                    case 2:
                        message.invalidation_nonce = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLogicConfirmsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLogicConfirmsRequest} QueryLogicConfirmsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLogicConfirmsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLogicConfirmsRequest message.
             * @function verify
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLogicConfirmsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.invalidation_id != null && message.hasOwnProperty("invalidation_id"))
                    if (!(message.invalidation_id && typeof message.invalidation_id.length === "number" || $util.isString(message.invalidation_id)))
                        return "invalidation_id: buffer expected";
                if (message.invalidation_nonce != null && message.hasOwnProperty("invalidation_nonce"))
                    if (!$util.isInteger(message.invalidation_nonce) && !(message.invalidation_nonce && $util.isInteger(message.invalidation_nonce.low) && $util.isInteger(message.invalidation_nonce.high)))
                        return "invalidation_nonce: integer|Long expected";
                return null;
            };

            /**
             * Creates a QueryLogicConfirmsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLogicConfirmsRequest} QueryLogicConfirmsRequest
             */
            QueryLogicConfirmsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLogicConfirmsRequest)
                    return object;
                let message = new $root.gravity.v1.QueryLogicConfirmsRequest();
                if (object.invalidation_id != null)
                    if (typeof object.invalidation_id === "string")
                        $util.base64.decode(object.invalidation_id, message.invalidation_id = $util.newBuffer($util.base64.length(object.invalidation_id)), 0);
                    else if (object.invalidation_id.length)
                        message.invalidation_id = object.invalidation_id;
                if (object.invalidation_nonce != null)
                    if ($util.Long)
                        (message.invalidation_nonce = $util.Long.fromValue(object.invalidation_nonce)).unsigned = true;
                    else if (typeof object.invalidation_nonce === "string")
                        message.invalidation_nonce = parseInt(object.invalidation_nonce, 10);
                    else if (typeof object.invalidation_nonce === "number")
                        message.invalidation_nonce = object.invalidation_nonce;
                    else if (typeof object.invalidation_nonce === "object")
                        message.invalidation_nonce = new $util.LongBits(object.invalidation_nonce.low >>> 0, object.invalidation_nonce.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a QueryLogicConfirmsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @static
             * @param {gravity.v1.QueryLogicConfirmsRequest} message QueryLogicConfirmsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLogicConfirmsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.invalidation_id = "";
                    else {
                        object.invalidation_id = [];
                        if (options.bytes !== Array)
                            object.invalidation_id = $util.newBuffer(object.invalidation_id);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.invalidation_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.invalidation_nonce = options.longs === String ? "0" : 0;
                }
                if (message.invalidation_id != null && message.hasOwnProperty("invalidation_id"))
                    object.invalidation_id = options.bytes === String ? $util.base64.encode(message.invalidation_id, 0, message.invalidation_id.length) : options.bytes === Array ? Array.prototype.slice.call(message.invalidation_id) : message.invalidation_id;
                if (message.invalidation_nonce != null && message.hasOwnProperty("invalidation_nonce"))
                    if (typeof message.invalidation_nonce === "number")
                        object.invalidation_nonce = options.longs === String ? String(message.invalidation_nonce) : message.invalidation_nonce;
                    else
                        object.invalidation_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.invalidation_nonce) : options.longs === Number ? new $util.LongBits(message.invalidation_nonce.low >>> 0, message.invalidation_nonce.high >>> 0).toNumber(true) : message.invalidation_nonce;
                return object;
            };

            /**
             * Converts this QueryLogicConfirmsRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLogicConfirmsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLogicConfirmsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLogicConfirmsRequest;
        })();

        v1.QueryLogicConfirmsResponse = (function() {

            /**
             * Properties of a QueryLogicConfirmsResponse.
             * @memberof gravity.v1
             * @interface IQueryLogicConfirmsResponse
             * @property {Array.<gravity.v1.IMsgConfirmLogicCall>|null} [confirms] QueryLogicConfirmsResponse confirms
             */

            /**
             * Constructs a new QueryLogicConfirmsResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLogicConfirmsResponse.
             * @implements IQueryLogicConfirmsResponse
             * @constructor
             * @param {gravity.v1.IQueryLogicConfirmsResponse=} [properties] Properties to set
             */
            function QueryLogicConfirmsResponse(properties) {
                this.confirms = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLogicConfirmsResponse confirms.
             * @member {Array.<gravity.v1.IMsgConfirmLogicCall>} confirms
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @instance
             */
            QueryLogicConfirmsResponse.prototype.confirms = $util.emptyArray;

            /**
             * Encodes the specified QueryLogicConfirmsResponse message. Does not implicitly {@link gravity.v1.QueryLogicConfirmsResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @static
             * @param {gravity.v1.IQueryLogicConfirmsResponse} message QueryLogicConfirmsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLogicConfirmsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.confirms != null && message.confirms.length)
                    for (let i = 0; i < message.confirms.length; ++i)
                        $root.gravity.v1.MsgConfirmLogicCall.encode(message.confirms[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryLogicConfirmsResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryLogicConfirmsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @static
             * @param {gravity.v1.IQueryLogicConfirmsResponse} message QueryLogicConfirmsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLogicConfirmsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLogicConfirmsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLogicConfirmsResponse} QueryLogicConfirmsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLogicConfirmsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLogicConfirmsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.confirms && message.confirms.length))
                            message.confirms = [];
                        message.confirms.push($root.gravity.v1.MsgConfirmLogicCall.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLogicConfirmsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLogicConfirmsResponse} QueryLogicConfirmsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLogicConfirmsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLogicConfirmsResponse message.
             * @function verify
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLogicConfirmsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.confirms != null && message.hasOwnProperty("confirms")) {
                    if (!Array.isArray(message.confirms))
                        return "confirms: array expected";
                    for (let i = 0; i < message.confirms.length; ++i) {
                        let error = $root.gravity.v1.MsgConfirmLogicCall.verify(message.confirms[i]);
                        if (error)
                            return "confirms." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryLogicConfirmsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLogicConfirmsResponse} QueryLogicConfirmsResponse
             */
            QueryLogicConfirmsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLogicConfirmsResponse)
                    return object;
                let message = new $root.gravity.v1.QueryLogicConfirmsResponse();
                if (object.confirms) {
                    if (!Array.isArray(object.confirms))
                        throw TypeError(".gravity.v1.QueryLogicConfirmsResponse.confirms: array expected");
                    message.confirms = [];
                    for (let i = 0; i < object.confirms.length; ++i) {
                        if (typeof object.confirms[i] !== "object")
                            throw TypeError(".gravity.v1.QueryLogicConfirmsResponse.confirms: object expected");
                        message.confirms[i] = $root.gravity.v1.MsgConfirmLogicCall.fromObject(object.confirms[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryLogicConfirmsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @static
             * @param {gravity.v1.QueryLogicConfirmsResponse} message QueryLogicConfirmsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLogicConfirmsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.confirms = [];
                if (message.confirms && message.confirms.length) {
                    object.confirms = [];
                    for (let j = 0; j < message.confirms.length; ++j)
                        object.confirms[j] = $root.gravity.v1.MsgConfirmLogicCall.toObject(message.confirms[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryLogicConfirmsResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLogicConfirmsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLogicConfirmsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLogicConfirmsResponse;
        })();

        v1.QueryLastEventNonceByAddrRequest = (function() {

            /**
             * Properties of a QueryLastEventNonceByAddrRequest.
             * @memberof gravity.v1
             * @interface IQueryLastEventNonceByAddrRequest
             * @property {string|null} [address] QueryLastEventNonceByAddrRequest address
             */

            /**
             * Constructs a new QueryLastEventNonceByAddrRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastEventNonceByAddrRequest.
             * @implements IQueryLastEventNonceByAddrRequest
             * @constructor
             * @param {gravity.v1.IQueryLastEventNonceByAddrRequest=} [properties] Properties to set
             */
            function QueryLastEventNonceByAddrRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastEventNonceByAddrRequest address.
             * @member {string} address
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @instance
             */
            QueryLastEventNonceByAddrRequest.prototype.address = "";

            /**
             * Encodes the specified QueryLastEventNonceByAddrRequest message. Does not implicitly {@link gravity.v1.QueryLastEventNonceByAddrRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @static
             * @param {gravity.v1.IQueryLastEventNonceByAddrRequest} message QueryLastEventNonceByAddrRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastEventNonceByAddrRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                return writer;
            };

            /**
             * Encodes the specified QueryLastEventNonceByAddrRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryLastEventNonceByAddrRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @static
             * @param {gravity.v1.IQueryLastEventNonceByAddrRequest} message QueryLastEventNonceByAddrRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastEventNonceByAddrRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastEventNonceByAddrRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastEventNonceByAddrRequest} QueryLastEventNonceByAddrRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastEventNonceByAddrRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastEventNonceByAddrRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastEventNonceByAddrRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastEventNonceByAddrRequest} QueryLastEventNonceByAddrRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastEventNonceByAddrRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastEventNonceByAddrRequest message.
             * @function verify
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastEventNonceByAddrRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                return null;
            };

            /**
             * Creates a QueryLastEventNonceByAddrRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastEventNonceByAddrRequest} QueryLastEventNonceByAddrRequest
             */
            QueryLastEventNonceByAddrRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastEventNonceByAddrRequest)
                    return object;
                let message = new $root.gravity.v1.QueryLastEventNonceByAddrRequest();
                if (object.address != null)
                    message.address = String(object.address);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastEventNonceByAddrRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @static
             * @param {gravity.v1.QueryLastEventNonceByAddrRequest} message QueryLastEventNonceByAddrRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastEventNonceByAddrRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.address = "";
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                return object;
            };

            /**
             * Converts this QueryLastEventNonceByAddrRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastEventNonceByAddrRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastEventNonceByAddrRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastEventNonceByAddrRequest;
        })();

        v1.QueryLastEventNonceByAddrResponse = (function() {

            /**
             * Properties of a QueryLastEventNonceByAddrResponse.
             * @memberof gravity.v1
             * @interface IQueryLastEventNonceByAddrResponse
             * @property {number|null} [event_nonce] QueryLastEventNonceByAddrResponse event_nonce
             */

            /**
             * Constructs a new QueryLastEventNonceByAddrResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastEventNonceByAddrResponse.
             * @implements IQueryLastEventNonceByAddrResponse
             * @constructor
             * @param {gravity.v1.IQueryLastEventNonceByAddrResponse=} [properties] Properties to set
             */
            function QueryLastEventNonceByAddrResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastEventNonceByAddrResponse event_nonce.
             * @member {number} event_nonce
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @instance
             */
            QueryLastEventNonceByAddrResponse.prototype.event_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified QueryLastEventNonceByAddrResponse message. Does not implicitly {@link gravity.v1.QueryLastEventNonceByAddrResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @static
             * @param {gravity.v1.IQueryLastEventNonceByAddrResponse} message QueryLastEventNonceByAddrResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastEventNonceByAddrResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.event_nonce != null && Object.hasOwnProperty.call(message, "event_nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.event_nonce);
                return writer;
            };

            /**
             * Encodes the specified QueryLastEventNonceByAddrResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryLastEventNonceByAddrResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @static
             * @param {gravity.v1.IQueryLastEventNonceByAddrResponse} message QueryLastEventNonceByAddrResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastEventNonceByAddrResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastEventNonceByAddrResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastEventNonceByAddrResponse} QueryLastEventNonceByAddrResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastEventNonceByAddrResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastEventNonceByAddrResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.event_nonce = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastEventNonceByAddrResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastEventNonceByAddrResponse} QueryLastEventNonceByAddrResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastEventNonceByAddrResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastEventNonceByAddrResponse message.
             * @function verify
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastEventNonceByAddrResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (!$util.isInteger(message.event_nonce) && !(message.event_nonce && $util.isInteger(message.event_nonce.low) && $util.isInteger(message.event_nonce.high)))
                        return "event_nonce: integer|Long expected";
                return null;
            };

            /**
             * Creates a QueryLastEventNonceByAddrResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastEventNonceByAddrResponse} QueryLastEventNonceByAddrResponse
             */
            QueryLastEventNonceByAddrResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastEventNonceByAddrResponse)
                    return object;
                let message = new $root.gravity.v1.QueryLastEventNonceByAddrResponse();
                if (object.event_nonce != null)
                    if ($util.Long)
                        (message.event_nonce = $util.Long.fromValue(object.event_nonce)).unsigned = true;
                    else if (typeof object.event_nonce === "string")
                        message.event_nonce = parseInt(object.event_nonce, 10);
                    else if (typeof object.event_nonce === "number")
                        message.event_nonce = object.event_nonce;
                    else if (typeof object.event_nonce === "object")
                        message.event_nonce = new $util.LongBits(object.event_nonce.low >>> 0, object.event_nonce.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastEventNonceByAddrResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @static
             * @param {gravity.v1.QueryLastEventNonceByAddrResponse} message QueryLastEventNonceByAddrResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastEventNonceByAddrResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.event_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.event_nonce = options.longs === String ? "0" : 0;
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (typeof message.event_nonce === "number")
                        object.event_nonce = options.longs === String ? String(message.event_nonce) : message.event_nonce;
                    else
                        object.event_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.event_nonce) : options.longs === Number ? new $util.LongBits(message.event_nonce.low >>> 0, message.event_nonce.high >>> 0).toNumber(true) : message.event_nonce;
                return object;
            };

            /**
             * Converts this QueryLastEventNonceByAddrResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastEventNonceByAddrResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastEventNonceByAddrResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastEventNonceByAddrResponse;
        })();

        v1.QueryERC20ToDenomRequest = (function() {

            /**
             * Properties of a QueryERC20ToDenomRequest.
             * @memberof gravity.v1
             * @interface IQueryERC20ToDenomRequest
             * @property {string|null} [erc20] QueryERC20ToDenomRequest erc20
             */

            /**
             * Constructs a new QueryERC20ToDenomRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryERC20ToDenomRequest.
             * @implements IQueryERC20ToDenomRequest
             * @constructor
             * @param {gravity.v1.IQueryERC20ToDenomRequest=} [properties] Properties to set
             */
            function QueryERC20ToDenomRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryERC20ToDenomRequest erc20.
             * @member {string} erc20
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @instance
             */
            QueryERC20ToDenomRequest.prototype.erc20 = "";

            /**
             * Encodes the specified QueryERC20ToDenomRequest message. Does not implicitly {@link gravity.v1.QueryERC20ToDenomRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @static
             * @param {gravity.v1.IQueryERC20ToDenomRequest} message QueryERC20ToDenomRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryERC20ToDenomRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.erc20 != null && Object.hasOwnProperty.call(message, "erc20"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.erc20);
                return writer;
            };

            /**
             * Encodes the specified QueryERC20ToDenomRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryERC20ToDenomRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @static
             * @param {gravity.v1.IQueryERC20ToDenomRequest} message QueryERC20ToDenomRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryERC20ToDenomRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryERC20ToDenomRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryERC20ToDenomRequest} QueryERC20ToDenomRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryERC20ToDenomRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryERC20ToDenomRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.erc20 = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryERC20ToDenomRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryERC20ToDenomRequest} QueryERC20ToDenomRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryERC20ToDenomRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryERC20ToDenomRequest message.
             * @function verify
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryERC20ToDenomRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.erc20 != null && message.hasOwnProperty("erc20"))
                    if (!$util.isString(message.erc20))
                        return "erc20: string expected";
                return null;
            };

            /**
             * Creates a QueryERC20ToDenomRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryERC20ToDenomRequest} QueryERC20ToDenomRequest
             */
            QueryERC20ToDenomRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryERC20ToDenomRequest)
                    return object;
                let message = new $root.gravity.v1.QueryERC20ToDenomRequest();
                if (object.erc20 != null)
                    message.erc20 = String(object.erc20);
                return message;
            };

            /**
             * Creates a plain object from a QueryERC20ToDenomRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @static
             * @param {gravity.v1.QueryERC20ToDenomRequest} message QueryERC20ToDenomRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryERC20ToDenomRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.erc20 = "";
                if (message.erc20 != null && message.hasOwnProperty("erc20"))
                    object.erc20 = message.erc20;
                return object;
            };

            /**
             * Converts this QueryERC20ToDenomRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryERC20ToDenomRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryERC20ToDenomRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryERC20ToDenomRequest;
        })();

        v1.QueryERC20ToDenomResponse = (function() {

            /**
             * Properties of a QueryERC20ToDenomResponse.
             * @memberof gravity.v1
             * @interface IQueryERC20ToDenomResponse
             * @property {string|null} [denom] QueryERC20ToDenomResponse denom
             * @property {boolean|null} [cosmos_originated] QueryERC20ToDenomResponse cosmos_originated
             */

            /**
             * Constructs a new QueryERC20ToDenomResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryERC20ToDenomResponse.
             * @implements IQueryERC20ToDenomResponse
             * @constructor
             * @param {gravity.v1.IQueryERC20ToDenomResponse=} [properties] Properties to set
             */
            function QueryERC20ToDenomResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryERC20ToDenomResponse denom.
             * @member {string} denom
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @instance
             */
            QueryERC20ToDenomResponse.prototype.denom = "";

            /**
             * QueryERC20ToDenomResponse cosmos_originated.
             * @member {boolean} cosmos_originated
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @instance
             */
            QueryERC20ToDenomResponse.prototype.cosmos_originated = false;

            /**
             * Encodes the specified QueryERC20ToDenomResponse message. Does not implicitly {@link gravity.v1.QueryERC20ToDenomResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @static
             * @param {gravity.v1.IQueryERC20ToDenomResponse} message QueryERC20ToDenomResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryERC20ToDenomResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                if (message.cosmos_originated != null && Object.hasOwnProperty.call(message, "cosmos_originated"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.cosmos_originated);
                return writer;
            };

            /**
             * Encodes the specified QueryERC20ToDenomResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryERC20ToDenomResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @static
             * @param {gravity.v1.IQueryERC20ToDenomResponse} message QueryERC20ToDenomResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryERC20ToDenomResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryERC20ToDenomResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryERC20ToDenomResponse} QueryERC20ToDenomResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryERC20ToDenomResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryERC20ToDenomResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.denom = reader.string();
                        break;
                    case 2:
                        message.cosmos_originated = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryERC20ToDenomResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryERC20ToDenomResponse} QueryERC20ToDenomResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryERC20ToDenomResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryERC20ToDenomResponse message.
             * @function verify
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryERC20ToDenomResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.denom != null && message.hasOwnProperty("denom"))
                    if (!$util.isString(message.denom))
                        return "denom: string expected";
                if (message.cosmos_originated != null && message.hasOwnProperty("cosmos_originated"))
                    if (typeof message.cosmos_originated !== "boolean")
                        return "cosmos_originated: boolean expected";
                return null;
            };

            /**
             * Creates a QueryERC20ToDenomResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryERC20ToDenomResponse} QueryERC20ToDenomResponse
             */
            QueryERC20ToDenomResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryERC20ToDenomResponse)
                    return object;
                let message = new $root.gravity.v1.QueryERC20ToDenomResponse();
                if (object.denom != null)
                    message.denom = String(object.denom);
                if (object.cosmos_originated != null)
                    message.cosmos_originated = Boolean(object.cosmos_originated);
                return message;
            };

            /**
             * Creates a plain object from a QueryERC20ToDenomResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @static
             * @param {gravity.v1.QueryERC20ToDenomResponse} message QueryERC20ToDenomResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryERC20ToDenomResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.denom = "";
                    object.cosmos_originated = false;
                }
                if (message.denom != null && message.hasOwnProperty("denom"))
                    object.denom = message.denom;
                if (message.cosmos_originated != null && message.hasOwnProperty("cosmos_originated"))
                    object.cosmos_originated = message.cosmos_originated;
                return object;
            };

            /**
             * Converts this QueryERC20ToDenomResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryERC20ToDenomResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryERC20ToDenomResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryERC20ToDenomResponse;
        })();

        v1.QueryDenomToERC20Request = (function() {

            /**
             * Properties of a QueryDenomToERC20Request.
             * @memberof gravity.v1
             * @interface IQueryDenomToERC20Request
             * @property {string|null} [denom] QueryDenomToERC20Request denom
             */

            /**
             * Constructs a new QueryDenomToERC20Request.
             * @memberof gravity.v1
             * @classdesc Represents a QueryDenomToERC20Request.
             * @implements IQueryDenomToERC20Request
             * @constructor
             * @param {gravity.v1.IQueryDenomToERC20Request=} [properties] Properties to set
             */
            function QueryDenomToERC20Request(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryDenomToERC20Request denom.
             * @member {string} denom
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @instance
             */
            QueryDenomToERC20Request.prototype.denom = "";

            /**
             * Encodes the specified QueryDenomToERC20Request message. Does not implicitly {@link gravity.v1.QueryDenomToERC20Request.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @static
             * @param {gravity.v1.IQueryDenomToERC20Request} message QueryDenomToERC20Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDenomToERC20Request.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                return writer;
            };

            /**
             * Encodes the specified QueryDenomToERC20Request message, length delimited. Does not implicitly {@link gravity.v1.QueryDenomToERC20Request.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @static
             * @param {gravity.v1.IQueryDenomToERC20Request} message QueryDenomToERC20Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDenomToERC20Request.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryDenomToERC20Request message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryDenomToERC20Request} QueryDenomToERC20Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDenomToERC20Request.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryDenomToERC20Request();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.denom = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryDenomToERC20Request message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryDenomToERC20Request} QueryDenomToERC20Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDenomToERC20Request.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryDenomToERC20Request message.
             * @function verify
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryDenomToERC20Request.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.denom != null && message.hasOwnProperty("denom"))
                    if (!$util.isString(message.denom))
                        return "denom: string expected";
                return null;
            };

            /**
             * Creates a QueryDenomToERC20Request message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryDenomToERC20Request} QueryDenomToERC20Request
             */
            QueryDenomToERC20Request.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryDenomToERC20Request)
                    return object;
                let message = new $root.gravity.v1.QueryDenomToERC20Request();
                if (object.denom != null)
                    message.denom = String(object.denom);
                return message;
            };

            /**
             * Creates a plain object from a QueryDenomToERC20Request message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @static
             * @param {gravity.v1.QueryDenomToERC20Request} message QueryDenomToERC20Request
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryDenomToERC20Request.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.denom = "";
                if (message.denom != null && message.hasOwnProperty("denom"))
                    object.denom = message.denom;
                return object;
            };

            /**
             * Converts this QueryDenomToERC20Request to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryDenomToERC20Request
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryDenomToERC20Request.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryDenomToERC20Request;
        })();

        v1.QueryDenomToERC20Response = (function() {

            /**
             * Properties of a QueryDenomToERC20Response.
             * @memberof gravity.v1
             * @interface IQueryDenomToERC20Response
             * @property {string|null} [erc20] QueryDenomToERC20Response erc20
             * @property {boolean|null} [cosmos_originated] QueryDenomToERC20Response cosmos_originated
             */

            /**
             * Constructs a new QueryDenomToERC20Response.
             * @memberof gravity.v1
             * @classdesc Represents a QueryDenomToERC20Response.
             * @implements IQueryDenomToERC20Response
             * @constructor
             * @param {gravity.v1.IQueryDenomToERC20Response=} [properties] Properties to set
             */
            function QueryDenomToERC20Response(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryDenomToERC20Response erc20.
             * @member {string} erc20
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @instance
             */
            QueryDenomToERC20Response.prototype.erc20 = "";

            /**
             * QueryDenomToERC20Response cosmos_originated.
             * @member {boolean} cosmos_originated
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @instance
             */
            QueryDenomToERC20Response.prototype.cosmos_originated = false;

            /**
             * Encodes the specified QueryDenomToERC20Response message. Does not implicitly {@link gravity.v1.QueryDenomToERC20Response.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @static
             * @param {gravity.v1.IQueryDenomToERC20Response} message QueryDenomToERC20Response message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDenomToERC20Response.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.erc20 != null && Object.hasOwnProperty.call(message, "erc20"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.erc20);
                if (message.cosmos_originated != null && Object.hasOwnProperty.call(message, "cosmos_originated"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.cosmos_originated);
                return writer;
            };

            /**
             * Encodes the specified QueryDenomToERC20Response message, length delimited. Does not implicitly {@link gravity.v1.QueryDenomToERC20Response.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @static
             * @param {gravity.v1.IQueryDenomToERC20Response} message QueryDenomToERC20Response message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDenomToERC20Response.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryDenomToERC20Response message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryDenomToERC20Response} QueryDenomToERC20Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDenomToERC20Response.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryDenomToERC20Response();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.erc20 = reader.string();
                        break;
                    case 2:
                        message.cosmos_originated = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryDenomToERC20Response message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryDenomToERC20Response} QueryDenomToERC20Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDenomToERC20Response.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryDenomToERC20Response message.
             * @function verify
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryDenomToERC20Response.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.erc20 != null && message.hasOwnProperty("erc20"))
                    if (!$util.isString(message.erc20))
                        return "erc20: string expected";
                if (message.cosmos_originated != null && message.hasOwnProperty("cosmos_originated"))
                    if (typeof message.cosmos_originated !== "boolean")
                        return "cosmos_originated: boolean expected";
                return null;
            };

            /**
             * Creates a QueryDenomToERC20Response message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryDenomToERC20Response} QueryDenomToERC20Response
             */
            QueryDenomToERC20Response.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryDenomToERC20Response)
                    return object;
                let message = new $root.gravity.v1.QueryDenomToERC20Response();
                if (object.erc20 != null)
                    message.erc20 = String(object.erc20);
                if (object.cosmos_originated != null)
                    message.cosmos_originated = Boolean(object.cosmos_originated);
                return message;
            };

            /**
             * Creates a plain object from a QueryDenomToERC20Response message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @static
             * @param {gravity.v1.QueryDenomToERC20Response} message QueryDenomToERC20Response
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryDenomToERC20Response.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.erc20 = "";
                    object.cosmos_originated = false;
                }
                if (message.erc20 != null && message.hasOwnProperty("erc20"))
                    object.erc20 = message.erc20;
                if (message.cosmos_originated != null && message.hasOwnProperty("cosmos_originated"))
                    object.cosmos_originated = message.cosmos_originated;
                return object;
            };

            /**
             * Converts this QueryDenomToERC20Response to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryDenomToERC20Response
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryDenomToERC20Response.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryDenomToERC20Response;
        })();

        v1.QueryLastObservedEthBlockRequest = (function() {

            /**
             * Properties of a QueryLastObservedEthBlockRequest.
             * @memberof gravity.v1
             * @interface IQueryLastObservedEthBlockRequest
             * @property {boolean|null} [use_v1_key] QueryLastObservedEthBlockRequest use_v1_key
             */

            /**
             * Constructs a new QueryLastObservedEthBlockRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastObservedEthBlockRequest.
             * @implements IQueryLastObservedEthBlockRequest
             * @constructor
             * @param {gravity.v1.IQueryLastObservedEthBlockRequest=} [properties] Properties to set
             */
            function QueryLastObservedEthBlockRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastObservedEthBlockRequest use_v1_key.
             * @member {boolean} use_v1_key
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @instance
             */
            QueryLastObservedEthBlockRequest.prototype.use_v1_key = false;

            /**
             * Encodes the specified QueryLastObservedEthBlockRequest message. Does not implicitly {@link gravity.v1.QueryLastObservedEthBlockRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @static
             * @param {gravity.v1.IQueryLastObservedEthBlockRequest} message QueryLastObservedEthBlockRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastObservedEthBlockRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.use_v1_key != null && Object.hasOwnProperty.call(message, "use_v1_key"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.use_v1_key);
                return writer;
            };

            /**
             * Encodes the specified QueryLastObservedEthBlockRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryLastObservedEthBlockRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @static
             * @param {gravity.v1.IQueryLastObservedEthBlockRequest} message QueryLastObservedEthBlockRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastObservedEthBlockRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastObservedEthBlockRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastObservedEthBlockRequest} QueryLastObservedEthBlockRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastObservedEthBlockRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastObservedEthBlockRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.use_v1_key = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastObservedEthBlockRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastObservedEthBlockRequest} QueryLastObservedEthBlockRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastObservedEthBlockRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastObservedEthBlockRequest message.
             * @function verify
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastObservedEthBlockRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.use_v1_key != null && message.hasOwnProperty("use_v1_key"))
                    if (typeof message.use_v1_key !== "boolean")
                        return "use_v1_key: boolean expected";
                return null;
            };

            /**
             * Creates a QueryLastObservedEthBlockRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastObservedEthBlockRequest} QueryLastObservedEthBlockRequest
             */
            QueryLastObservedEthBlockRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastObservedEthBlockRequest)
                    return object;
                let message = new $root.gravity.v1.QueryLastObservedEthBlockRequest();
                if (object.use_v1_key != null)
                    message.use_v1_key = Boolean(object.use_v1_key);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastObservedEthBlockRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @static
             * @param {gravity.v1.QueryLastObservedEthBlockRequest} message QueryLastObservedEthBlockRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastObservedEthBlockRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.use_v1_key = false;
                if (message.use_v1_key != null && message.hasOwnProperty("use_v1_key"))
                    object.use_v1_key = message.use_v1_key;
                return object;
            };

            /**
             * Converts this QueryLastObservedEthBlockRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastObservedEthBlockRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastObservedEthBlockRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastObservedEthBlockRequest;
        })();

        v1.QueryLastObservedEthBlockResponse = (function() {

            /**
             * Properties of a QueryLastObservedEthBlockResponse.
             * @memberof gravity.v1
             * @interface IQueryLastObservedEthBlockResponse
             * @property {number|null} [block] QueryLastObservedEthBlockResponse block
             */

            /**
             * Constructs a new QueryLastObservedEthBlockResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastObservedEthBlockResponse.
             * @implements IQueryLastObservedEthBlockResponse
             * @constructor
             * @param {gravity.v1.IQueryLastObservedEthBlockResponse=} [properties] Properties to set
             */
            function QueryLastObservedEthBlockResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastObservedEthBlockResponse block.
             * @member {number} block
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @instance
             */
            QueryLastObservedEthBlockResponse.prototype.block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified QueryLastObservedEthBlockResponse message. Does not implicitly {@link gravity.v1.QueryLastObservedEthBlockResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @static
             * @param {gravity.v1.IQueryLastObservedEthBlockResponse} message QueryLastObservedEthBlockResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastObservedEthBlockResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.block);
                return writer;
            };

            /**
             * Encodes the specified QueryLastObservedEthBlockResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryLastObservedEthBlockResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @static
             * @param {gravity.v1.IQueryLastObservedEthBlockResponse} message QueryLastObservedEthBlockResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastObservedEthBlockResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastObservedEthBlockResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastObservedEthBlockResponse} QueryLastObservedEthBlockResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastObservedEthBlockResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastObservedEthBlockResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastObservedEthBlockResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastObservedEthBlockResponse} QueryLastObservedEthBlockResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastObservedEthBlockResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastObservedEthBlockResponse message.
             * @function verify
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastObservedEthBlockResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block"))
                    if (!$util.isInteger(message.block) && !(message.block && $util.isInteger(message.block.low) && $util.isInteger(message.block.high)))
                        return "block: integer|Long expected";
                return null;
            };

            /**
             * Creates a QueryLastObservedEthBlockResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastObservedEthBlockResponse} QueryLastObservedEthBlockResponse
             */
            QueryLastObservedEthBlockResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastObservedEthBlockResponse)
                    return object;
                let message = new $root.gravity.v1.QueryLastObservedEthBlockResponse();
                if (object.block != null)
                    if ($util.Long)
                        (message.block = $util.Long.fromValue(object.block)).unsigned = true;
                    else if (typeof object.block === "string")
                        message.block = parseInt(object.block, 10);
                    else if (typeof object.block === "number")
                        message.block = object.block;
                    else if (typeof object.block === "object")
                        message.block = new $util.LongBits(object.block.low >>> 0, object.block.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastObservedEthBlockResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @static
             * @param {gravity.v1.QueryLastObservedEthBlockResponse} message QueryLastObservedEthBlockResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastObservedEthBlockResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block = options.longs === String ? "0" : 0;
                if (message.block != null && message.hasOwnProperty("block"))
                    if (typeof message.block === "number")
                        object.block = options.longs === String ? String(message.block) : message.block;
                    else
                        object.block = options.longs === String ? $util.Long.prototype.toString.call(message.block) : options.longs === Number ? new $util.LongBits(message.block.low >>> 0, message.block.high >>> 0).toNumber(true) : message.block;
                return object;
            };

            /**
             * Converts this QueryLastObservedEthBlockResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastObservedEthBlockResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastObservedEthBlockResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastObservedEthBlockResponse;
        })();

        v1.QueryLastObservedEthNonceRequest = (function() {

            /**
             * Properties of a QueryLastObservedEthNonceRequest.
             * @memberof gravity.v1
             * @interface IQueryLastObservedEthNonceRequest
             * @property {boolean|null} [use_v1_key] QueryLastObservedEthNonceRequest use_v1_key
             */

            /**
             * Constructs a new QueryLastObservedEthNonceRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastObservedEthNonceRequest.
             * @implements IQueryLastObservedEthNonceRequest
             * @constructor
             * @param {gravity.v1.IQueryLastObservedEthNonceRequest=} [properties] Properties to set
             */
            function QueryLastObservedEthNonceRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastObservedEthNonceRequest use_v1_key.
             * @member {boolean} use_v1_key
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @instance
             */
            QueryLastObservedEthNonceRequest.prototype.use_v1_key = false;

            /**
             * Encodes the specified QueryLastObservedEthNonceRequest message. Does not implicitly {@link gravity.v1.QueryLastObservedEthNonceRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @static
             * @param {gravity.v1.IQueryLastObservedEthNonceRequest} message QueryLastObservedEthNonceRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastObservedEthNonceRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.use_v1_key != null && Object.hasOwnProperty.call(message, "use_v1_key"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.use_v1_key);
                return writer;
            };

            /**
             * Encodes the specified QueryLastObservedEthNonceRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryLastObservedEthNonceRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @static
             * @param {gravity.v1.IQueryLastObservedEthNonceRequest} message QueryLastObservedEthNonceRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastObservedEthNonceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastObservedEthNonceRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastObservedEthNonceRequest} QueryLastObservedEthNonceRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastObservedEthNonceRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastObservedEthNonceRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.use_v1_key = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastObservedEthNonceRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastObservedEthNonceRequest} QueryLastObservedEthNonceRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastObservedEthNonceRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastObservedEthNonceRequest message.
             * @function verify
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastObservedEthNonceRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.use_v1_key != null && message.hasOwnProperty("use_v1_key"))
                    if (typeof message.use_v1_key !== "boolean")
                        return "use_v1_key: boolean expected";
                return null;
            };

            /**
             * Creates a QueryLastObservedEthNonceRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastObservedEthNonceRequest} QueryLastObservedEthNonceRequest
             */
            QueryLastObservedEthNonceRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastObservedEthNonceRequest)
                    return object;
                let message = new $root.gravity.v1.QueryLastObservedEthNonceRequest();
                if (object.use_v1_key != null)
                    message.use_v1_key = Boolean(object.use_v1_key);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastObservedEthNonceRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @static
             * @param {gravity.v1.QueryLastObservedEthNonceRequest} message QueryLastObservedEthNonceRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastObservedEthNonceRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.use_v1_key = false;
                if (message.use_v1_key != null && message.hasOwnProperty("use_v1_key"))
                    object.use_v1_key = message.use_v1_key;
                return object;
            };

            /**
             * Converts this QueryLastObservedEthNonceRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastObservedEthNonceRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastObservedEthNonceRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastObservedEthNonceRequest;
        })();

        v1.QueryLastObservedEthNonceResponse = (function() {

            /**
             * Properties of a QueryLastObservedEthNonceResponse.
             * @memberof gravity.v1
             * @interface IQueryLastObservedEthNonceResponse
             * @property {number|null} [nonce] QueryLastObservedEthNonceResponse nonce
             */

            /**
             * Constructs a new QueryLastObservedEthNonceResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryLastObservedEthNonceResponse.
             * @implements IQueryLastObservedEthNonceResponse
             * @constructor
             * @param {gravity.v1.IQueryLastObservedEthNonceResponse=} [properties] Properties to set
             */
            function QueryLastObservedEthNonceResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryLastObservedEthNonceResponse nonce.
             * @member {number} nonce
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @instance
             */
            QueryLastObservedEthNonceResponse.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified QueryLastObservedEthNonceResponse message. Does not implicitly {@link gravity.v1.QueryLastObservedEthNonceResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @static
             * @param {gravity.v1.IQueryLastObservedEthNonceResponse} message QueryLastObservedEthNonceResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastObservedEthNonceResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified QueryLastObservedEthNonceResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryLastObservedEthNonceResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @static
             * @param {gravity.v1.IQueryLastObservedEthNonceResponse} message QueryLastObservedEthNonceResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryLastObservedEthNonceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryLastObservedEthNonceResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryLastObservedEthNonceResponse} QueryLastObservedEthNonceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastObservedEthNonceResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryLastObservedEthNonceResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryLastObservedEthNonceResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryLastObservedEthNonceResponse} QueryLastObservedEthNonceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryLastObservedEthNonceResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryLastObservedEthNonceResponse message.
             * @function verify
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryLastObservedEthNonceResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                return null;
            };

            /**
             * Creates a QueryLastObservedEthNonceResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryLastObservedEthNonceResponse} QueryLastObservedEthNonceResponse
             */
            QueryLastObservedEthNonceResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryLastObservedEthNonceResponse)
                    return object;
                let message = new $root.gravity.v1.QueryLastObservedEthNonceResponse();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a QueryLastObservedEthNonceResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @static
             * @param {gravity.v1.QueryLastObservedEthNonceResponse} message QueryLastObservedEthNonceResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryLastObservedEthNonceResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                return object;
            };

            /**
             * Converts this QueryLastObservedEthNonceResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryLastObservedEthNonceResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryLastObservedEthNonceResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryLastObservedEthNonceResponse;
        })();

        v1.QueryAttestationsRequest = (function() {

            /**
             * Properties of a QueryAttestationsRequest.
             * @memberof gravity.v1
             * @interface IQueryAttestationsRequest
             * @property {number|null} [limit] QueryAttestationsRequest limit
             * @property {string|null} [order_by] QueryAttestationsRequest order_by
             * @property {string|null} [claim_type] QueryAttestationsRequest claim_type
             * @property {number|null} [nonce] QueryAttestationsRequest nonce
             * @property {number|null} [height] QueryAttestationsRequest height
             * @property {boolean|null} [use_v1_key] QueryAttestationsRequest use_v1_key
             */

            /**
             * Constructs a new QueryAttestationsRequest.
             * @memberof gravity.v1
             * @classdesc Represents a QueryAttestationsRequest.
             * @implements IQueryAttestationsRequest
             * @constructor
             * @param {gravity.v1.IQueryAttestationsRequest=} [properties] Properties to set
             */
            function QueryAttestationsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryAttestationsRequest limit.
             * @member {number} limit
             * @memberof gravity.v1.QueryAttestationsRequest
             * @instance
             */
            QueryAttestationsRequest.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * QueryAttestationsRequest order_by.
             * @member {string} order_by
             * @memberof gravity.v1.QueryAttestationsRequest
             * @instance
             */
            QueryAttestationsRequest.prototype.order_by = "";

            /**
             * QueryAttestationsRequest claim_type.
             * @member {string} claim_type
             * @memberof gravity.v1.QueryAttestationsRequest
             * @instance
             */
            QueryAttestationsRequest.prototype.claim_type = "";

            /**
             * QueryAttestationsRequest nonce.
             * @member {number} nonce
             * @memberof gravity.v1.QueryAttestationsRequest
             * @instance
             */
            QueryAttestationsRequest.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * QueryAttestationsRequest height.
             * @member {number} height
             * @memberof gravity.v1.QueryAttestationsRequest
             * @instance
             */
            QueryAttestationsRequest.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * QueryAttestationsRequest use_v1_key.
             * @member {boolean} use_v1_key
             * @memberof gravity.v1.QueryAttestationsRequest
             * @instance
             */
            QueryAttestationsRequest.prototype.use_v1_key = false;

            /**
             * Encodes the specified QueryAttestationsRequest message. Does not implicitly {@link gravity.v1.QueryAttestationsRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryAttestationsRequest
             * @static
             * @param {gravity.v1.IQueryAttestationsRequest} message QueryAttestationsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryAttestationsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.limit);
                if (message.order_by != null && Object.hasOwnProperty.call(message, "order_by"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.order_by);
                if (message.claim_type != null && Object.hasOwnProperty.call(message, "claim_type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.claim_type);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.nonce);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.height);
                if (message.use_v1_key != null && Object.hasOwnProperty.call(message, "use_v1_key"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.use_v1_key);
                return writer;
            };

            /**
             * Encodes the specified QueryAttestationsRequest message, length delimited. Does not implicitly {@link gravity.v1.QueryAttestationsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryAttestationsRequest
             * @static
             * @param {gravity.v1.IQueryAttestationsRequest} message QueryAttestationsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryAttestationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryAttestationsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryAttestationsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryAttestationsRequest} QueryAttestationsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryAttestationsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryAttestationsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.limit = reader.uint64();
                        break;
                    case 2:
                        message.order_by = reader.string();
                        break;
                    case 3:
                        message.claim_type = reader.string();
                        break;
                    case 4:
                        message.nonce = reader.uint64();
                        break;
                    case 5:
                        message.height = reader.uint64();
                        break;
                    case 6:
                        message.use_v1_key = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryAttestationsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryAttestationsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryAttestationsRequest} QueryAttestationsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryAttestationsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryAttestationsRequest message.
             * @function verify
             * @memberof gravity.v1.QueryAttestationsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryAttestationsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.limit != null && message.hasOwnProperty("limit"))
                    if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                        return "limit: integer|Long expected";
                if (message.order_by != null && message.hasOwnProperty("order_by"))
                    if (!$util.isString(message.order_by))
                        return "order_by: string expected";
                if (message.claim_type != null && message.hasOwnProperty("claim_type"))
                    if (!$util.isString(message.claim_type))
                        return "claim_type: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.use_v1_key != null && message.hasOwnProperty("use_v1_key"))
                    if (typeof message.use_v1_key !== "boolean")
                        return "use_v1_key: boolean expected";
                return null;
            };

            /**
             * Creates a QueryAttestationsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryAttestationsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryAttestationsRequest} QueryAttestationsRequest
             */
            QueryAttestationsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryAttestationsRequest)
                    return object;
                let message = new $root.gravity.v1.QueryAttestationsRequest();
                if (object.limit != null)
                    if ($util.Long)
                        (message.limit = $util.Long.fromValue(object.limit)).unsigned = true;
                    else if (typeof object.limit === "string")
                        message.limit = parseInt(object.limit, 10);
                    else if (typeof object.limit === "number")
                        message.limit = object.limit;
                    else if (typeof object.limit === "object")
                        message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber(true);
                if (object.order_by != null)
                    message.order_by = String(object.order_by);
                if (object.claim_type != null)
                    message.claim_type = String(object.claim_type);
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.use_v1_key != null)
                    message.use_v1_key = Boolean(object.use_v1_key);
                return message;
            };

            /**
             * Creates a plain object from a QueryAttestationsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryAttestationsRequest
             * @static
             * @param {gravity.v1.QueryAttestationsRequest} message QueryAttestationsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryAttestationsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.limit = options.longs === String ? "0" : 0;
                    object.order_by = "";
                    object.claim_type = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.use_v1_key = false;
                }
                if (message.limit != null && message.hasOwnProperty("limit"))
                    if (typeof message.limit === "number")
                        object.limit = options.longs === String ? String(message.limit) : message.limit;
                    else
                        object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber(true) : message.limit;
                if (message.order_by != null && message.hasOwnProperty("order_by"))
                    object.order_by = message.order_by;
                if (message.claim_type != null && message.hasOwnProperty("claim_type"))
                    object.claim_type = message.claim_type;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.use_v1_key != null && message.hasOwnProperty("use_v1_key"))
                    object.use_v1_key = message.use_v1_key;
                return object;
            };

            /**
             * Converts this QueryAttestationsRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryAttestationsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryAttestationsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryAttestationsRequest;
        })();

        v1.QueryAttestationsResponse = (function() {

            /**
             * Properties of a QueryAttestationsResponse.
             * @memberof gravity.v1
             * @interface IQueryAttestationsResponse
             * @property {Array.<gravity.v1.IAttestation>|null} [attestations] QueryAttestationsResponse attestations
             */

            /**
             * Constructs a new QueryAttestationsResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryAttestationsResponse.
             * @implements IQueryAttestationsResponse
             * @constructor
             * @param {gravity.v1.IQueryAttestationsResponse=} [properties] Properties to set
             */
            function QueryAttestationsResponse(properties) {
                this.attestations = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryAttestationsResponse attestations.
             * @member {Array.<gravity.v1.IAttestation>} attestations
             * @memberof gravity.v1.QueryAttestationsResponse
             * @instance
             */
            QueryAttestationsResponse.prototype.attestations = $util.emptyArray;

            /**
             * Encodes the specified QueryAttestationsResponse message. Does not implicitly {@link gravity.v1.QueryAttestationsResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryAttestationsResponse
             * @static
             * @param {gravity.v1.IQueryAttestationsResponse} message QueryAttestationsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryAttestationsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.attestations != null && message.attestations.length)
                    for (let i = 0; i < message.attestations.length; ++i)
                        $root.gravity.v1.Attestation.encode(message.attestations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryAttestationsResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryAttestationsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryAttestationsResponse
             * @static
             * @param {gravity.v1.IQueryAttestationsResponse} message QueryAttestationsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryAttestationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryAttestationsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryAttestationsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryAttestationsResponse} QueryAttestationsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryAttestationsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryAttestationsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.attestations && message.attestations.length))
                            message.attestations = [];
                        message.attestations.push($root.gravity.v1.Attestation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryAttestationsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryAttestationsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryAttestationsResponse} QueryAttestationsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryAttestationsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryAttestationsResponse message.
             * @function verify
             * @memberof gravity.v1.QueryAttestationsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryAttestationsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.attestations != null && message.hasOwnProperty("attestations")) {
                    if (!Array.isArray(message.attestations))
                        return "attestations: array expected";
                    for (let i = 0; i < message.attestations.length; ++i) {
                        let error = $root.gravity.v1.Attestation.verify(message.attestations[i]);
                        if (error)
                            return "attestations." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryAttestationsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryAttestationsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryAttestationsResponse} QueryAttestationsResponse
             */
            QueryAttestationsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryAttestationsResponse)
                    return object;
                let message = new $root.gravity.v1.QueryAttestationsResponse();
                if (object.attestations) {
                    if (!Array.isArray(object.attestations))
                        throw TypeError(".gravity.v1.QueryAttestationsResponse.attestations: array expected");
                    message.attestations = [];
                    for (let i = 0; i < object.attestations.length; ++i) {
                        if (typeof object.attestations[i] !== "object")
                            throw TypeError(".gravity.v1.QueryAttestationsResponse.attestations: object expected");
                        message.attestations[i] = $root.gravity.v1.Attestation.fromObject(object.attestations[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryAttestationsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryAttestationsResponse
             * @static
             * @param {gravity.v1.QueryAttestationsResponse} message QueryAttestationsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryAttestationsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.attestations = [];
                if (message.attestations && message.attestations.length) {
                    object.attestations = [];
                    for (let j = 0; j < message.attestations.length; ++j)
                        object.attestations[j] = $root.gravity.v1.Attestation.toObject(message.attestations[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryAttestationsResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryAttestationsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryAttestationsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryAttestationsResponse;
        })();

        v1.QueryDelegateKeysByValidatorAddress = (function() {

            /**
             * Properties of a QueryDelegateKeysByValidatorAddress.
             * @memberof gravity.v1
             * @interface IQueryDelegateKeysByValidatorAddress
             * @property {string|null} [validator_address] QueryDelegateKeysByValidatorAddress validator_address
             */

            /**
             * Constructs a new QueryDelegateKeysByValidatorAddress.
             * @memberof gravity.v1
             * @classdesc Represents a QueryDelegateKeysByValidatorAddress.
             * @implements IQueryDelegateKeysByValidatorAddress
             * @constructor
             * @param {gravity.v1.IQueryDelegateKeysByValidatorAddress=} [properties] Properties to set
             */
            function QueryDelegateKeysByValidatorAddress(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryDelegateKeysByValidatorAddress validator_address.
             * @member {string} validator_address
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @instance
             */
            QueryDelegateKeysByValidatorAddress.prototype.validator_address = "";

            /**
             * Encodes the specified QueryDelegateKeysByValidatorAddress message. Does not implicitly {@link gravity.v1.QueryDelegateKeysByValidatorAddress.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByValidatorAddress} message QueryDelegateKeysByValidatorAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByValidatorAddress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator_address);
                return writer;
            };

            /**
             * Encodes the specified QueryDelegateKeysByValidatorAddress message, length delimited. Does not implicitly {@link gravity.v1.QueryDelegateKeysByValidatorAddress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByValidatorAddress} message QueryDelegateKeysByValidatorAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByValidatorAddress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryDelegateKeysByValidatorAddress message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryDelegateKeysByValidatorAddress} QueryDelegateKeysByValidatorAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByValidatorAddress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryDelegateKeysByValidatorAddress();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryDelegateKeysByValidatorAddress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryDelegateKeysByValidatorAddress} QueryDelegateKeysByValidatorAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByValidatorAddress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryDelegateKeysByValidatorAddress message.
             * @function verify
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryDelegateKeysByValidatorAddress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!$util.isString(message.validator_address))
                        return "validator_address: string expected";
                return null;
            };

            /**
             * Creates a QueryDelegateKeysByValidatorAddress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryDelegateKeysByValidatorAddress} QueryDelegateKeysByValidatorAddress
             */
            QueryDelegateKeysByValidatorAddress.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryDelegateKeysByValidatorAddress)
                    return object;
                let message = new $root.gravity.v1.QueryDelegateKeysByValidatorAddress();
                if (object.validator_address != null)
                    message.validator_address = String(object.validator_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryDelegateKeysByValidatorAddress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @static
             * @param {gravity.v1.QueryDelegateKeysByValidatorAddress} message QueryDelegateKeysByValidatorAddress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryDelegateKeysByValidatorAddress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.validator_address = "";
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = message.validator_address;
                return object;
            };

            /**
             * Converts this QueryDelegateKeysByValidatorAddress to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryDelegateKeysByValidatorAddress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryDelegateKeysByValidatorAddress;
        })();

        v1.QueryDelegateKeysByValidatorAddressResponse = (function() {

            /**
             * Properties of a QueryDelegateKeysByValidatorAddressResponse.
             * @memberof gravity.v1
             * @interface IQueryDelegateKeysByValidatorAddressResponse
             * @property {string|null} [eth_address] QueryDelegateKeysByValidatorAddressResponse eth_address
             * @property {string|null} [orchestrator_address] QueryDelegateKeysByValidatorAddressResponse orchestrator_address
             */

            /**
             * Constructs a new QueryDelegateKeysByValidatorAddressResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryDelegateKeysByValidatorAddressResponse.
             * @implements IQueryDelegateKeysByValidatorAddressResponse
             * @constructor
             * @param {gravity.v1.IQueryDelegateKeysByValidatorAddressResponse=} [properties] Properties to set
             */
            function QueryDelegateKeysByValidatorAddressResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryDelegateKeysByValidatorAddressResponse eth_address.
             * @member {string} eth_address
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @instance
             */
            QueryDelegateKeysByValidatorAddressResponse.prototype.eth_address = "";

            /**
             * QueryDelegateKeysByValidatorAddressResponse orchestrator_address.
             * @member {string} orchestrator_address
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @instance
             */
            QueryDelegateKeysByValidatorAddressResponse.prototype.orchestrator_address = "";

            /**
             * Encodes the specified QueryDelegateKeysByValidatorAddressResponse message. Does not implicitly {@link gravity.v1.QueryDelegateKeysByValidatorAddressResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByValidatorAddressResponse} message QueryDelegateKeysByValidatorAddressResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByValidatorAddressResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.eth_address != null && Object.hasOwnProperty.call(message, "eth_address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.eth_address);
                if (message.orchestrator_address != null && Object.hasOwnProperty.call(message, "orchestrator_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.orchestrator_address);
                return writer;
            };

            /**
             * Encodes the specified QueryDelegateKeysByValidatorAddressResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryDelegateKeysByValidatorAddressResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByValidatorAddressResponse} message QueryDelegateKeysByValidatorAddressResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByValidatorAddressResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryDelegateKeysByValidatorAddressResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryDelegateKeysByValidatorAddressResponse} QueryDelegateKeysByValidatorAddressResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByValidatorAddressResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryDelegateKeysByValidatorAddressResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.eth_address = reader.string();
                        break;
                    case 2:
                        message.orchestrator_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryDelegateKeysByValidatorAddressResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryDelegateKeysByValidatorAddressResponse} QueryDelegateKeysByValidatorAddressResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByValidatorAddressResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryDelegateKeysByValidatorAddressResponse message.
             * @function verify
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryDelegateKeysByValidatorAddressResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    if (!$util.isString(message.eth_address))
                        return "eth_address: string expected";
                if (message.orchestrator_address != null && message.hasOwnProperty("orchestrator_address"))
                    if (!$util.isString(message.orchestrator_address))
                        return "orchestrator_address: string expected";
                return null;
            };

            /**
             * Creates a QueryDelegateKeysByValidatorAddressResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryDelegateKeysByValidatorAddressResponse} QueryDelegateKeysByValidatorAddressResponse
             */
            QueryDelegateKeysByValidatorAddressResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryDelegateKeysByValidatorAddressResponse)
                    return object;
                let message = new $root.gravity.v1.QueryDelegateKeysByValidatorAddressResponse();
                if (object.eth_address != null)
                    message.eth_address = String(object.eth_address);
                if (object.orchestrator_address != null)
                    message.orchestrator_address = String(object.orchestrator_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryDelegateKeysByValidatorAddressResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @static
             * @param {gravity.v1.QueryDelegateKeysByValidatorAddressResponse} message QueryDelegateKeysByValidatorAddressResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryDelegateKeysByValidatorAddressResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.eth_address = "";
                    object.orchestrator_address = "";
                }
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    object.eth_address = message.eth_address;
                if (message.orchestrator_address != null && message.hasOwnProperty("orchestrator_address"))
                    object.orchestrator_address = message.orchestrator_address;
                return object;
            };

            /**
             * Converts this QueryDelegateKeysByValidatorAddressResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryDelegateKeysByValidatorAddressResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryDelegateKeysByValidatorAddressResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryDelegateKeysByValidatorAddressResponse;
        })();

        v1.QueryDelegateKeysByEthAddress = (function() {

            /**
             * Properties of a QueryDelegateKeysByEthAddress.
             * @memberof gravity.v1
             * @interface IQueryDelegateKeysByEthAddress
             * @property {string|null} [eth_address] QueryDelegateKeysByEthAddress eth_address
             */

            /**
             * Constructs a new QueryDelegateKeysByEthAddress.
             * @memberof gravity.v1
             * @classdesc Represents a QueryDelegateKeysByEthAddress.
             * @implements IQueryDelegateKeysByEthAddress
             * @constructor
             * @param {gravity.v1.IQueryDelegateKeysByEthAddress=} [properties] Properties to set
             */
            function QueryDelegateKeysByEthAddress(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryDelegateKeysByEthAddress eth_address.
             * @member {string} eth_address
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @instance
             */
            QueryDelegateKeysByEthAddress.prototype.eth_address = "";

            /**
             * Encodes the specified QueryDelegateKeysByEthAddress message. Does not implicitly {@link gravity.v1.QueryDelegateKeysByEthAddress.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByEthAddress} message QueryDelegateKeysByEthAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByEthAddress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.eth_address != null && Object.hasOwnProperty.call(message, "eth_address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.eth_address);
                return writer;
            };

            /**
             * Encodes the specified QueryDelegateKeysByEthAddress message, length delimited. Does not implicitly {@link gravity.v1.QueryDelegateKeysByEthAddress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByEthAddress} message QueryDelegateKeysByEthAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByEthAddress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryDelegateKeysByEthAddress message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryDelegateKeysByEthAddress} QueryDelegateKeysByEthAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByEthAddress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryDelegateKeysByEthAddress();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.eth_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryDelegateKeysByEthAddress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryDelegateKeysByEthAddress} QueryDelegateKeysByEthAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByEthAddress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryDelegateKeysByEthAddress message.
             * @function verify
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryDelegateKeysByEthAddress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    if (!$util.isString(message.eth_address))
                        return "eth_address: string expected";
                return null;
            };

            /**
             * Creates a QueryDelegateKeysByEthAddress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryDelegateKeysByEthAddress} QueryDelegateKeysByEthAddress
             */
            QueryDelegateKeysByEthAddress.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryDelegateKeysByEthAddress)
                    return object;
                let message = new $root.gravity.v1.QueryDelegateKeysByEthAddress();
                if (object.eth_address != null)
                    message.eth_address = String(object.eth_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryDelegateKeysByEthAddress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @static
             * @param {gravity.v1.QueryDelegateKeysByEthAddress} message QueryDelegateKeysByEthAddress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryDelegateKeysByEthAddress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.eth_address = "";
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    object.eth_address = message.eth_address;
                return object;
            };

            /**
             * Converts this QueryDelegateKeysByEthAddress to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryDelegateKeysByEthAddress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryDelegateKeysByEthAddress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryDelegateKeysByEthAddress;
        })();

        v1.QueryDelegateKeysByEthAddressResponse = (function() {

            /**
             * Properties of a QueryDelegateKeysByEthAddressResponse.
             * @memberof gravity.v1
             * @interface IQueryDelegateKeysByEthAddressResponse
             * @property {string|null} [validator_address] QueryDelegateKeysByEthAddressResponse validator_address
             * @property {string|null} [orchestrator_address] QueryDelegateKeysByEthAddressResponse orchestrator_address
             */

            /**
             * Constructs a new QueryDelegateKeysByEthAddressResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryDelegateKeysByEthAddressResponse.
             * @implements IQueryDelegateKeysByEthAddressResponse
             * @constructor
             * @param {gravity.v1.IQueryDelegateKeysByEthAddressResponse=} [properties] Properties to set
             */
            function QueryDelegateKeysByEthAddressResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryDelegateKeysByEthAddressResponse validator_address.
             * @member {string} validator_address
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @instance
             */
            QueryDelegateKeysByEthAddressResponse.prototype.validator_address = "";

            /**
             * QueryDelegateKeysByEthAddressResponse orchestrator_address.
             * @member {string} orchestrator_address
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @instance
             */
            QueryDelegateKeysByEthAddressResponse.prototype.orchestrator_address = "";

            /**
             * Encodes the specified QueryDelegateKeysByEthAddressResponse message. Does not implicitly {@link gravity.v1.QueryDelegateKeysByEthAddressResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByEthAddressResponse} message QueryDelegateKeysByEthAddressResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByEthAddressResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator_address);
                if (message.orchestrator_address != null && Object.hasOwnProperty.call(message, "orchestrator_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.orchestrator_address);
                return writer;
            };

            /**
             * Encodes the specified QueryDelegateKeysByEthAddressResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryDelegateKeysByEthAddressResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByEthAddressResponse} message QueryDelegateKeysByEthAddressResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByEthAddressResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryDelegateKeysByEthAddressResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryDelegateKeysByEthAddressResponse} QueryDelegateKeysByEthAddressResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByEthAddressResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryDelegateKeysByEthAddressResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator_address = reader.string();
                        break;
                    case 2:
                        message.orchestrator_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryDelegateKeysByEthAddressResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryDelegateKeysByEthAddressResponse} QueryDelegateKeysByEthAddressResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByEthAddressResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryDelegateKeysByEthAddressResponse message.
             * @function verify
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryDelegateKeysByEthAddressResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!$util.isString(message.validator_address))
                        return "validator_address: string expected";
                if (message.orchestrator_address != null && message.hasOwnProperty("orchestrator_address"))
                    if (!$util.isString(message.orchestrator_address))
                        return "orchestrator_address: string expected";
                return null;
            };

            /**
             * Creates a QueryDelegateKeysByEthAddressResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryDelegateKeysByEthAddressResponse} QueryDelegateKeysByEthAddressResponse
             */
            QueryDelegateKeysByEthAddressResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryDelegateKeysByEthAddressResponse)
                    return object;
                let message = new $root.gravity.v1.QueryDelegateKeysByEthAddressResponse();
                if (object.validator_address != null)
                    message.validator_address = String(object.validator_address);
                if (object.orchestrator_address != null)
                    message.orchestrator_address = String(object.orchestrator_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryDelegateKeysByEthAddressResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @static
             * @param {gravity.v1.QueryDelegateKeysByEthAddressResponse} message QueryDelegateKeysByEthAddressResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryDelegateKeysByEthAddressResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.validator_address = "";
                    object.orchestrator_address = "";
                }
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = message.validator_address;
                if (message.orchestrator_address != null && message.hasOwnProperty("orchestrator_address"))
                    object.orchestrator_address = message.orchestrator_address;
                return object;
            };

            /**
             * Converts this QueryDelegateKeysByEthAddressResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryDelegateKeysByEthAddressResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryDelegateKeysByEthAddressResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryDelegateKeysByEthAddressResponse;
        })();

        v1.QueryDelegateKeysByOrchestratorAddress = (function() {

            /**
             * Properties of a QueryDelegateKeysByOrchestratorAddress.
             * @memberof gravity.v1
             * @interface IQueryDelegateKeysByOrchestratorAddress
             * @property {string|null} [orchestrator_address] QueryDelegateKeysByOrchestratorAddress orchestrator_address
             */

            /**
             * Constructs a new QueryDelegateKeysByOrchestratorAddress.
             * @memberof gravity.v1
             * @classdesc Represents a QueryDelegateKeysByOrchestratorAddress.
             * @implements IQueryDelegateKeysByOrchestratorAddress
             * @constructor
             * @param {gravity.v1.IQueryDelegateKeysByOrchestratorAddress=} [properties] Properties to set
             */
            function QueryDelegateKeysByOrchestratorAddress(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryDelegateKeysByOrchestratorAddress orchestrator_address.
             * @member {string} orchestrator_address
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @instance
             */
            QueryDelegateKeysByOrchestratorAddress.prototype.orchestrator_address = "";

            /**
             * Encodes the specified QueryDelegateKeysByOrchestratorAddress message. Does not implicitly {@link gravity.v1.QueryDelegateKeysByOrchestratorAddress.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByOrchestratorAddress} message QueryDelegateKeysByOrchestratorAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByOrchestratorAddress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.orchestrator_address != null && Object.hasOwnProperty.call(message, "orchestrator_address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.orchestrator_address);
                return writer;
            };

            /**
             * Encodes the specified QueryDelegateKeysByOrchestratorAddress message, length delimited. Does not implicitly {@link gravity.v1.QueryDelegateKeysByOrchestratorAddress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByOrchestratorAddress} message QueryDelegateKeysByOrchestratorAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByOrchestratorAddress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryDelegateKeysByOrchestratorAddress message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryDelegateKeysByOrchestratorAddress} QueryDelegateKeysByOrchestratorAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByOrchestratorAddress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryDelegateKeysByOrchestratorAddress();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.orchestrator_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryDelegateKeysByOrchestratorAddress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryDelegateKeysByOrchestratorAddress} QueryDelegateKeysByOrchestratorAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByOrchestratorAddress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryDelegateKeysByOrchestratorAddress message.
             * @function verify
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryDelegateKeysByOrchestratorAddress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.orchestrator_address != null && message.hasOwnProperty("orchestrator_address"))
                    if (!$util.isString(message.orchestrator_address))
                        return "orchestrator_address: string expected";
                return null;
            };

            /**
             * Creates a QueryDelegateKeysByOrchestratorAddress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryDelegateKeysByOrchestratorAddress} QueryDelegateKeysByOrchestratorAddress
             */
            QueryDelegateKeysByOrchestratorAddress.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryDelegateKeysByOrchestratorAddress)
                    return object;
                let message = new $root.gravity.v1.QueryDelegateKeysByOrchestratorAddress();
                if (object.orchestrator_address != null)
                    message.orchestrator_address = String(object.orchestrator_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryDelegateKeysByOrchestratorAddress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @static
             * @param {gravity.v1.QueryDelegateKeysByOrchestratorAddress} message QueryDelegateKeysByOrchestratorAddress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryDelegateKeysByOrchestratorAddress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.orchestrator_address = "";
                if (message.orchestrator_address != null && message.hasOwnProperty("orchestrator_address"))
                    object.orchestrator_address = message.orchestrator_address;
                return object;
            };

            /**
             * Converts this QueryDelegateKeysByOrchestratorAddress to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryDelegateKeysByOrchestratorAddress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryDelegateKeysByOrchestratorAddress;
        })();

        v1.QueryDelegateKeysByOrchestratorAddressResponse = (function() {

            /**
             * Properties of a QueryDelegateKeysByOrchestratorAddressResponse.
             * @memberof gravity.v1
             * @interface IQueryDelegateKeysByOrchestratorAddressResponse
             * @property {string|null} [validator_address] QueryDelegateKeysByOrchestratorAddressResponse validator_address
             * @property {string|null} [eth_address] QueryDelegateKeysByOrchestratorAddressResponse eth_address
             */

            /**
             * Constructs a new QueryDelegateKeysByOrchestratorAddressResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryDelegateKeysByOrchestratorAddressResponse.
             * @implements IQueryDelegateKeysByOrchestratorAddressResponse
             * @constructor
             * @param {gravity.v1.IQueryDelegateKeysByOrchestratorAddressResponse=} [properties] Properties to set
             */
            function QueryDelegateKeysByOrchestratorAddressResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryDelegateKeysByOrchestratorAddressResponse validator_address.
             * @member {string} validator_address
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @instance
             */
            QueryDelegateKeysByOrchestratorAddressResponse.prototype.validator_address = "";

            /**
             * QueryDelegateKeysByOrchestratorAddressResponse eth_address.
             * @member {string} eth_address
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @instance
             */
            QueryDelegateKeysByOrchestratorAddressResponse.prototype.eth_address = "";

            /**
             * Encodes the specified QueryDelegateKeysByOrchestratorAddressResponse message. Does not implicitly {@link gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByOrchestratorAddressResponse} message QueryDelegateKeysByOrchestratorAddressResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByOrchestratorAddressResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator_address);
                if (message.eth_address != null && Object.hasOwnProperty.call(message, "eth_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.eth_address);
                return writer;
            };

            /**
             * Encodes the specified QueryDelegateKeysByOrchestratorAddressResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @static
             * @param {gravity.v1.IQueryDelegateKeysByOrchestratorAddressResponse} message QueryDelegateKeysByOrchestratorAddressResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryDelegateKeysByOrchestratorAddressResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryDelegateKeysByOrchestratorAddressResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse} QueryDelegateKeysByOrchestratorAddressResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByOrchestratorAddressResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator_address = reader.string();
                        break;
                    case 2:
                        message.eth_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryDelegateKeysByOrchestratorAddressResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse} QueryDelegateKeysByOrchestratorAddressResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryDelegateKeysByOrchestratorAddressResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryDelegateKeysByOrchestratorAddressResponse message.
             * @function verify
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryDelegateKeysByOrchestratorAddressResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!$util.isString(message.validator_address))
                        return "validator_address: string expected";
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    if (!$util.isString(message.eth_address))
                        return "eth_address: string expected";
                return null;
            };

            /**
             * Creates a QueryDelegateKeysByOrchestratorAddressResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse} QueryDelegateKeysByOrchestratorAddressResponse
             */
            QueryDelegateKeysByOrchestratorAddressResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse)
                    return object;
                let message = new $root.gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse();
                if (object.validator_address != null)
                    message.validator_address = String(object.validator_address);
                if (object.eth_address != null)
                    message.eth_address = String(object.eth_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryDelegateKeysByOrchestratorAddressResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @static
             * @param {gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse} message QueryDelegateKeysByOrchestratorAddressResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryDelegateKeysByOrchestratorAddressResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.validator_address = "";
                    object.eth_address = "";
                }
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = message.validator_address;
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    object.eth_address = message.eth_address;
                return object;
            };

            /**
             * Converts this QueryDelegateKeysByOrchestratorAddressResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryDelegateKeysByOrchestratorAddressResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryDelegateKeysByOrchestratorAddressResponse;
        })();

        v1.QueryPendingSendToEth = (function() {

            /**
             * Properties of a QueryPendingSendToEth.
             * @memberof gravity.v1
             * @interface IQueryPendingSendToEth
             * @property {string|null} [sender_address] QueryPendingSendToEth sender_address
             */

            /**
             * Constructs a new QueryPendingSendToEth.
             * @memberof gravity.v1
             * @classdesc Represents a QueryPendingSendToEth.
             * @implements IQueryPendingSendToEth
             * @constructor
             * @param {gravity.v1.IQueryPendingSendToEth=} [properties] Properties to set
             */
            function QueryPendingSendToEth(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryPendingSendToEth sender_address.
             * @member {string} sender_address
             * @memberof gravity.v1.QueryPendingSendToEth
             * @instance
             */
            QueryPendingSendToEth.prototype.sender_address = "";

            /**
             * Encodes the specified QueryPendingSendToEth message. Does not implicitly {@link gravity.v1.QueryPendingSendToEth.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryPendingSendToEth
             * @static
             * @param {gravity.v1.IQueryPendingSendToEth} message QueryPendingSendToEth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryPendingSendToEth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender_address != null && Object.hasOwnProperty.call(message, "sender_address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender_address);
                return writer;
            };

            /**
             * Encodes the specified QueryPendingSendToEth message, length delimited. Does not implicitly {@link gravity.v1.QueryPendingSendToEth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryPendingSendToEth
             * @static
             * @param {gravity.v1.IQueryPendingSendToEth} message QueryPendingSendToEth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryPendingSendToEth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryPendingSendToEth message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryPendingSendToEth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryPendingSendToEth} QueryPendingSendToEth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryPendingSendToEth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryPendingSendToEth();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryPendingSendToEth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryPendingSendToEth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryPendingSendToEth} QueryPendingSendToEth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryPendingSendToEth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryPendingSendToEth message.
             * @function verify
             * @memberof gravity.v1.QueryPendingSendToEth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryPendingSendToEth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender_address != null && message.hasOwnProperty("sender_address"))
                    if (!$util.isString(message.sender_address))
                        return "sender_address: string expected";
                return null;
            };

            /**
             * Creates a QueryPendingSendToEth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryPendingSendToEth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryPendingSendToEth} QueryPendingSendToEth
             */
            QueryPendingSendToEth.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryPendingSendToEth)
                    return object;
                let message = new $root.gravity.v1.QueryPendingSendToEth();
                if (object.sender_address != null)
                    message.sender_address = String(object.sender_address);
                return message;
            };

            /**
             * Creates a plain object from a QueryPendingSendToEth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryPendingSendToEth
             * @static
             * @param {gravity.v1.QueryPendingSendToEth} message QueryPendingSendToEth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryPendingSendToEth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.sender_address = "";
                if (message.sender_address != null && message.hasOwnProperty("sender_address"))
                    object.sender_address = message.sender_address;
                return object;
            };

            /**
             * Converts this QueryPendingSendToEth to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryPendingSendToEth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryPendingSendToEth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryPendingSendToEth;
        })();

        v1.QueryPendingSendToEthResponse = (function() {

            /**
             * Properties of a QueryPendingSendToEthResponse.
             * @memberof gravity.v1
             * @interface IQueryPendingSendToEthResponse
             * @property {Array.<gravity.v1.IOutgoingTransferTx>|null} [transfers_in_batches] QueryPendingSendToEthResponse transfers_in_batches
             * @property {Array.<gravity.v1.IOutgoingTransferTx>|null} [unbatched_transfers] QueryPendingSendToEthResponse unbatched_transfers
             */

            /**
             * Constructs a new QueryPendingSendToEthResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryPendingSendToEthResponse.
             * @implements IQueryPendingSendToEthResponse
             * @constructor
             * @param {gravity.v1.IQueryPendingSendToEthResponse=} [properties] Properties to set
             */
            function QueryPendingSendToEthResponse(properties) {
                this.transfers_in_batches = [];
                this.unbatched_transfers = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryPendingSendToEthResponse transfers_in_batches.
             * @member {Array.<gravity.v1.IOutgoingTransferTx>} transfers_in_batches
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @instance
             */
            QueryPendingSendToEthResponse.prototype.transfers_in_batches = $util.emptyArray;

            /**
             * QueryPendingSendToEthResponse unbatched_transfers.
             * @member {Array.<gravity.v1.IOutgoingTransferTx>} unbatched_transfers
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @instance
             */
            QueryPendingSendToEthResponse.prototype.unbatched_transfers = $util.emptyArray;

            /**
             * Encodes the specified QueryPendingSendToEthResponse message. Does not implicitly {@link gravity.v1.QueryPendingSendToEthResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @static
             * @param {gravity.v1.IQueryPendingSendToEthResponse} message QueryPendingSendToEthResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryPendingSendToEthResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transfers_in_batches != null && message.transfers_in_batches.length)
                    for (let i = 0; i < message.transfers_in_batches.length; ++i)
                        $root.gravity.v1.OutgoingTransferTx.encode(message.transfers_in_batches[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.unbatched_transfers != null && message.unbatched_transfers.length)
                    for (let i = 0; i < message.unbatched_transfers.length; ++i)
                        $root.gravity.v1.OutgoingTransferTx.encode(message.unbatched_transfers[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryPendingSendToEthResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryPendingSendToEthResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @static
             * @param {gravity.v1.IQueryPendingSendToEthResponse} message QueryPendingSendToEthResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryPendingSendToEthResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryPendingSendToEthResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryPendingSendToEthResponse} QueryPendingSendToEthResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryPendingSendToEthResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryPendingSendToEthResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.transfers_in_batches && message.transfers_in_batches.length))
                            message.transfers_in_batches = [];
                        message.transfers_in_batches.push($root.gravity.v1.OutgoingTransferTx.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        if (!(message.unbatched_transfers && message.unbatched_transfers.length))
                            message.unbatched_transfers = [];
                        message.unbatched_transfers.push($root.gravity.v1.OutgoingTransferTx.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryPendingSendToEthResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryPendingSendToEthResponse} QueryPendingSendToEthResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryPendingSendToEthResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryPendingSendToEthResponse message.
             * @function verify
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryPendingSendToEthResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.transfers_in_batches != null && message.hasOwnProperty("transfers_in_batches")) {
                    if (!Array.isArray(message.transfers_in_batches))
                        return "transfers_in_batches: array expected";
                    for (let i = 0; i < message.transfers_in_batches.length; ++i) {
                        let error = $root.gravity.v1.OutgoingTransferTx.verify(message.transfers_in_batches[i]);
                        if (error)
                            return "transfers_in_batches." + error;
                    }
                }
                if (message.unbatched_transfers != null && message.hasOwnProperty("unbatched_transfers")) {
                    if (!Array.isArray(message.unbatched_transfers))
                        return "unbatched_transfers: array expected";
                    for (let i = 0; i < message.unbatched_transfers.length; ++i) {
                        let error = $root.gravity.v1.OutgoingTransferTx.verify(message.unbatched_transfers[i]);
                        if (error)
                            return "unbatched_transfers." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryPendingSendToEthResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryPendingSendToEthResponse} QueryPendingSendToEthResponse
             */
            QueryPendingSendToEthResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryPendingSendToEthResponse)
                    return object;
                let message = new $root.gravity.v1.QueryPendingSendToEthResponse();
                if (object.transfers_in_batches) {
                    if (!Array.isArray(object.transfers_in_batches))
                        throw TypeError(".gravity.v1.QueryPendingSendToEthResponse.transfers_in_batches: array expected");
                    message.transfers_in_batches = [];
                    for (let i = 0; i < object.transfers_in_batches.length; ++i) {
                        if (typeof object.transfers_in_batches[i] !== "object")
                            throw TypeError(".gravity.v1.QueryPendingSendToEthResponse.transfers_in_batches: object expected");
                        message.transfers_in_batches[i] = $root.gravity.v1.OutgoingTransferTx.fromObject(object.transfers_in_batches[i]);
                    }
                }
                if (object.unbatched_transfers) {
                    if (!Array.isArray(object.unbatched_transfers))
                        throw TypeError(".gravity.v1.QueryPendingSendToEthResponse.unbatched_transfers: array expected");
                    message.unbatched_transfers = [];
                    for (let i = 0; i < object.unbatched_transfers.length; ++i) {
                        if (typeof object.unbatched_transfers[i] !== "object")
                            throw TypeError(".gravity.v1.QueryPendingSendToEthResponse.unbatched_transfers: object expected");
                        message.unbatched_transfers[i] = $root.gravity.v1.OutgoingTransferTx.fromObject(object.unbatched_transfers[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryPendingSendToEthResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @static
             * @param {gravity.v1.QueryPendingSendToEthResponse} message QueryPendingSendToEthResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryPendingSendToEthResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.transfers_in_batches = [];
                    object.unbatched_transfers = [];
                }
                if (message.transfers_in_batches && message.transfers_in_batches.length) {
                    object.transfers_in_batches = [];
                    for (let j = 0; j < message.transfers_in_batches.length; ++j)
                        object.transfers_in_batches[j] = $root.gravity.v1.OutgoingTransferTx.toObject(message.transfers_in_batches[j], options);
                }
                if (message.unbatched_transfers && message.unbatched_transfers.length) {
                    object.unbatched_transfers = [];
                    for (let j = 0; j < message.unbatched_transfers.length; ++j)
                        object.unbatched_transfers[j] = $root.gravity.v1.OutgoingTransferTx.toObject(message.unbatched_transfers[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryPendingSendToEthResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryPendingSendToEthResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryPendingSendToEthResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryPendingSendToEthResponse;
        })();

        v1.QueryPendingIbcAutoForwards = (function() {

            /**
             * Properties of a QueryPendingIbcAutoForwards.
             * @memberof gravity.v1
             * @interface IQueryPendingIbcAutoForwards
             * @property {number|null} [limit] QueryPendingIbcAutoForwards limit
             */

            /**
             * Constructs a new QueryPendingIbcAutoForwards.
             * @memberof gravity.v1
             * @classdesc Represents a QueryPendingIbcAutoForwards.
             * @implements IQueryPendingIbcAutoForwards
             * @constructor
             * @param {gravity.v1.IQueryPendingIbcAutoForwards=} [properties] Properties to set
             */
            function QueryPendingIbcAutoForwards(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryPendingIbcAutoForwards limit.
             * @member {number} limit
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @instance
             */
            QueryPendingIbcAutoForwards.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified QueryPendingIbcAutoForwards message. Does not implicitly {@link gravity.v1.QueryPendingIbcAutoForwards.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @static
             * @param {gravity.v1.IQueryPendingIbcAutoForwards} message QueryPendingIbcAutoForwards message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryPendingIbcAutoForwards.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.limit);
                return writer;
            };

            /**
             * Encodes the specified QueryPendingIbcAutoForwards message, length delimited. Does not implicitly {@link gravity.v1.QueryPendingIbcAutoForwards.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @static
             * @param {gravity.v1.IQueryPendingIbcAutoForwards} message QueryPendingIbcAutoForwards message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryPendingIbcAutoForwards.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryPendingIbcAutoForwards message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryPendingIbcAutoForwards} QueryPendingIbcAutoForwards
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryPendingIbcAutoForwards.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryPendingIbcAutoForwards();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.limit = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryPendingIbcAutoForwards message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryPendingIbcAutoForwards} QueryPendingIbcAutoForwards
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryPendingIbcAutoForwards.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryPendingIbcAutoForwards message.
             * @function verify
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryPendingIbcAutoForwards.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.limit != null && message.hasOwnProperty("limit"))
                    if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                        return "limit: integer|Long expected";
                return null;
            };

            /**
             * Creates a QueryPendingIbcAutoForwards message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryPendingIbcAutoForwards} QueryPendingIbcAutoForwards
             */
            QueryPendingIbcAutoForwards.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryPendingIbcAutoForwards)
                    return object;
                let message = new $root.gravity.v1.QueryPendingIbcAutoForwards();
                if (object.limit != null)
                    if ($util.Long)
                        (message.limit = $util.Long.fromValue(object.limit)).unsigned = true;
                    else if (typeof object.limit === "string")
                        message.limit = parseInt(object.limit, 10);
                    else if (typeof object.limit === "number")
                        message.limit = object.limit;
                    else if (typeof object.limit === "object")
                        message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a QueryPendingIbcAutoForwards message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @static
             * @param {gravity.v1.QueryPendingIbcAutoForwards} message QueryPendingIbcAutoForwards
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryPendingIbcAutoForwards.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.limit = options.longs === String ? "0" : 0;
                if (message.limit != null && message.hasOwnProperty("limit"))
                    if (typeof message.limit === "number")
                        object.limit = options.longs === String ? String(message.limit) : message.limit;
                    else
                        object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber(true) : message.limit;
                return object;
            };

            /**
             * Converts this QueryPendingIbcAutoForwards to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryPendingIbcAutoForwards
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryPendingIbcAutoForwards.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryPendingIbcAutoForwards;
        })();

        v1.QueryPendingIbcAutoForwardsResponse = (function() {

            /**
             * Properties of a QueryPendingIbcAutoForwardsResponse.
             * @memberof gravity.v1
             * @interface IQueryPendingIbcAutoForwardsResponse
             * @property {Array.<gravity.v1.IPendingIbcAutoForward>|null} [pending_ibc_auto_forwards] QueryPendingIbcAutoForwardsResponse pending_ibc_auto_forwards
             */

            /**
             * Constructs a new QueryPendingIbcAutoForwardsResponse.
             * @memberof gravity.v1
             * @classdesc Represents a QueryPendingIbcAutoForwardsResponse.
             * @implements IQueryPendingIbcAutoForwardsResponse
             * @constructor
             * @param {gravity.v1.IQueryPendingIbcAutoForwardsResponse=} [properties] Properties to set
             */
            function QueryPendingIbcAutoForwardsResponse(properties) {
                this.pending_ibc_auto_forwards = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QueryPendingIbcAutoForwardsResponse pending_ibc_auto_forwards.
             * @member {Array.<gravity.v1.IPendingIbcAutoForward>} pending_ibc_auto_forwards
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @instance
             */
            QueryPendingIbcAutoForwardsResponse.prototype.pending_ibc_auto_forwards = $util.emptyArray;

            /**
             * Encodes the specified QueryPendingIbcAutoForwardsResponse message. Does not implicitly {@link gravity.v1.QueryPendingIbcAutoForwardsResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @static
             * @param {gravity.v1.IQueryPendingIbcAutoForwardsResponse} message QueryPendingIbcAutoForwardsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryPendingIbcAutoForwardsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pending_ibc_auto_forwards != null && message.pending_ibc_auto_forwards.length)
                    for (let i = 0; i < message.pending_ibc_auto_forwards.length; ++i)
                        $root.gravity.v1.PendingIbcAutoForward.encode(message.pending_ibc_auto_forwards[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified QueryPendingIbcAutoForwardsResponse message, length delimited. Does not implicitly {@link gravity.v1.QueryPendingIbcAutoForwardsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @static
             * @param {gravity.v1.IQueryPendingIbcAutoForwardsResponse} message QueryPendingIbcAutoForwardsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryPendingIbcAutoForwardsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QueryPendingIbcAutoForwardsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.QueryPendingIbcAutoForwardsResponse} QueryPendingIbcAutoForwardsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryPendingIbcAutoForwardsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.QueryPendingIbcAutoForwardsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.pending_ibc_auto_forwards && message.pending_ibc_auto_forwards.length))
                            message.pending_ibc_auto_forwards = [];
                        message.pending_ibc_auto_forwards.push($root.gravity.v1.PendingIbcAutoForward.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QueryPendingIbcAutoForwardsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.QueryPendingIbcAutoForwardsResponse} QueryPendingIbcAutoForwardsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryPendingIbcAutoForwardsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QueryPendingIbcAutoForwardsResponse message.
             * @function verify
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryPendingIbcAutoForwardsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pending_ibc_auto_forwards != null && message.hasOwnProperty("pending_ibc_auto_forwards")) {
                    if (!Array.isArray(message.pending_ibc_auto_forwards))
                        return "pending_ibc_auto_forwards: array expected";
                    for (let i = 0; i < message.pending_ibc_auto_forwards.length; ++i) {
                        let error = $root.gravity.v1.PendingIbcAutoForward.verify(message.pending_ibc_auto_forwards[i]);
                        if (error)
                            return "pending_ibc_auto_forwards." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a QueryPendingIbcAutoForwardsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.QueryPendingIbcAutoForwardsResponse} QueryPendingIbcAutoForwardsResponse
             */
            QueryPendingIbcAutoForwardsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.QueryPendingIbcAutoForwardsResponse)
                    return object;
                let message = new $root.gravity.v1.QueryPendingIbcAutoForwardsResponse();
                if (object.pending_ibc_auto_forwards) {
                    if (!Array.isArray(object.pending_ibc_auto_forwards))
                        throw TypeError(".gravity.v1.QueryPendingIbcAutoForwardsResponse.pending_ibc_auto_forwards: array expected");
                    message.pending_ibc_auto_forwards = [];
                    for (let i = 0; i < object.pending_ibc_auto_forwards.length; ++i) {
                        if (typeof object.pending_ibc_auto_forwards[i] !== "object")
                            throw TypeError(".gravity.v1.QueryPendingIbcAutoForwardsResponse.pending_ibc_auto_forwards: object expected");
                        message.pending_ibc_auto_forwards[i] = $root.gravity.v1.PendingIbcAutoForward.fromObject(object.pending_ibc_auto_forwards[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a QueryPendingIbcAutoForwardsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @static
             * @param {gravity.v1.QueryPendingIbcAutoForwardsResponse} message QueryPendingIbcAutoForwardsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryPendingIbcAutoForwardsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.pending_ibc_auto_forwards = [];
                if (message.pending_ibc_auto_forwards && message.pending_ibc_auto_forwards.length) {
                    object.pending_ibc_auto_forwards = [];
                    for (let j = 0; j < message.pending_ibc_auto_forwards.length; ++j)
                        object.pending_ibc_auto_forwards[j] = $root.gravity.v1.PendingIbcAutoForward.toObject(message.pending_ibc_auto_forwards[j], options);
                }
                return object;
            };

            /**
             * Converts this QueryPendingIbcAutoForwardsResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.QueryPendingIbcAutoForwardsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryPendingIbcAutoForwardsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return QueryPendingIbcAutoForwardsResponse;
        })();

        v1.Params = (function() {

            /**
             * Properties of a Params.
             * @memberof gravity.v1
             * @interface IParams
             * @property {string|null} [gravity_id] Params gravity_id
             * @property {string|null} [contract_source_hash] Params contract_source_hash
             * @property {string|null} [bridge_ethereum_address] Params bridge_ethereum_address
             * @property {number|null} [bridge_chain_id] Params bridge_chain_id
             * @property {number|null} [signed_valsets_window] Params signed_valsets_window
             * @property {number|null} [signed_batches_window] Params signed_batches_window
             * @property {number|null} [signed_logic_calls_window] Params signed_logic_calls_window
             * @property {number|null} [target_batch_timeout] Params target_batch_timeout
             * @property {number|null} [average_block_time] Params average_block_time
             * @property {number|null} [average_ethereum_block_time] Params average_ethereum_block_time
             * @property {Uint8Array|null} [slash_fraction_valset] Params slash_fraction_valset
             * @property {Uint8Array|null} [slash_fraction_batch] Params slash_fraction_batch
             * @property {Uint8Array|null} [slash_fraction_logic_call] Params slash_fraction_logic_call
             * @property {number|null} [unbond_slashing_valsets_window] Params unbond_slashing_valsets_window
             * @property {Uint8Array|null} [slash_fraction_bad_eth_signature] Params slash_fraction_bad_eth_signature
             * @property {cosmos.base.v1beta1.ICoin|null} [valset_reward] Params valset_reward
             * @property {boolean|null} [bridge_active] Params bridge_active
             * @property {Array.<string>|null} [ethereum_blacklist] Params ethereum_blacklist
             * @property {number|null} [min_chain_fee_basis_points] Params min_chain_fee_basis_points
             */

            /**
             * Constructs a new Params.
             * @memberof gravity.v1
             * @classdesc Represents a Params.
             * @implements IParams
             * @constructor
             * @param {gravity.v1.IParams=} [properties] Properties to set
             */
            function Params(properties) {
                this.ethereum_blacklist = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Params gravity_id.
             * @member {string} gravity_id
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.gravity_id = "";

            /**
             * Params contract_source_hash.
             * @member {string} contract_source_hash
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.contract_source_hash = "";

            /**
             * Params bridge_ethereum_address.
             * @member {string} bridge_ethereum_address
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.bridge_ethereum_address = "";

            /**
             * Params bridge_chain_id.
             * @member {number} bridge_chain_id
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.bridge_chain_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Params signed_valsets_window.
             * @member {number} signed_valsets_window
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.signed_valsets_window = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Params signed_batches_window.
             * @member {number} signed_batches_window
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.signed_batches_window = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Params signed_logic_calls_window.
             * @member {number} signed_logic_calls_window
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.signed_logic_calls_window = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Params target_batch_timeout.
             * @member {number} target_batch_timeout
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.target_batch_timeout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Params average_block_time.
             * @member {number} average_block_time
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.average_block_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Params average_ethereum_block_time.
             * @member {number} average_ethereum_block_time
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.average_ethereum_block_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Params slash_fraction_valset.
             * @member {Uint8Array} slash_fraction_valset
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.slash_fraction_valset = $util.newBuffer([]);

            /**
             * Params slash_fraction_batch.
             * @member {Uint8Array} slash_fraction_batch
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.slash_fraction_batch = $util.newBuffer([]);

            /**
             * Params slash_fraction_logic_call.
             * @member {Uint8Array} slash_fraction_logic_call
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.slash_fraction_logic_call = $util.newBuffer([]);

            /**
             * Params unbond_slashing_valsets_window.
             * @member {number} unbond_slashing_valsets_window
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.unbond_slashing_valsets_window = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Params slash_fraction_bad_eth_signature.
             * @member {Uint8Array} slash_fraction_bad_eth_signature
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.slash_fraction_bad_eth_signature = $util.newBuffer([]);

            /**
             * Params valset_reward.
             * @member {cosmos.base.v1beta1.ICoin|null|undefined} valset_reward
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.valset_reward = null;

            /**
             * Params bridge_active.
             * @member {boolean} bridge_active
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.bridge_active = false;

            /**
             * Params ethereum_blacklist.
             * @member {Array.<string>} ethereum_blacklist
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.ethereum_blacklist = $util.emptyArray;

            /**
             * Params min_chain_fee_basis_points.
             * @member {number} min_chain_fee_basis_points
             * @memberof gravity.v1.Params
             * @instance
             */
            Params.prototype.min_chain_fee_basis_points = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified Params message. Does not implicitly {@link gravity.v1.Params.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.Params
             * @static
             * @param {gravity.v1.IParams} message Params message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Params.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gravity_id != null && Object.hasOwnProperty.call(message, "gravity_id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.gravity_id);
                if (message.contract_source_hash != null && Object.hasOwnProperty.call(message, "contract_source_hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.contract_source_hash);
                if (message.bridge_ethereum_address != null && Object.hasOwnProperty.call(message, "bridge_ethereum_address"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.bridge_ethereum_address);
                if (message.bridge_chain_id != null && Object.hasOwnProperty.call(message, "bridge_chain_id"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.bridge_chain_id);
                if (message.signed_valsets_window != null && Object.hasOwnProperty.call(message, "signed_valsets_window"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.signed_valsets_window);
                if (message.signed_batches_window != null && Object.hasOwnProperty.call(message, "signed_batches_window"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.signed_batches_window);
                if (message.signed_logic_calls_window != null && Object.hasOwnProperty.call(message, "signed_logic_calls_window"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.signed_logic_calls_window);
                if (message.target_batch_timeout != null && Object.hasOwnProperty.call(message, "target_batch_timeout"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.target_batch_timeout);
                if (message.average_block_time != null && Object.hasOwnProperty.call(message, "average_block_time"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.average_block_time);
                if (message.average_ethereum_block_time != null && Object.hasOwnProperty.call(message, "average_ethereum_block_time"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.average_ethereum_block_time);
                if (message.slash_fraction_valset != null && Object.hasOwnProperty.call(message, "slash_fraction_valset"))
                    writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.slash_fraction_valset);
                if (message.slash_fraction_batch != null && Object.hasOwnProperty.call(message, "slash_fraction_batch"))
                    writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.slash_fraction_batch);
                if (message.slash_fraction_logic_call != null && Object.hasOwnProperty.call(message, "slash_fraction_logic_call"))
                    writer.uint32(/* id 14, wireType 2 =*/114).bytes(message.slash_fraction_logic_call);
                if (message.unbond_slashing_valsets_window != null && Object.hasOwnProperty.call(message, "unbond_slashing_valsets_window"))
                    writer.uint32(/* id 15, wireType 0 =*/120).uint64(message.unbond_slashing_valsets_window);
                if (message.slash_fraction_bad_eth_signature != null && Object.hasOwnProperty.call(message, "slash_fraction_bad_eth_signature"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.slash_fraction_bad_eth_signature);
                if (message.valset_reward != null && Object.hasOwnProperty.call(message, "valset_reward"))
                    $root.cosmos.base.v1beta1.Coin.encode(message.valset_reward, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.bridge_active != null && Object.hasOwnProperty.call(message, "bridge_active"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.bridge_active);
                if (message.ethereum_blacklist != null && message.ethereum_blacklist.length)
                    for (let i = 0; i < message.ethereum_blacklist.length; ++i)
                        writer.uint32(/* id 19, wireType 2 =*/154).string(message.ethereum_blacklist[i]);
                if (message.min_chain_fee_basis_points != null && Object.hasOwnProperty.call(message, "min_chain_fee_basis_points"))
                    writer.uint32(/* id 20, wireType 0 =*/160).uint64(message.min_chain_fee_basis_points);
                return writer;
            };

            /**
             * Encodes the specified Params message, length delimited. Does not implicitly {@link gravity.v1.Params.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.Params
             * @static
             * @param {gravity.v1.IParams} message Params message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Params.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Params message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.Params
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.Params} Params
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Params.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.Params();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gravity_id = reader.string();
                        break;
                    case 2:
                        message.contract_source_hash = reader.string();
                        break;
                    case 4:
                        message.bridge_ethereum_address = reader.string();
                        break;
                    case 5:
                        message.bridge_chain_id = reader.uint64();
                        break;
                    case 6:
                        message.signed_valsets_window = reader.uint64();
                        break;
                    case 7:
                        message.signed_batches_window = reader.uint64();
                        break;
                    case 8:
                        message.signed_logic_calls_window = reader.uint64();
                        break;
                    case 9:
                        message.target_batch_timeout = reader.uint64();
                        break;
                    case 10:
                        message.average_block_time = reader.uint64();
                        break;
                    case 11:
                        message.average_ethereum_block_time = reader.uint64();
                        break;
                    case 12:
                        message.slash_fraction_valset = reader.bytes();
                        break;
                    case 13:
                        message.slash_fraction_batch = reader.bytes();
                        break;
                    case 14:
                        message.slash_fraction_logic_call = reader.bytes();
                        break;
                    case 15:
                        message.unbond_slashing_valsets_window = reader.uint64();
                        break;
                    case 16:
                        message.slash_fraction_bad_eth_signature = reader.bytes();
                        break;
                    case 17:
                        message.valset_reward = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                        break;
                    case 18:
                        message.bridge_active = reader.bool();
                        break;
                    case 19:
                        if (!(message.ethereum_blacklist && message.ethereum_blacklist.length))
                            message.ethereum_blacklist = [];
                        message.ethereum_blacklist.push(reader.string());
                        break;
                    case 20:
                        message.min_chain_fee_basis_points = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Params message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.Params
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.Params} Params
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Params.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Params message.
             * @function verify
             * @memberof gravity.v1.Params
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Params.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gravity_id != null && message.hasOwnProperty("gravity_id"))
                    if (!$util.isString(message.gravity_id))
                        return "gravity_id: string expected";
                if (message.contract_source_hash != null && message.hasOwnProperty("contract_source_hash"))
                    if (!$util.isString(message.contract_source_hash))
                        return "contract_source_hash: string expected";
                if (message.bridge_ethereum_address != null && message.hasOwnProperty("bridge_ethereum_address"))
                    if (!$util.isString(message.bridge_ethereum_address))
                        return "bridge_ethereum_address: string expected";
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    if (!$util.isInteger(message.bridge_chain_id) && !(message.bridge_chain_id && $util.isInteger(message.bridge_chain_id.low) && $util.isInteger(message.bridge_chain_id.high)))
                        return "bridge_chain_id: integer|Long expected";
                if (message.signed_valsets_window != null && message.hasOwnProperty("signed_valsets_window"))
                    if (!$util.isInteger(message.signed_valsets_window) && !(message.signed_valsets_window && $util.isInteger(message.signed_valsets_window.low) && $util.isInteger(message.signed_valsets_window.high)))
                        return "signed_valsets_window: integer|Long expected";
                if (message.signed_batches_window != null && message.hasOwnProperty("signed_batches_window"))
                    if (!$util.isInteger(message.signed_batches_window) && !(message.signed_batches_window && $util.isInteger(message.signed_batches_window.low) && $util.isInteger(message.signed_batches_window.high)))
                        return "signed_batches_window: integer|Long expected";
                if (message.signed_logic_calls_window != null && message.hasOwnProperty("signed_logic_calls_window"))
                    if (!$util.isInteger(message.signed_logic_calls_window) && !(message.signed_logic_calls_window && $util.isInteger(message.signed_logic_calls_window.low) && $util.isInteger(message.signed_logic_calls_window.high)))
                        return "signed_logic_calls_window: integer|Long expected";
                if (message.target_batch_timeout != null && message.hasOwnProperty("target_batch_timeout"))
                    if (!$util.isInteger(message.target_batch_timeout) && !(message.target_batch_timeout && $util.isInteger(message.target_batch_timeout.low) && $util.isInteger(message.target_batch_timeout.high)))
                        return "target_batch_timeout: integer|Long expected";
                if (message.average_block_time != null && message.hasOwnProperty("average_block_time"))
                    if (!$util.isInteger(message.average_block_time) && !(message.average_block_time && $util.isInteger(message.average_block_time.low) && $util.isInteger(message.average_block_time.high)))
                        return "average_block_time: integer|Long expected";
                if (message.average_ethereum_block_time != null && message.hasOwnProperty("average_ethereum_block_time"))
                    if (!$util.isInteger(message.average_ethereum_block_time) && !(message.average_ethereum_block_time && $util.isInteger(message.average_ethereum_block_time.low) && $util.isInteger(message.average_ethereum_block_time.high)))
                        return "average_ethereum_block_time: integer|Long expected";
                if (message.slash_fraction_valset != null && message.hasOwnProperty("slash_fraction_valset"))
                    if (!(message.slash_fraction_valset && typeof message.slash_fraction_valset.length === "number" || $util.isString(message.slash_fraction_valset)))
                        return "slash_fraction_valset: buffer expected";
                if (message.slash_fraction_batch != null && message.hasOwnProperty("slash_fraction_batch"))
                    if (!(message.slash_fraction_batch && typeof message.slash_fraction_batch.length === "number" || $util.isString(message.slash_fraction_batch)))
                        return "slash_fraction_batch: buffer expected";
                if (message.slash_fraction_logic_call != null && message.hasOwnProperty("slash_fraction_logic_call"))
                    if (!(message.slash_fraction_logic_call && typeof message.slash_fraction_logic_call.length === "number" || $util.isString(message.slash_fraction_logic_call)))
                        return "slash_fraction_logic_call: buffer expected";
                if (message.unbond_slashing_valsets_window != null && message.hasOwnProperty("unbond_slashing_valsets_window"))
                    if (!$util.isInteger(message.unbond_slashing_valsets_window) && !(message.unbond_slashing_valsets_window && $util.isInteger(message.unbond_slashing_valsets_window.low) && $util.isInteger(message.unbond_slashing_valsets_window.high)))
                        return "unbond_slashing_valsets_window: integer|Long expected";
                if (message.slash_fraction_bad_eth_signature != null && message.hasOwnProperty("slash_fraction_bad_eth_signature"))
                    if (!(message.slash_fraction_bad_eth_signature && typeof message.slash_fraction_bad_eth_signature.length === "number" || $util.isString(message.slash_fraction_bad_eth_signature)))
                        return "slash_fraction_bad_eth_signature: buffer expected";
                if (message.valset_reward != null && message.hasOwnProperty("valset_reward")) {
                    let error = $root.cosmos.base.v1beta1.Coin.verify(message.valset_reward);
                    if (error)
                        return "valset_reward." + error;
                }
                if (message.bridge_active != null && message.hasOwnProperty("bridge_active"))
                    if (typeof message.bridge_active !== "boolean")
                        return "bridge_active: boolean expected";
                if (message.ethereum_blacklist != null && message.hasOwnProperty("ethereum_blacklist")) {
                    if (!Array.isArray(message.ethereum_blacklist))
                        return "ethereum_blacklist: array expected";
                    for (let i = 0; i < message.ethereum_blacklist.length; ++i)
                        if (!$util.isString(message.ethereum_blacklist[i]))
                            return "ethereum_blacklist: string[] expected";
                }
                if (message.min_chain_fee_basis_points != null && message.hasOwnProperty("min_chain_fee_basis_points"))
                    if (!$util.isInteger(message.min_chain_fee_basis_points) && !(message.min_chain_fee_basis_points && $util.isInteger(message.min_chain_fee_basis_points.low) && $util.isInteger(message.min_chain_fee_basis_points.high)))
                        return "min_chain_fee_basis_points: integer|Long expected";
                return null;
            };

            /**
             * Creates a Params message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.Params
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.Params} Params
             */
            Params.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.Params)
                    return object;
                let message = new $root.gravity.v1.Params();
                if (object.gravity_id != null)
                    message.gravity_id = String(object.gravity_id);
                if (object.contract_source_hash != null)
                    message.contract_source_hash = String(object.contract_source_hash);
                if (object.bridge_ethereum_address != null)
                    message.bridge_ethereum_address = String(object.bridge_ethereum_address);
                if (object.bridge_chain_id != null)
                    if ($util.Long)
                        (message.bridge_chain_id = $util.Long.fromValue(object.bridge_chain_id)).unsigned = true;
                    else if (typeof object.bridge_chain_id === "string")
                        message.bridge_chain_id = parseInt(object.bridge_chain_id, 10);
                    else if (typeof object.bridge_chain_id === "number")
                        message.bridge_chain_id = object.bridge_chain_id;
                    else if (typeof object.bridge_chain_id === "object")
                        message.bridge_chain_id = new $util.LongBits(object.bridge_chain_id.low >>> 0, object.bridge_chain_id.high >>> 0).toNumber(true);
                if (object.signed_valsets_window != null)
                    if ($util.Long)
                        (message.signed_valsets_window = $util.Long.fromValue(object.signed_valsets_window)).unsigned = true;
                    else if (typeof object.signed_valsets_window === "string")
                        message.signed_valsets_window = parseInt(object.signed_valsets_window, 10);
                    else if (typeof object.signed_valsets_window === "number")
                        message.signed_valsets_window = object.signed_valsets_window;
                    else if (typeof object.signed_valsets_window === "object")
                        message.signed_valsets_window = new $util.LongBits(object.signed_valsets_window.low >>> 0, object.signed_valsets_window.high >>> 0).toNumber(true);
                if (object.signed_batches_window != null)
                    if ($util.Long)
                        (message.signed_batches_window = $util.Long.fromValue(object.signed_batches_window)).unsigned = true;
                    else if (typeof object.signed_batches_window === "string")
                        message.signed_batches_window = parseInt(object.signed_batches_window, 10);
                    else if (typeof object.signed_batches_window === "number")
                        message.signed_batches_window = object.signed_batches_window;
                    else if (typeof object.signed_batches_window === "object")
                        message.signed_batches_window = new $util.LongBits(object.signed_batches_window.low >>> 0, object.signed_batches_window.high >>> 0).toNumber(true);
                if (object.signed_logic_calls_window != null)
                    if ($util.Long)
                        (message.signed_logic_calls_window = $util.Long.fromValue(object.signed_logic_calls_window)).unsigned = true;
                    else if (typeof object.signed_logic_calls_window === "string")
                        message.signed_logic_calls_window = parseInt(object.signed_logic_calls_window, 10);
                    else if (typeof object.signed_logic_calls_window === "number")
                        message.signed_logic_calls_window = object.signed_logic_calls_window;
                    else if (typeof object.signed_logic_calls_window === "object")
                        message.signed_logic_calls_window = new $util.LongBits(object.signed_logic_calls_window.low >>> 0, object.signed_logic_calls_window.high >>> 0).toNumber(true);
                if (object.target_batch_timeout != null)
                    if ($util.Long)
                        (message.target_batch_timeout = $util.Long.fromValue(object.target_batch_timeout)).unsigned = true;
                    else if (typeof object.target_batch_timeout === "string")
                        message.target_batch_timeout = parseInt(object.target_batch_timeout, 10);
                    else if (typeof object.target_batch_timeout === "number")
                        message.target_batch_timeout = object.target_batch_timeout;
                    else if (typeof object.target_batch_timeout === "object")
                        message.target_batch_timeout = new $util.LongBits(object.target_batch_timeout.low >>> 0, object.target_batch_timeout.high >>> 0).toNumber(true);
                if (object.average_block_time != null)
                    if ($util.Long)
                        (message.average_block_time = $util.Long.fromValue(object.average_block_time)).unsigned = true;
                    else if (typeof object.average_block_time === "string")
                        message.average_block_time = parseInt(object.average_block_time, 10);
                    else if (typeof object.average_block_time === "number")
                        message.average_block_time = object.average_block_time;
                    else if (typeof object.average_block_time === "object")
                        message.average_block_time = new $util.LongBits(object.average_block_time.low >>> 0, object.average_block_time.high >>> 0).toNumber(true);
                if (object.average_ethereum_block_time != null)
                    if ($util.Long)
                        (message.average_ethereum_block_time = $util.Long.fromValue(object.average_ethereum_block_time)).unsigned = true;
                    else if (typeof object.average_ethereum_block_time === "string")
                        message.average_ethereum_block_time = parseInt(object.average_ethereum_block_time, 10);
                    else if (typeof object.average_ethereum_block_time === "number")
                        message.average_ethereum_block_time = object.average_ethereum_block_time;
                    else if (typeof object.average_ethereum_block_time === "object")
                        message.average_ethereum_block_time = new $util.LongBits(object.average_ethereum_block_time.low >>> 0, object.average_ethereum_block_time.high >>> 0).toNumber(true);
                if (object.slash_fraction_valset != null)
                    if (typeof object.slash_fraction_valset === "string")
                        $util.base64.decode(object.slash_fraction_valset, message.slash_fraction_valset = $util.newBuffer($util.base64.length(object.slash_fraction_valset)), 0);
                    else if (object.slash_fraction_valset.length)
                        message.slash_fraction_valset = object.slash_fraction_valset;
                if (object.slash_fraction_batch != null)
                    if (typeof object.slash_fraction_batch === "string")
                        $util.base64.decode(object.slash_fraction_batch, message.slash_fraction_batch = $util.newBuffer($util.base64.length(object.slash_fraction_batch)), 0);
                    else if (object.slash_fraction_batch.length)
                        message.slash_fraction_batch = object.slash_fraction_batch;
                if (object.slash_fraction_logic_call != null)
                    if (typeof object.slash_fraction_logic_call === "string")
                        $util.base64.decode(object.slash_fraction_logic_call, message.slash_fraction_logic_call = $util.newBuffer($util.base64.length(object.slash_fraction_logic_call)), 0);
                    else if (object.slash_fraction_logic_call.length)
                        message.slash_fraction_logic_call = object.slash_fraction_logic_call;
                if (object.unbond_slashing_valsets_window != null)
                    if ($util.Long)
                        (message.unbond_slashing_valsets_window = $util.Long.fromValue(object.unbond_slashing_valsets_window)).unsigned = true;
                    else if (typeof object.unbond_slashing_valsets_window === "string")
                        message.unbond_slashing_valsets_window = parseInt(object.unbond_slashing_valsets_window, 10);
                    else if (typeof object.unbond_slashing_valsets_window === "number")
                        message.unbond_slashing_valsets_window = object.unbond_slashing_valsets_window;
                    else if (typeof object.unbond_slashing_valsets_window === "object")
                        message.unbond_slashing_valsets_window = new $util.LongBits(object.unbond_slashing_valsets_window.low >>> 0, object.unbond_slashing_valsets_window.high >>> 0).toNumber(true);
                if (object.slash_fraction_bad_eth_signature != null)
                    if (typeof object.slash_fraction_bad_eth_signature === "string")
                        $util.base64.decode(object.slash_fraction_bad_eth_signature, message.slash_fraction_bad_eth_signature = $util.newBuffer($util.base64.length(object.slash_fraction_bad_eth_signature)), 0);
                    else if (object.slash_fraction_bad_eth_signature.length)
                        message.slash_fraction_bad_eth_signature = object.slash_fraction_bad_eth_signature;
                if (object.valset_reward != null) {
                    if (typeof object.valset_reward !== "object")
                        throw TypeError(".gravity.v1.Params.valset_reward: object expected");
                    message.valset_reward = $root.cosmos.base.v1beta1.Coin.fromObject(object.valset_reward);
                }
                if (object.bridge_active != null)
                    message.bridge_active = Boolean(object.bridge_active);
                if (object.ethereum_blacklist) {
                    if (!Array.isArray(object.ethereum_blacklist))
                        throw TypeError(".gravity.v1.Params.ethereum_blacklist: array expected");
                    message.ethereum_blacklist = [];
                    for (let i = 0; i < object.ethereum_blacklist.length; ++i)
                        message.ethereum_blacklist[i] = String(object.ethereum_blacklist[i]);
                }
                if (object.min_chain_fee_basis_points != null)
                    if ($util.Long)
                        (message.min_chain_fee_basis_points = $util.Long.fromValue(object.min_chain_fee_basis_points)).unsigned = true;
                    else if (typeof object.min_chain_fee_basis_points === "string")
                        message.min_chain_fee_basis_points = parseInt(object.min_chain_fee_basis_points, 10);
                    else if (typeof object.min_chain_fee_basis_points === "number")
                        message.min_chain_fee_basis_points = object.min_chain_fee_basis_points;
                    else if (typeof object.min_chain_fee_basis_points === "object")
                        message.min_chain_fee_basis_points = new $util.LongBits(object.min_chain_fee_basis_points.low >>> 0, object.min_chain_fee_basis_points.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a Params message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.Params
             * @static
             * @param {gravity.v1.Params} message Params
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Params.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ethereum_blacklist = [];
                if (options.defaults) {
                    object.gravity_id = "";
                    object.contract_source_hash = "";
                    object.bridge_ethereum_address = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.bridge_chain_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.bridge_chain_id = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.signed_valsets_window = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.signed_valsets_window = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.signed_batches_window = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.signed_batches_window = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.signed_logic_calls_window = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.signed_logic_calls_window = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.target_batch_timeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.target_batch_timeout = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.average_block_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.average_block_time = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.average_ethereum_block_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.average_ethereum_block_time = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.slash_fraction_valset = "";
                    else {
                        object.slash_fraction_valset = [];
                        if (options.bytes !== Array)
                            object.slash_fraction_valset = $util.newBuffer(object.slash_fraction_valset);
                    }
                    if (options.bytes === String)
                        object.slash_fraction_batch = "";
                    else {
                        object.slash_fraction_batch = [];
                        if (options.bytes !== Array)
                            object.slash_fraction_batch = $util.newBuffer(object.slash_fraction_batch);
                    }
                    if (options.bytes === String)
                        object.slash_fraction_logic_call = "";
                    else {
                        object.slash_fraction_logic_call = [];
                        if (options.bytes !== Array)
                            object.slash_fraction_logic_call = $util.newBuffer(object.slash_fraction_logic_call);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.unbond_slashing_valsets_window = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.unbond_slashing_valsets_window = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.slash_fraction_bad_eth_signature = "";
                    else {
                        object.slash_fraction_bad_eth_signature = [];
                        if (options.bytes !== Array)
                            object.slash_fraction_bad_eth_signature = $util.newBuffer(object.slash_fraction_bad_eth_signature);
                    }
                    object.valset_reward = null;
                    object.bridge_active = false;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.min_chain_fee_basis_points = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.min_chain_fee_basis_points = options.longs === String ? "0" : 0;
                }
                if (message.gravity_id != null && message.hasOwnProperty("gravity_id"))
                    object.gravity_id = message.gravity_id;
                if (message.contract_source_hash != null && message.hasOwnProperty("contract_source_hash"))
                    object.contract_source_hash = message.contract_source_hash;
                if (message.bridge_ethereum_address != null && message.hasOwnProperty("bridge_ethereum_address"))
                    object.bridge_ethereum_address = message.bridge_ethereum_address;
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    if (typeof message.bridge_chain_id === "number")
                        object.bridge_chain_id = options.longs === String ? String(message.bridge_chain_id) : message.bridge_chain_id;
                    else
                        object.bridge_chain_id = options.longs === String ? $util.Long.prototype.toString.call(message.bridge_chain_id) : options.longs === Number ? new $util.LongBits(message.bridge_chain_id.low >>> 0, message.bridge_chain_id.high >>> 0).toNumber(true) : message.bridge_chain_id;
                if (message.signed_valsets_window != null && message.hasOwnProperty("signed_valsets_window"))
                    if (typeof message.signed_valsets_window === "number")
                        object.signed_valsets_window = options.longs === String ? String(message.signed_valsets_window) : message.signed_valsets_window;
                    else
                        object.signed_valsets_window = options.longs === String ? $util.Long.prototype.toString.call(message.signed_valsets_window) : options.longs === Number ? new $util.LongBits(message.signed_valsets_window.low >>> 0, message.signed_valsets_window.high >>> 0).toNumber(true) : message.signed_valsets_window;
                if (message.signed_batches_window != null && message.hasOwnProperty("signed_batches_window"))
                    if (typeof message.signed_batches_window === "number")
                        object.signed_batches_window = options.longs === String ? String(message.signed_batches_window) : message.signed_batches_window;
                    else
                        object.signed_batches_window = options.longs === String ? $util.Long.prototype.toString.call(message.signed_batches_window) : options.longs === Number ? new $util.LongBits(message.signed_batches_window.low >>> 0, message.signed_batches_window.high >>> 0).toNumber(true) : message.signed_batches_window;
                if (message.signed_logic_calls_window != null && message.hasOwnProperty("signed_logic_calls_window"))
                    if (typeof message.signed_logic_calls_window === "number")
                        object.signed_logic_calls_window = options.longs === String ? String(message.signed_logic_calls_window) : message.signed_logic_calls_window;
                    else
                        object.signed_logic_calls_window = options.longs === String ? $util.Long.prototype.toString.call(message.signed_logic_calls_window) : options.longs === Number ? new $util.LongBits(message.signed_logic_calls_window.low >>> 0, message.signed_logic_calls_window.high >>> 0).toNumber(true) : message.signed_logic_calls_window;
                if (message.target_batch_timeout != null && message.hasOwnProperty("target_batch_timeout"))
                    if (typeof message.target_batch_timeout === "number")
                        object.target_batch_timeout = options.longs === String ? String(message.target_batch_timeout) : message.target_batch_timeout;
                    else
                        object.target_batch_timeout = options.longs === String ? $util.Long.prototype.toString.call(message.target_batch_timeout) : options.longs === Number ? new $util.LongBits(message.target_batch_timeout.low >>> 0, message.target_batch_timeout.high >>> 0).toNumber(true) : message.target_batch_timeout;
                if (message.average_block_time != null && message.hasOwnProperty("average_block_time"))
                    if (typeof message.average_block_time === "number")
                        object.average_block_time = options.longs === String ? String(message.average_block_time) : message.average_block_time;
                    else
                        object.average_block_time = options.longs === String ? $util.Long.prototype.toString.call(message.average_block_time) : options.longs === Number ? new $util.LongBits(message.average_block_time.low >>> 0, message.average_block_time.high >>> 0).toNumber(true) : message.average_block_time;
                if (message.average_ethereum_block_time != null && message.hasOwnProperty("average_ethereum_block_time"))
                    if (typeof message.average_ethereum_block_time === "number")
                        object.average_ethereum_block_time = options.longs === String ? String(message.average_ethereum_block_time) : message.average_ethereum_block_time;
                    else
                        object.average_ethereum_block_time = options.longs === String ? $util.Long.prototype.toString.call(message.average_ethereum_block_time) : options.longs === Number ? new $util.LongBits(message.average_ethereum_block_time.low >>> 0, message.average_ethereum_block_time.high >>> 0).toNumber(true) : message.average_ethereum_block_time;
                if (message.slash_fraction_valset != null && message.hasOwnProperty("slash_fraction_valset"))
                    object.slash_fraction_valset = options.bytes === String ? $util.base64.encode(message.slash_fraction_valset, 0, message.slash_fraction_valset.length) : options.bytes === Array ? Array.prototype.slice.call(message.slash_fraction_valset) : message.slash_fraction_valset;
                if (message.slash_fraction_batch != null && message.hasOwnProperty("slash_fraction_batch"))
                    object.slash_fraction_batch = options.bytes === String ? $util.base64.encode(message.slash_fraction_batch, 0, message.slash_fraction_batch.length) : options.bytes === Array ? Array.prototype.slice.call(message.slash_fraction_batch) : message.slash_fraction_batch;
                if (message.slash_fraction_logic_call != null && message.hasOwnProperty("slash_fraction_logic_call"))
                    object.slash_fraction_logic_call = options.bytes === String ? $util.base64.encode(message.slash_fraction_logic_call, 0, message.slash_fraction_logic_call.length) : options.bytes === Array ? Array.prototype.slice.call(message.slash_fraction_logic_call) : message.slash_fraction_logic_call;
                if (message.unbond_slashing_valsets_window != null && message.hasOwnProperty("unbond_slashing_valsets_window"))
                    if (typeof message.unbond_slashing_valsets_window === "number")
                        object.unbond_slashing_valsets_window = options.longs === String ? String(message.unbond_slashing_valsets_window) : message.unbond_slashing_valsets_window;
                    else
                        object.unbond_slashing_valsets_window = options.longs === String ? $util.Long.prototype.toString.call(message.unbond_slashing_valsets_window) : options.longs === Number ? new $util.LongBits(message.unbond_slashing_valsets_window.low >>> 0, message.unbond_slashing_valsets_window.high >>> 0).toNumber(true) : message.unbond_slashing_valsets_window;
                if (message.slash_fraction_bad_eth_signature != null && message.hasOwnProperty("slash_fraction_bad_eth_signature"))
                    object.slash_fraction_bad_eth_signature = options.bytes === String ? $util.base64.encode(message.slash_fraction_bad_eth_signature, 0, message.slash_fraction_bad_eth_signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.slash_fraction_bad_eth_signature) : message.slash_fraction_bad_eth_signature;
                if (message.valset_reward != null && message.hasOwnProperty("valset_reward"))
                    object.valset_reward = $root.cosmos.base.v1beta1.Coin.toObject(message.valset_reward, options);
                if (message.bridge_active != null && message.hasOwnProperty("bridge_active"))
                    object.bridge_active = message.bridge_active;
                if (message.ethereum_blacklist && message.ethereum_blacklist.length) {
                    object.ethereum_blacklist = [];
                    for (let j = 0; j < message.ethereum_blacklist.length; ++j)
                        object.ethereum_blacklist[j] = message.ethereum_blacklist[j];
                }
                if (message.min_chain_fee_basis_points != null && message.hasOwnProperty("min_chain_fee_basis_points"))
                    if (typeof message.min_chain_fee_basis_points === "number")
                        object.min_chain_fee_basis_points = options.longs === String ? String(message.min_chain_fee_basis_points) : message.min_chain_fee_basis_points;
                    else
                        object.min_chain_fee_basis_points = options.longs === String ? $util.Long.prototype.toString.call(message.min_chain_fee_basis_points) : options.longs === Number ? new $util.LongBits(message.min_chain_fee_basis_points.low >>> 0, message.min_chain_fee_basis_points.high >>> 0).toNumber(true) : message.min_chain_fee_basis_points;
                return object;
            };

            /**
             * Converts this Params to JSON.
             * @function toJSON
             * @memberof gravity.v1.Params
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Params.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Params;
        })();

        v1.GenesisState = (function() {

            /**
             * Properties of a GenesisState.
             * @memberof gravity.v1
             * @interface IGenesisState
             * @property {gravity.v1.IParams|null} [params] GenesisState params
             * @property {gravity.v1.IGravityNonces|null} [gravity_nonces] GenesisState gravity_nonces
             * @property {Array.<gravity.v1.IValset>|null} [valsets] GenesisState valsets
             * @property {Array.<gravity.v1.IMsgValsetConfirm>|null} [valset_confirms] GenesisState valset_confirms
             * @property {Array.<gravity.v1.IOutgoingTxBatch>|null} [batches] GenesisState batches
             * @property {Array.<gravity.v1.IMsgConfirmBatch>|null} [batch_confirms] GenesisState batch_confirms
             * @property {Array.<gravity.v1.IOutgoingLogicCall>|null} [logic_calls] GenesisState logic_calls
             * @property {Array.<gravity.v1.IMsgConfirmLogicCall>|null} [logic_call_confirms] GenesisState logic_call_confirms
             * @property {Array.<gravity.v1.IAttestation>|null} [attestations] GenesisState attestations
             * @property {Array.<gravity.v1.IMsgSetOrchestratorAddress>|null} [delegate_keys] GenesisState delegate_keys
             * @property {Array.<gravity.v1.IERC20ToDenom>|null} [erc20_to_denoms] GenesisState erc20_to_denoms
             * @property {Array.<gravity.v1.IOutgoingTransferTx>|null} [unbatched_transfers] GenesisState unbatched_transfers
             * @property {Array.<gravity.v1.IPendingIbcAutoForward>|null} [pending_ibc_auto_forwards] GenesisState pending_ibc_auto_forwards
             */

            /**
             * Constructs a new GenesisState.
             * @memberof gravity.v1
             * @classdesc Represents a GenesisState.
             * @implements IGenesisState
             * @constructor
             * @param {gravity.v1.IGenesisState=} [properties] Properties to set
             */
            function GenesisState(properties) {
                this.valsets = [];
                this.valset_confirms = [];
                this.batches = [];
                this.batch_confirms = [];
                this.logic_calls = [];
                this.logic_call_confirms = [];
                this.attestations = [];
                this.delegate_keys = [];
                this.erc20_to_denoms = [];
                this.unbatched_transfers = [];
                this.pending_ibc_auto_forwards = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GenesisState params.
             * @member {gravity.v1.IParams|null|undefined} params
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.params = null;

            /**
             * GenesisState gravity_nonces.
             * @member {gravity.v1.IGravityNonces|null|undefined} gravity_nonces
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.gravity_nonces = null;

            /**
             * GenesisState valsets.
             * @member {Array.<gravity.v1.IValset>} valsets
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.valsets = $util.emptyArray;

            /**
             * GenesisState valset_confirms.
             * @member {Array.<gravity.v1.IMsgValsetConfirm>} valset_confirms
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.valset_confirms = $util.emptyArray;

            /**
             * GenesisState batches.
             * @member {Array.<gravity.v1.IOutgoingTxBatch>} batches
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.batches = $util.emptyArray;

            /**
             * GenesisState batch_confirms.
             * @member {Array.<gravity.v1.IMsgConfirmBatch>} batch_confirms
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.batch_confirms = $util.emptyArray;

            /**
             * GenesisState logic_calls.
             * @member {Array.<gravity.v1.IOutgoingLogicCall>} logic_calls
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.logic_calls = $util.emptyArray;

            /**
             * GenesisState logic_call_confirms.
             * @member {Array.<gravity.v1.IMsgConfirmLogicCall>} logic_call_confirms
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.logic_call_confirms = $util.emptyArray;

            /**
             * GenesisState attestations.
             * @member {Array.<gravity.v1.IAttestation>} attestations
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.attestations = $util.emptyArray;

            /**
             * GenesisState delegate_keys.
             * @member {Array.<gravity.v1.IMsgSetOrchestratorAddress>} delegate_keys
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.delegate_keys = $util.emptyArray;

            /**
             * GenesisState erc20_to_denoms.
             * @member {Array.<gravity.v1.IERC20ToDenom>} erc20_to_denoms
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.erc20_to_denoms = $util.emptyArray;

            /**
             * GenesisState unbatched_transfers.
             * @member {Array.<gravity.v1.IOutgoingTransferTx>} unbatched_transfers
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.unbatched_transfers = $util.emptyArray;

            /**
             * GenesisState pending_ibc_auto_forwards.
             * @member {Array.<gravity.v1.IPendingIbcAutoForward>} pending_ibc_auto_forwards
             * @memberof gravity.v1.GenesisState
             * @instance
             */
            GenesisState.prototype.pending_ibc_auto_forwards = $util.emptyArray;

            /**
             * Encodes the specified GenesisState message. Does not implicitly {@link gravity.v1.GenesisState.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.GenesisState
             * @static
             * @param {gravity.v1.IGenesisState} message GenesisState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GenesisState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                    $root.gravity.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gravity_nonces != null && Object.hasOwnProperty.call(message, "gravity_nonces"))
                    $root.gravity.v1.GravityNonces.encode(message.gravity_nonces, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.valsets != null && message.valsets.length)
                    for (let i = 0; i < message.valsets.length; ++i)
                        $root.gravity.v1.Valset.encode(message.valsets[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.valset_confirms != null && message.valset_confirms.length)
                    for (let i = 0; i < message.valset_confirms.length; ++i)
                        $root.gravity.v1.MsgValsetConfirm.encode(message.valset_confirms[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.batches != null && message.batches.length)
                    for (let i = 0; i < message.batches.length; ++i)
                        $root.gravity.v1.OutgoingTxBatch.encode(message.batches[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.batch_confirms != null && message.batch_confirms.length)
                    for (let i = 0; i < message.batch_confirms.length; ++i)
                        $root.gravity.v1.MsgConfirmBatch.encode(message.batch_confirms[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.logic_calls != null && message.logic_calls.length)
                    for (let i = 0; i < message.logic_calls.length; ++i)
                        $root.gravity.v1.OutgoingLogicCall.encode(message.logic_calls[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.logic_call_confirms != null && message.logic_call_confirms.length)
                    for (let i = 0; i < message.logic_call_confirms.length; ++i)
                        $root.gravity.v1.MsgConfirmLogicCall.encode(message.logic_call_confirms[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.attestations != null && message.attestations.length)
                    for (let i = 0; i < message.attestations.length; ++i)
                        $root.gravity.v1.Attestation.encode(message.attestations[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.delegate_keys != null && message.delegate_keys.length)
                    for (let i = 0; i < message.delegate_keys.length; ++i)
                        $root.gravity.v1.MsgSetOrchestratorAddress.encode(message.delegate_keys[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.erc20_to_denoms != null && message.erc20_to_denoms.length)
                    for (let i = 0; i < message.erc20_to_denoms.length; ++i)
                        $root.gravity.v1.ERC20ToDenom.encode(message.erc20_to_denoms[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.unbatched_transfers != null && message.unbatched_transfers.length)
                    for (let i = 0; i < message.unbatched_transfers.length; ++i)
                        $root.gravity.v1.OutgoingTransferTx.encode(message.unbatched_transfers[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.pending_ibc_auto_forwards != null && message.pending_ibc_auto_forwards.length)
                    for (let i = 0; i < message.pending_ibc_auto_forwards.length; ++i)
                        $root.gravity.v1.PendingIbcAutoForward.encode(message.pending_ibc_auto_forwards[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link gravity.v1.GenesisState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.GenesisState
             * @static
             * @param {gravity.v1.IGenesisState} message GenesisState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GenesisState message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.GenesisState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.GenesisState} GenesisState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GenesisState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.GenesisState();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.params = $root.gravity.v1.Params.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gravity_nonces = $root.gravity.v1.GravityNonces.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.valsets && message.valsets.length))
                            message.valsets = [];
                        message.valsets.push($root.gravity.v1.Valset.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.valset_confirms && message.valset_confirms.length))
                            message.valset_confirms = [];
                        message.valset_confirms.push($root.gravity.v1.MsgValsetConfirm.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.batches && message.batches.length))
                            message.batches = [];
                        message.batches.push($root.gravity.v1.OutgoingTxBatch.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.batch_confirms && message.batch_confirms.length))
                            message.batch_confirms = [];
                        message.batch_confirms.push($root.gravity.v1.MsgConfirmBatch.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.logic_calls && message.logic_calls.length))
                            message.logic_calls = [];
                        message.logic_calls.push($root.gravity.v1.OutgoingLogicCall.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.logic_call_confirms && message.logic_call_confirms.length))
                            message.logic_call_confirms = [];
                        message.logic_call_confirms.push($root.gravity.v1.MsgConfirmLogicCall.decode(reader, reader.uint32()));
                        break;
                    case 9:
                        if (!(message.attestations && message.attestations.length))
                            message.attestations = [];
                        message.attestations.push($root.gravity.v1.Attestation.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.delegate_keys && message.delegate_keys.length))
                            message.delegate_keys = [];
                        message.delegate_keys.push($root.gravity.v1.MsgSetOrchestratorAddress.decode(reader, reader.uint32()));
                        break;
                    case 11:
                        if (!(message.erc20_to_denoms && message.erc20_to_denoms.length))
                            message.erc20_to_denoms = [];
                        message.erc20_to_denoms.push($root.gravity.v1.ERC20ToDenom.decode(reader, reader.uint32()));
                        break;
                    case 12:
                        if (!(message.unbatched_transfers && message.unbatched_transfers.length))
                            message.unbatched_transfers = [];
                        message.unbatched_transfers.push($root.gravity.v1.OutgoingTransferTx.decode(reader, reader.uint32()));
                        break;
                    case 13:
                        if (!(message.pending_ibc_auto_forwards && message.pending_ibc_auto_forwards.length))
                            message.pending_ibc_auto_forwards = [];
                        message.pending_ibc_auto_forwards.push($root.gravity.v1.PendingIbcAutoForward.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GenesisState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.GenesisState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.GenesisState} GenesisState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GenesisState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GenesisState message.
             * @function verify
             * @memberof gravity.v1.GenesisState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GenesisState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.params != null && message.hasOwnProperty("params")) {
                    let error = $root.gravity.v1.Params.verify(message.params);
                    if (error)
                        return "params." + error;
                }
                if (message.gravity_nonces != null && message.hasOwnProperty("gravity_nonces")) {
                    let error = $root.gravity.v1.GravityNonces.verify(message.gravity_nonces);
                    if (error)
                        return "gravity_nonces." + error;
                }
                if (message.valsets != null && message.hasOwnProperty("valsets")) {
                    if (!Array.isArray(message.valsets))
                        return "valsets: array expected";
                    for (let i = 0; i < message.valsets.length; ++i) {
                        let error = $root.gravity.v1.Valset.verify(message.valsets[i]);
                        if (error)
                            return "valsets." + error;
                    }
                }
                if (message.valset_confirms != null && message.hasOwnProperty("valset_confirms")) {
                    if (!Array.isArray(message.valset_confirms))
                        return "valset_confirms: array expected";
                    for (let i = 0; i < message.valset_confirms.length; ++i) {
                        let error = $root.gravity.v1.MsgValsetConfirm.verify(message.valset_confirms[i]);
                        if (error)
                            return "valset_confirms." + error;
                    }
                }
                if (message.batches != null && message.hasOwnProperty("batches")) {
                    if (!Array.isArray(message.batches))
                        return "batches: array expected";
                    for (let i = 0; i < message.batches.length; ++i) {
                        let error = $root.gravity.v1.OutgoingTxBatch.verify(message.batches[i]);
                        if (error)
                            return "batches." + error;
                    }
                }
                if (message.batch_confirms != null && message.hasOwnProperty("batch_confirms")) {
                    if (!Array.isArray(message.batch_confirms))
                        return "batch_confirms: array expected";
                    for (let i = 0; i < message.batch_confirms.length; ++i) {
                        let error = $root.gravity.v1.MsgConfirmBatch.verify(message.batch_confirms[i]);
                        if (error)
                            return "batch_confirms." + error;
                    }
                }
                if (message.logic_calls != null && message.hasOwnProperty("logic_calls")) {
                    if (!Array.isArray(message.logic_calls))
                        return "logic_calls: array expected";
                    for (let i = 0; i < message.logic_calls.length; ++i) {
                        let error = $root.gravity.v1.OutgoingLogicCall.verify(message.logic_calls[i]);
                        if (error)
                            return "logic_calls." + error;
                    }
                }
                if (message.logic_call_confirms != null && message.hasOwnProperty("logic_call_confirms")) {
                    if (!Array.isArray(message.logic_call_confirms))
                        return "logic_call_confirms: array expected";
                    for (let i = 0; i < message.logic_call_confirms.length; ++i) {
                        let error = $root.gravity.v1.MsgConfirmLogicCall.verify(message.logic_call_confirms[i]);
                        if (error)
                            return "logic_call_confirms." + error;
                    }
                }
                if (message.attestations != null && message.hasOwnProperty("attestations")) {
                    if (!Array.isArray(message.attestations))
                        return "attestations: array expected";
                    for (let i = 0; i < message.attestations.length; ++i) {
                        let error = $root.gravity.v1.Attestation.verify(message.attestations[i]);
                        if (error)
                            return "attestations." + error;
                    }
                }
                if (message.delegate_keys != null && message.hasOwnProperty("delegate_keys")) {
                    if (!Array.isArray(message.delegate_keys))
                        return "delegate_keys: array expected";
                    for (let i = 0; i < message.delegate_keys.length; ++i) {
                        let error = $root.gravity.v1.MsgSetOrchestratorAddress.verify(message.delegate_keys[i]);
                        if (error)
                            return "delegate_keys." + error;
                    }
                }
                if (message.erc20_to_denoms != null && message.hasOwnProperty("erc20_to_denoms")) {
                    if (!Array.isArray(message.erc20_to_denoms))
                        return "erc20_to_denoms: array expected";
                    for (let i = 0; i < message.erc20_to_denoms.length; ++i) {
                        let error = $root.gravity.v1.ERC20ToDenom.verify(message.erc20_to_denoms[i]);
                        if (error)
                            return "erc20_to_denoms." + error;
                    }
                }
                if (message.unbatched_transfers != null && message.hasOwnProperty("unbatched_transfers")) {
                    if (!Array.isArray(message.unbatched_transfers))
                        return "unbatched_transfers: array expected";
                    for (let i = 0; i < message.unbatched_transfers.length; ++i) {
                        let error = $root.gravity.v1.OutgoingTransferTx.verify(message.unbatched_transfers[i]);
                        if (error)
                            return "unbatched_transfers." + error;
                    }
                }
                if (message.pending_ibc_auto_forwards != null && message.hasOwnProperty("pending_ibc_auto_forwards")) {
                    if (!Array.isArray(message.pending_ibc_auto_forwards))
                        return "pending_ibc_auto_forwards: array expected";
                    for (let i = 0; i < message.pending_ibc_auto_forwards.length; ++i) {
                        let error = $root.gravity.v1.PendingIbcAutoForward.verify(message.pending_ibc_auto_forwards[i]);
                        if (error)
                            return "pending_ibc_auto_forwards." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.GenesisState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.GenesisState} GenesisState
             */
            GenesisState.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.GenesisState)
                    return object;
                let message = new $root.gravity.v1.GenesisState();
                if (object.params != null) {
                    if (typeof object.params !== "object")
                        throw TypeError(".gravity.v1.GenesisState.params: object expected");
                    message.params = $root.gravity.v1.Params.fromObject(object.params);
                }
                if (object.gravity_nonces != null) {
                    if (typeof object.gravity_nonces !== "object")
                        throw TypeError(".gravity.v1.GenesisState.gravity_nonces: object expected");
                    message.gravity_nonces = $root.gravity.v1.GravityNonces.fromObject(object.gravity_nonces);
                }
                if (object.valsets) {
                    if (!Array.isArray(object.valsets))
                        throw TypeError(".gravity.v1.GenesisState.valsets: array expected");
                    message.valsets = [];
                    for (let i = 0; i < object.valsets.length; ++i) {
                        if (typeof object.valsets[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.valsets: object expected");
                        message.valsets[i] = $root.gravity.v1.Valset.fromObject(object.valsets[i]);
                    }
                }
                if (object.valset_confirms) {
                    if (!Array.isArray(object.valset_confirms))
                        throw TypeError(".gravity.v1.GenesisState.valset_confirms: array expected");
                    message.valset_confirms = [];
                    for (let i = 0; i < object.valset_confirms.length; ++i) {
                        if (typeof object.valset_confirms[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.valset_confirms: object expected");
                        message.valset_confirms[i] = $root.gravity.v1.MsgValsetConfirm.fromObject(object.valset_confirms[i]);
                    }
                }
                if (object.batches) {
                    if (!Array.isArray(object.batches))
                        throw TypeError(".gravity.v1.GenesisState.batches: array expected");
                    message.batches = [];
                    for (let i = 0; i < object.batches.length; ++i) {
                        if (typeof object.batches[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.batches: object expected");
                        message.batches[i] = $root.gravity.v1.OutgoingTxBatch.fromObject(object.batches[i]);
                    }
                }
                if (object.batch_confirms) {
                    if (!Array.isArray(object.batch_confirms))
                        throw TypeError(".gravity.v1.GenesisState.batch_confirms: array expected");
                    message.batch_confirms = [];
                    for (let i = 0; i < object.batch_confirms.length; ++i) {
                        if (typeof object.batch_confirms[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.batch_confirms: object expected");
                        message.batch_confirms[i] = $root.gravity.v1.MsgConfirmBatch.fromObject(object.batch_confirms[i]);
                    }
                }
                if (object.logic_calls) {
                    if (!Array.isArray(object.logic_calls))
                        throw TypeError(".gravity.v1.GenesisState.logic_calls: array expected");
                    message.logic_calls = [];
                    for (let i = 0; i < object.logic_calls.length; ++i) {
                        if (typeof object.logic_calls[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.logic_calls: object expected");
                        message.logic_calls[i] = $root.gravity.v1.OutgoingLogicCall.fromObject(object.logic_calls[i]);
                    }
                }
                if (object.logic_call_confirms) {
                    if (!Array.isArray(object.logic_call_confirms))
                        throw TypeError(".gravity.v1.GenesisState.logic_call_confirms: array expected");
                    message.logic_call_confirms = [];
                    for (let i = 0; i < object.logic_call_confirms.length; ++i) {
                        if (typeof object.logic_call_confirms[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.logic_call_confirms: object expected");
                        message.logic_call_confirms[i] = $root.gravity.v1.MsgConfirmLogicCall.fromObject(object.logic_call_confirms[i]);
                    }
                }
                if (object.attestations) {
                    if (!Array.isArray(object.attestations))
                        throw TypeError(".gravity.v1.GenesisState.attestations: array expected");
                    message.attestations = [];
                    for (let i = 0; i < object.attestations.length; ++i) {
                        if (typeof object.attestations[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.attestations: object expected");
                        message.attestations[i] = $root.gravity.v1.Attestation.fromObject(object.attestations[i]);
                    }
                }
                if (object.delegate_keys) {
                    if (!Array.isArray(object.delegate_keys))
                        throw TypeError(".gravity.v1.GenesisState.delegate_keys: array expected");
                    message.delegate_keys = [];
                    for (let i = 0; i < object.delegate_keys.length; ++i) {
                        if (typeof object.delegate_keys[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.delegate_keys: object expected");
                        message.delegate_keys[i] = $root.gravity.v1.MsgSetOrchestratorAddress.fromObject(object.delegate_keys[i]);
                    }
                }
                if (object.erc20_to_denoms) {
                    if (!Array.isArray(object.erc20_to_denoms))
                        throw TypeError(".gravity.v1.GenesisState.erc20_to_denoms: array expected");
                    message.erc20_to_denoms = [];
                    for (let i = 0; i < object.erc20_to_denoms.length; ++i) {
                        if (typeof object.erc20_to_denoms[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.erc20_to_denoms: object expected");
                        message.erc20_to_denoms[i] = $root.gravity.v1.ERC20ToDenom.fromObject(object.erc20_to_denoms[i]);
                    }
                }
                if (object.unbatched_transfers) {
                    if (!Array.isArray(object.unbatched_transfers))
                        throw TypeError(".gravity.v1.GenesisState.unbatched_transfers: array expected");
                    message.unbatched_transfers = [];
                    for (let i = 0; i < object.unbatched_transfers.length; ++i) {
                        if (typeof object.unbatched_transfers[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.unbatched_transfers: object expected");
                        message.unbatched_transfers[i] = $root.gravity.v1.OutgoingTransferTx.fromObject(object.unbatched_transfers[i]);
                    }
                }
                if (object.pending_ibc_auto_forwards) {
                    if (!Array.isArray(object.pending_ibc_auto_forwards))
                        throw TypeError(".gravity.v1.GenesisState.pending_ibc_auto_forwards: array expected");
                    message.pending_ibc_auto_forwards = [];
                    for (let i = 0; i < object.pending_ibc_auto_forwards.length; ++i) {
                        if (typeof object.pending_ibc_auto_forwards[i] !== "object")
                            throw TypeError(".gravity.v1.GenesisState.pending_ibc_auto_forwards: object expected");
                        message.pending_ibc_auto_forwards[i] = $root.gravity.v1.PendingIbcAutoForward.fromObject(object.pending_ibc_auto_forwards[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.GenesisState
             * @static
             * @param {gravity.v1.GenesisState} message GenesisState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GenesisState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.valsets = [];
                    object.valset_confirms = [];
                    object.batches = [];
                    object.batch_confirms = [];
                    object.logic_calls = [];
                    object.logic_call_confirms = [];
                    object.attestations = [];
                    object.delegate_keys = [];
                    object.erc20_to_denoms = [];
                    object.unbatched_transfers = [];
                    object.pending_ibc_auto_forwards = [];
                }
                if (options.defaults) {
                    object.params = null;
                    object.gravity_nonces = null;
                }
                if (message.params != null && message.hasOwnProperty("params"))
                    object.params = $root.gravity.v1.Params.toObject(message.params, options);
                if (message.gravity_nonces != null && message.hasOwnProperty("gravity_nonces"))
                    object.gravity_nonces = $root.gravity.v1.GravityNonces.toObject(message.gravity_nonces, options);
                if (message.valsets && message.valsets.length) {
                    object.valsets = [];
                    for (let j = 0; j < message.valsets.length; ++j)
                        object.valsets[j] = $root.gravity.v1.Valset.toObject(message.valsets[j], options);
                }
                if (message.valset_confirms && message.valset_confirms.length) {
                    object.valset_confirms = [];
                    for (let j = 0; j < message.valset_confirms.length; ++j)
                        object.valset_confirms[j] = $root.gravity.v1.MsgValsetConfirm.toObject(message.valset_confirms[j], options);
                }
                if (message.batches && message.batches.length) {
                    object.batches = [];
                    for (let j = 0; j < message.batches.length; ++j)
                        object.batches[j] = $root.gravity.v1.OutgoingTxBatch.toObject(message.batches[j], options);
                }
                if (message.batch_confirms && message.batch_confirms.length) {
                    object.batch_confirms = [];
                    for (let j = 0; j < message.batch_confirms.length; ++j)
                        object.batch_confirms[j] = $root.gravity.v1.MsgConfirmBatch.toObject(message.batch_confirms[j], options);
                }
                if (message.logic_calls && message.logic_calls.length) {
                    object.logic_calls = [];
                    for (let j = 0; j < message.logic_calls.length; ++j)
                        object.logic_calls[j] = $root.gravity.v1.OutgoingLogicCall.toObject(message.logic_calls[j], options);
                }
                if (message.logic_call_confirms && message.logic_call_confirms.length) {
                    object.logic_call_confirms = [];
                    for (let j = 0; j < message.logic_call_confirms.length; ++j)
                        object.logic_call_confirms[j] = $root.gravity.v1.MsgConfirmLogicCall.toObject(message.logic_call_confirms[j], options);
                }
                if (message.attestations && message.attestations.length) {
                    object.attestations = [];
                    for (let j = 0; j < message.attestations.length; ++j)
                        object.attestations[j] = $root.gravity.v1.Attestation.toObject(message.attestations[j], options);
                }
                if (message.delegate_keys && message.delegate_keys.length) {
                    object.delegate_keys = [];
                    for (let j = 0; j < message.delegate_keys.length; ++j)
                        object.delegate_keys[j] = $root.gravity.v1.MsgSetOrchestratorAddress.toObject(message.delegate_keys[j], options);
                }
                if (message.erc20_to_denoms && message.erc20_to_denoms.length) {
                    object.erc20_to_denoms = [];
                    for (let j = 0; j < message.erc20_to_denoms.length; ++j)
                        object.erc20_to_denoms[j] = $root.gravity.v1.ERC20ToDenom.toObject(message.erc20_to_denoms[j], options);
                }
                if (message.unbatched_transfers && message.unbatched_transfers.length) {
                    object.unbatched_transfers = [];
                    for (let j = 0; j < message.unbatched_transfers.length; ++j)
                        object.unbatched_transfers[j] = $root.gravity.v1.OutgoingTransferTx.toObject(message.unbatched_transfers[j], options);
                }
                if (message.pending_ibc_auto_forwards && message.pending_ibc_auto_forwards.length) {
                    object.pending_ibc_auto_forwards = [];
                    for (let j = 0; j < message.pending_ibc_auto_forwards.length; ++j)
                        object.pending_ibc_auto_forwards[j] = $root.gravity.v1.PendingIbcAutoForward.toObject(message.pending_ibc_auto_forwards[j], options);
                }
                return object;
            };

            /**
             * Converts this GenesisState to JSON.
             * @function toJSON
             * @memberof gravity.v1.GenesisState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GenesisState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GenesisState;
        })();

        v1.GravityNonces = (function() {

            /**
             * Properties of a GravityNonces.
             * @memberof gravity.v1
             * @interface IGravityNonces
             * @property {number|null} [latest_valset_nonce] GravityNonces latest_valset_nonce
             * @property {number|null} [last_observed_nonce] GravityNonces last_observed_nonce
             * @property {number|null} [last_slashed_valset_nonce] GravityNonces last_slashed_valset_nonce
             * @property {number|null} [last_slashed_batch_block] GravityNonces last_slashed_batch_block
             * @property {number|null} [last_slashed_logic_call_block] GravityNonces last_slashed_logic_call_block
             * @property {number|null} [last_tx_pool_id] GravityNonces last_tx_pool_id
             * @property {number|null} [last_batch_id] GravityNonces last_batch_id
             */

            /**
             * Constructs a new GravityNonces.
             * @memberof gravity.v1
             * @classdesc Represents a GravityNonces.
             * @implements IGravityNonces
             * @constructor
             * @param {gravity.v1.IGravityNonces=} [properties] Properties to set
             */
            function GravityNonces(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GravityNonces latest_valset_nonce.
             * @member {number} latest_valset_nonce
             * @memberof gravity.v1.GravityNonces
             * @instance
             */
            GravityNonces.prototype.latest_valset_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GravityNonces last_observed_nonce.
             * @member {number} last_observed_nonce
             * @memberof gravity.v1.GravityNonces
             * @instance
             */
            GravityNonces.prototype.last_observed_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GravityNonces last_slashed_valset_nonce.
             * @member {number} last_slashed_valset_nonce
             * @memberof gravity.v1.GravityNonces
             * @instance
             */
            GravityNonces.prototype.last_slashed_valset_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GravityNonces last_slashed_batch_block.
             * @member {number} last_slashed_batch_block
             * @memberof gravity.v1.GravityNonces
             * @instance
             */
            GravityNonces.prototype.last_slashed_batch_block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GravityNonces last_slashed_logic_call_block.
             * @member {number} last_slashed_logic_call_block
             * @memberof gravity.v1.GravityNonces
             * @instance
             */
            GravityNonces.prototype.last_slashed_logic_call_block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GravityNonces last_tx_pool_id.
             * @member {number} last_tx_pool_id
             * @memberof gravity.v1.GravityNonces
             * @instance
             */
            GravityNonces.prototype.last_tx_pool_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GravityNonces last_batch_id.
             * @member {number} last_batch_id
             * @memberof gravity.v1.GravityNonces
             * @instance
             */
            GravityNonces.prototype.last_batch_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified GravityNonces message. Does not implicitly {@link gravity.v1.GravityNonces.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.GravityNonces
             * @static
             * @param {gravity.v1.IGravityNonces} message GravityNonces message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GravityNonces.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.latest_valset_nonce != null && Object.hasOwnProperty.call(message, "latest_valset_nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.latest_valset_nonce);
                if (message.last_observed_nonce != null && Object.hasOwnProperty.call(message, "last_observed_nonce"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.last_observed_nonce);
                if (message.last_slashed_valset_nonce != null && Object.hasOwnProperty.call(message, "last_slashed_valset_nonce"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.last_slashed_valset_nonce);
                if (message.last_slashed_batch_block != null && Object.hasOwnProperty.call(message, "last_slashed_batch_block"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.last_slashed_batch_block);
                if (message.last_slashed_logic_call_block != null && Object.hasOwnProperty.call(message, "last_slashed_logic_call_block"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.last_slashed_logic_call_block);
                if (message.last_tx_pool_id != null && Object.hasOwnProperty.call(message, "last_tx_pool_id"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.last_tx_pool_id);
                if (message.last_batch_id != null && Object.hasOwnProperty.call(message, "last_batch_id"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.last_batch_id);
                return writer;
            };

            /**
             * Encodes the specified GravityNonces message, length delimited. Does not implicitly {@link gravity.v1.GravityNonces.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.GravityNonces
             * @static
             * @param {gravity.v1.IGravityNonces} message GravityNonces message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GravityNonces.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GravityNonces message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.GravityNonces
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.GravityNonces} GravityNonces
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GravityNonces.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.GravityNonces();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.latest_valset_nonce = reader.uint64();
                        break;
                    case 2:
                        message.last_observed_nonce = reader.uint64();
                        break;
                    case 3:
                        message.last_slashed_valset_nonce = reader.uint64();
                        break;
                    case 4:
                        message.last_slashed_batch_block = reader.uint64();
                        break;
                    case 5:
                        message.last_slashed_logic_call_block = reader.uint64();
                        break;
                    case 6:
                        message.last_tx_pool_id = reader.uint64();
                        break;
                    case 7:
                        message.last_batch_id = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GravityNonces message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.GravityNonces
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.GravityNonces} GravityNonces
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GravityNonces.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GravityNonces message.
             * @function verify
             * @memberof gravity.v1.GravityNonces
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GravityNonces.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.latest_valset_nonce != null && message.hasOwnProperty("latest_valset_nonce"))
                    if (!$util.isInteger(message.latest_valset_nonce) && !(message.latest_valset_nonce && $util.isInteger(message.latest_valset_nonce.low) && $util.isInteger(message.latest_valset_nonce.high)))
                        return "latest_valset_nonce: integer|Long expected";
                if (message.last_observed_nonce != null && message.hasOwnProperty("last_observed_nonce"))
                    if (!$util.isInteger(message.last_observed_nonce) && !(message.last_observed_nonce && $util.isInteger(message.last_observed_nonce.low) && $util.isInteger(message.last_observed_nonce.high)))
                        return "last_observed_nonce: integer|Long expected";
                if (message.last_slashed_valset_nonce != null && message.hasOwnProperty("last_slashed_valset_nonce"))
                    if (!$util.isInteger(message.last_slashed_valset_nonce) && !(message.last_slashed_valset_nonce && $util.isInteger(message.last_slashed_valset_nonce.low) && $util.isInteger(message.last_slashed_valset_nonce.high)))
                        return "last_slashed_valset_nonce: integer|Long expected";
                if (message.last_slashed_batch_block != null && message.hasOwnProperty("last_slashed_batch_block"))
                    if (!$util.isInteger(message.last_slashed_batch_block) && !(message.last_slashed_batch_block && $util.isInteger(message.last_slashed_batch_block.low) && $util.isInteger(message.last_slashed_batch_block.high)))
                        return "last_slashed_batch_block: integer|Long expected";
                if (message.last_slashed_logic_call_block != null && message.hasOwnProperty("last_slashed_logic_call_block"))
                    if (!$util.isInteger(message.last_slashed_logic_call_block) && !(message.last_slashed_logic_call_block && $util.isInteger(message.last_slashed_logic_call_block.low) && $util.isInteger(message.last_slashed_logic_call_block.high)))
                        return "last_slashed_logic_call_block: integer|Long expected";
                if (message.last_tx_pool_id != null && message.hasOwnProperty("last_tx_pool_id"))
                    if (!$util.isInteger(message.last_tx_pool_id) && !(message.last_tx_pool_id && $util.isInteger(message.last_tx_pool_id.low) && $util.isInteger(message.last_tx_pool_id.high)))
                        return "last_tx_pool_id: integer|Long expected";
                if (message.last_batch_id != null && message.hasOwnProperty("last_batch_id"))
                    if (!$util.isInteger(message.last_batch_id) && !(message.last_batch_id && $util.isInteger(message.last_batch_id.low) && $util.isInteger(message.last_batch_id.high)))
                        return "last_batch_id: integer|Long expected";
                return null;
            };

            /**
             * Creates a GravityNonces message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.GravityNonces
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.GravityNonces} GravityNonces
             */
            GravityNonces.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.GravityNonces)
                    return object;
                let message = new $root.gravity.v1.GravityNonces();
                if (object.latest_valset_nonce != null)
                    if ($util.Long)
                        (message.latest_valset_nonce = $util.Long.fromValue(object.latest_valset_nonce)).unsigned = true;
                    else if (typeof object.latest_valset_nonce === "string")
                        message.latest_valset_nonce = parseInt(object.latest_valset_nonce, 10);
                    else if (typeof object.latest_valset_nonce === "number")
                        message.latest_valset_nonce = object.latest_valset_nonce;
                    else if (typeof object.latest_valset_nonce === "object")
                        message.latest_valset_nonce = new $util.LongBits(object.latest_valset_nonce.low >>> 0, object.latest_valset_nonce.high >>> 0).toNumber(true);
                if (object.last_observed_nonce != null)
                    if ($util.Long)
                        (message.last_observed_nonce = $util.Long.fromValue(object.last_observed_nonce)).unsigned = true;
                    else if (typeof object.last_observed_nonce === "string")
                        message.last_observed_nonce = parseInt(object.last_observed_nonce, 10);
                    else if (typeof object.last_observed_nonce === "number")
                        message.last_observed_nonce = object.last_observed_nonce;
                    else if (typeof object.last_observed_nonce === "object")
                        message.last_observed_nonce = new $util.LongBits(object.last_observed_nonce.low >>> 0, object.last_observed_nonce.high >>> 0).toNumber(true);
                if (object.last_slashed_valset_nonce != null)
                    if ($util.Long)
                        (message.last_slashed_valset_nonce = $util.Long.fromValue(object.last_slashed_valset_nonce)).unsigned = true;
                    else if (typeof object.last_slashed_valset_nonce === "string")
                        message.last_slashed_valset_nonce = parseInt(object.last_slashed_valset_nonce, 10);
                    else if (typeof object.last_slashed_valset_nonce === "number")
                        message.last_slashed_valset_nonce = object.last_slashed_valset_nonce;
                    else if (typeof object.last_slashed_valset_nonce === "object")
                        message.last_slashed_valset_nonce = new $util.LongBits(object.last_slashed_valset_nonce.low >>> 0, object.last_slashed_valset_nonce.high >>> 0).toNumber(true);
                if (object.last_slashed_batch_block != null)
                    if ($util.Long)
                        (message.last_slashed_batch_block = $util.Long.fromValue(object.last_slashed_batch_block)).unsigned = true;
                    else if (typeof object.last_slashed_batch_block === "string")
                        message.last_slashed_batch_block = parseInt(object.last_slashed_batch_block, 10);
                    else if (typeof object.last_slashed_batch_block === "number")
                        message.last_slashed_batch_block = object.last_slashed_batch_block;
                    else if (typeof object.last_slashed_batch_block === "object")
                        message.last_slashed_batch_block = new $util.LongBits(object.last_slashed_batch_block.low >>> 0, object.last_slashed_batch_block.high >>> 0).toNumber(true);
                if (object.last_slashed_logic_call_block != null)
                    if ($util.Long)
                        (message.last_slashed_logic_call_block = $util.Long.fromValue(object.last_slashed_logic_call_block)).unsigned = true;
                    else if (typeof object.last_slashed_logic_call_block === "string")
                        message.last_slashed_logic_call_block = parseInt(object.last_slashed_logic_call_block, 10);
                    else if (typeof object.last_slashed_logic_call_block === "number")
                        message.last_slashed_logic_call_block = object.last_slashed_logic_call_block;
                    else if (typeof object.last_slashed_logic_call_block === "object")
                        message.last_slashed_logic_call_block = new $util.LongBits(object.last_slashed_logic_call_block.low >>> 0, object.last_slashed_logic_call_block.high >>> 0).toNumber(true);
                if (object.last_tx_pool_id != null)
                    if ($util.Long)
                        (message.last_tx_pool_id = $util.Long.fromValue(object.last_tx_pool_id)).unsigned = true;
                    else if (typeof object.last_tx_pool_id === "string")
                        message.last_tx_pool_id = parseInt(object.last_tx_pool_id, 10);
                    else if (typeof object.last_tx_pool_id === "number")
                        message.last_tx_pool_id = object.last_tx_pool_id;
                    else if (typeof object.last_tx_pool_id === "object")
                        message.last_tx_pool_id = new $util.LongBits(object.last_tx_pool_id.low >>> 0, object.last_tx_pool_id.high >>> 0).toNumber(true);
                if (object.last_batch_id != null)
                    if ($util.Long)
                        (message.last_batch_id = $util.Long.fromValue(object.last_batch_id)).unsigned = true;
                    else if (typeof object.last_batch_id === "string")
                        message.last_batch_id = parseInt(object.last_batch_id, 10);
                    else if (typeof object.last_batch_id === "number")
                        message.last_batch_id = object.last_batch_id;
                    else if (typeof object.last_batch_id === "object")
                        message.last_batch_id = new $util.LongBits(object.last_batch_id.low >>> 0, object.last_batch_id.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a GravityNonces message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.GravityNonces
             * @static
             * @param {gravity.v1.GravityNonces} message GravityNonces
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GravityNonces.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.latest_valset_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.latest_valset_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.last_observed_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_observed_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.last_slashed_valset_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_slashed_valset_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.last_slashed_batch_block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_slashed_batch_block = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.last_slashed_logic_call_block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_slashed_logic_call_block = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.last_tx_pool_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_tx_pool_id = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.last_batch_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_batch_id = options.longs === String ? "0" : 0;
                }
                if (message.latest_valset_nonce != null && message.hasOwnProperty("latest_valset_nonce"))
                    if (typeof message.latest_valset_nonce === "number")
                        object.latest_valset_nonce = options.longs === String ? String(message.latest_valset_nonce) : message.latest_valset_nonce;
                    else
                        object.latest_valset_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.latest_valset_nonce) : options.longs === Number ? new $util.LongBits(message.latest_valset_nonce.low >>> 0, message.latest_valset_nonce.high >>> 0).toNumber(true) : message.latest_valset_nonce;
                if (message.last_observed_nonce != null && message.hasOwnProperty("last_observed_nonce"))
                    if (typeof message.last_observed_nonce === "number")
                        object.last_observed_nonce = options.longs === String ? String(message.last_observed_nonce) : message.last_observed_nonce;
                    else
                        object.last_observed_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.last_observed_nonce) : options.longs === Number ? new $util.LongBits(message.last_observed_nonce.low >>> 0, message.last_observed_nonce.high >>> 0).toNumber(true) : message.last_observed_nonce;
                if (message.last_slashed_valset_nonce != null && message.hasOwnProperty("last_slashed_valset_nonce"))
                    if (typeof message.last_slashed_valset_nonce === "number")
                        object.last_slashed_valset_nonce = options.longs === String ? String(message.last_slashed_valset_nonce) : message.last_slashed_valset_nonce;
                    else
                        object.last_slashed_valset_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.last_slashed_valset_nonce) : options.longs === Number ? new $util.LongBits(message.last_slashed_valset_nonce.low >>> 0, message.last_slashed_valset_nonce.high >>> 0).toNumber(true) : message.last_slashed_valset_nonce;
                if (message.last_slashed_batch_block != null && message.hasOwnProperty("last_slashed_batch_block"))
                    if (typeof message.last_slashed_batch_block === "number")
                        object.last_slashed_batch_block = options.longs === String ? String(message.last_slashed_batch_block) : message.last_slashed_batch_block;
                    else
                        object.last_slashed_batch_block = options.longs === String ? $util.Long.prototype.toString.call(message.last_slashed_batch_block) : options.longs === Number ? new $util.LongBits(message.last_slashed_batch_block.low >>> 0, message.last_slashed_batch_block.high >>> 0).toNumber(true) : message.last_slashed_batch_block;
                if (message.last_slashed_logic_call_block != null && message.hasOwnProperty("last_slashed_logic_call_block"))
                    if (typeof message.last_slashed_logic_call_block === "number")
                        object.last_slashed_logic_call_block = options.longs === String ? String(message.last_slashed_logic_call_block) : message.last_slashed_logic_call_block;
                    else
                        object.last_slashed_logic_call_block = options.longs === String ? $util.Long.prototype.toString.call(message.last_slashed_logic_call_block) : options.longs === Number ? new $util.LongBits(message.last_slashed_logic_call_block.low >>> 0, message.last_slashed_logic_call_block.high >>> 0).toNumber(true) : message.last_slashed_logic_call_block;
                if (message.last_tx_pool_id != null && message.hasOwnProperty("last_tx_pool_id"))
                    if (typeof message.last_tx_pool_id === "number")
                        object.last_tx_pool_id = options.longs === String ? String(message.last_tx_pool_id) : message.last_tx_pool_id;
                    else
                        object.last_tx_pool_id = options.longs === String ? $util.Long.prototype.toString.call(message.last_tx_pool_id) : options.longs === Number ? new $util.LongBits(message.last_tx_pool_id.low >>> 0, message.last_tx_pool_id.high >>> 0).toNumber(true) : message.last_tx_pool_id;
                if (message.last_batch_id != null && message.hasOwnProperty("last_batch_id"))
                    if (typeof message.last_batch_id === "number")
                        object.last_batch_id = options.longs === String ? String(message.last_batch_id) : message.last_batch_id;
                    else
                        object.last_batch_id = options.longs === String ? $util.Long.prototype.toString.call(message.last_batch_id) : options.longs === Number ? new $util.LongBits(message.last_batch_id.low >>> 0, message.last_batch_id.high >>> 0).toNumber(true) : message.last_batch_id;
                return object;
            };

            /**
             * Converts this GravityNonces to JSON.
             * @function toJSON
             * @memberof gravity.v1.GravityNonces
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GravityNonces.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GravityNonces;
        })();

        v1.Msg = (function() {

            /**
             * Constructs a new Msg service.
             * @memberof gravity.v1
             * @classdesc Represents a Msg
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function Msg(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

            /**
             * Callback as used by {@link gravity.v1.Msg#valsetConfirm}.
             * @memberof gravity.v1.Msg
             * @typedef ValsetConfirmCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgValsetConfirmResponse} [response] MsgValsetConfirmResponse
             */

            /**
             * Calls ValsetConfirm.
             * @function valsetConfirm
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgValsetConfirm} request MsgValsetConfirm message or plain object
             * @param {gravity.v1.Msg.ValsetConfirmCallback} callback Node-style callback called with the error, if any, and MsgValsetConfirmResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.valsetConfirm = function valsetConfirm(request, callback) {
                return this.rpcCall(valsetConfirm, $root.gravity.v1.MsgValsetConfirm, $root.gravity.v1.MsgValsetConfirmResponse, request, callback);
            }, "name", { value: "ValsetConfirm" });

            /**
             * Calls ValsetConfirm.
             * @function valsetConfirm
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgValsetConfirm} request MsgValsetConfirm message or plain object
             * @returns {Promise<gravity.v1.MsgValsetConfirmResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#sendToEth}.
             * @memberof gravity.v1.Msg
             * @typedef SendToEthCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgSendToEthResponse} [response] MsgSendToEthResponse
             */

            /**
             * Calls SendToEth.
             * @function sendToEth
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgSendToEth} request MsgSendToEth message or plain object
             * @param {gravity.v1.Msg.SendToEthCallback} callback Node-style callback called with the error, if any, and MsgSendToEthResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.sendToEth = function sendToEth(request, callback) {
                return this.rpcCall(sendToEth, $root.gravity.v1.MsgSendToEth, $root.gravity.v1.MsgSendToEthResponse, request, callback);
            }, "name", { value: "SendToEth" });

            /**
             * Calls SendToEth.
             * @function sendToEth
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgSendToEth} request MsgSendToEth message or plain object
             * @returns {Promise<gravity.v1.MsgSendToEthResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#requestBatch}.
             * @memberof gravity.v1.Msg
             * @typedef RequestBatchCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgRequestBatchResponse} [response] MsgRequestBatchResponse
             */

            /**
             * Calls RequestBatch.
             * @function requestBatch
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgRequestBatch} request MsgRequestBatch message or plain object
             * @param {gravity.v1.Msg.RequestBatchCallback} callback Node-style callback called with the error, if any, and MsgRequestBatchResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.requestBatch = function requestBatch(request, callback) {
                return this.rpcCall(requestBatch, $root.gravity.v1.MsgRequestBatch, $root.gravity.v1.MsgRequestBatchResponse, request, callback);
            }, "name", { value: "RequestBatch" });

            /**
             * Calls RequestBatch.
             * @function requestBatch
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgRequestBatch} request MsgRequestBatch message or plain object
             * @returns {Promise<gravity.v1.MsgRequestBatchResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#confirmBatch}.
             * @memberof gravity.v1.Msg
             * @typedef ConfirmBatchCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgConfirmBatchResponse} [response] MsgConfirmBatchResponse
             */

            /**
             * Calls ConfirmBatch.
             * @function confirmBatch
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgConfirmBatch} request MsgConfirmBatch message or plain object
             * @param {gravity.v1.Msg.ConfirmBatchCallback} callback Node-style callback called with the error, if any, and MsgConfirmBatchResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.confirmBatch = function confirmBatch(request, callback) {
                return this.rpcCall(confirmBatch, $root.gravity.v1.MsgConfirmBatch, $root.gravity.v1.MsgConfirmBatchResponse, request, callback);
            }, "name", { value: "ConfirmBatch" });

            /**
             * Calls ConfirmBatch.
             * @function confirmBatch
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgConfirmBatch} request MsgConfirmBatch message or plain object
             * @returns {Promise<gravity.v1.MsgConfirmBatchResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#confirmLogicCall}.
             * @memberof gravity.v1.Msg
             * @typedef ConfirmLogicCallCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgConfirmLogicCallResponse} [response] MsgConfirmLogicCallResponse
             */

            /**
             * Calls ConfirmLogicCall.
             * @function confirmLogicCall
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgConfirmLogicCall} request MsgConfirmLogicCall message or plain object
             * @param {gravity.v1.Msg.ConfirmLogicCallCallback} callback Node-style callback called with the error, if any, and MsgConfirmLogicCallResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.confirmLogicCall = function confirmLogicCall(request, callback) {
                return this.rpcCall(confirmLogicCall, $root.gravity.v1.MsgConfirmLogicCall, $root.gravity.v1.MsgConfirmLogicCallResponse, request, callback);
            }, "name", { value: "ConfirmLogicCall" });

            /**
             * Calls ConfirmLogicCall.
             * @function confirmLogicCall
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgConfirmLogicCall} request MsgConfirmLogicCall message or plain object
             * @returns {Promise<gravity.v1.MsgConfirmLogicCallResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#sendToCosmosClaim}.
             * @memberof gravity.v1.Msg
             * @typedef SendToCosmosClaimCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgSendToCosmosClaimResponse} [response] MsgSendToCosmosClaimResponse
             */

            /**
             * Calls SendToCosmosClaim.
             * @function sendToCosmosClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgSendToCosmosClaim} request MsgSendToCosmosClaim message or plain object
             * @param {gravity.v1.Msg.SendToCosmosClaimCallback} callback Node-style callback called with the error, if any, and MsgSendToCosmosClaimResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.sendToCosmosClaim = function sendToCosmosClaim(request, callback) {
                return this.rpcCall(sendToCosmosClaim, $root.gravity.v1.MsgSendToCosmosClaim, $root.gravity.v1.MsgSendToCosmosClaimResponse, request, callback);
            }, "name", { value: "SendToCosmosClaim" });

            /**
             * Calls SendToCosmosClaim.
             * @function sendToCosmosClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgSendToCosmosClaim} request MsgSendToCosmosClaim message or plain object
             * @returns {Promise<gravity.v1.MsgSendToCosmosClaimResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#executeIbcAutoForwards}.
             * @memberof gravity.v1.Msg
             * @typedef ExecuteIbcAutoForwardsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgExecuteIbcAutoForwardsResponse} [response] MsgExecuteIbcAutoForwardsResponse
             */

            /**
             * Calls ExecuteIbcAutoForwards.
             * @function executeIbcAutoForwards
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgExecuteIbcAutoForwards} request MsgExecuteIbcAutoForwards message or plain object
             * @param {gravity.v1.Msg.ExecuteIbcAutoForwardsCallback} callback Node-style callback called with the error, if any, and MsgExecuteIbcAutoForwardsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.executeIbcAutoForwards = function executeIbcAutoForwards(request, callback) {
                return this.rpcCall(executeIbcAutoForwards, $root.gravity.v1.MsgExecuteIbcAutoForwards, $root.gravity.v1.MsgExecuteIbcAutoForwardsResponse, request, callback);
            }, "name", { value: "ExecuteIbcAutoForwards" });

            /**
             * Calls ExecuteIbcAutoForwards.
             * @function executeIbcAutoForwards
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgExecuteIbcAutoForwards} request MsgExecuteIbcAutoForwards message or plain object
             * @returns {Promise<gravity.v1.MsgExecuteIbcAutoForwardsResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#batchSendToEthClaim}.
             * @memberof gravity.v1.Msg
             * @typedef BatchSendToEthClaimCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgBatchSendToEthClaimResponse} [response] MsgBatchSendToEthClaimResponse
             */

            /**
             * Calls BatchSendToEthClaim.
             * @function batchSendToEthClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgBatchSendToEthClaim} request MsgBatchSendToEthClaim message or plain object
             * @param {gravity.v1.Msg.BatchSendToEthClaimCallback} callback Node-style callback called with the error, if any, and MsgBatchSendToEthClaimResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.batchSendToEthClaim = function batchSendToEthClaim(request, callback) {
                return this.rpcCall(batchSendToEthClaim, $root.gravity.v1.MsgBatchSendToEthClaim, $root.gravity.v1.MsgBatchSendToEthClaimResponse, request, callback);
            }, "name", { value: "BatchSendToEthClaim" });

            /**
             * Calls BatchSendToEthClaim.
             * @function batchSendToEthClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgBatchSendToEthClaim} request MsgBatchSendToEthClaim message or plain object
             * @returns {Promise<gravity.v1.MsgBatchSendToEthClaimResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#valsetUpdateClaim}.
             * @memberof gravity.v1.Msg
             * @typedef ValsetUpdateClaimCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgValsetUpdatedClaimResponse} [response] MsgValsetUpdatedClaimResponse
             */

            /**
             * Calls ValsetUpdateClaim.
             * @function valsetUpdateClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgValsetUpdatedClaim} request MsgValsetUpdatedClaim message or plain object
             * @param {gravity.v1.Msg.ValsetUpdateClaimCallback} callback Node-style callback called with the error, if any, and MsgValsetUpdatedClaimResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.valsetUpdateClaim = function valsetUpdateClaim(request, callback) {
                return this.rpcCall(valsetUpdateClaim, $root.gravity.v1.MsgValsetUpdatedClaim, $root.gravity.v1.MsgValsetUpdatedClaimResponse, request, callback);
            }, "name", { value: "ValsetUpdateClaim" });

            /**
             * Calls ValsetUpdateClaim.
             * @function valsetUpdateClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgValsetUpdatedClaim} request MsgValsetUpdatedClaim message or plain object
             * @returns {Promise<gravity.v1.MsgValsetUpdatedClaimResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#eRC20DeployedClaim}.
             * @memberof gravity.v1.Msg
             * @typedef ERC20DeployedClaimCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgERC20DeployedClaimResponse} [response] MsgERC20DeployedClaimResponse
             */

            /**
             * Calls ERC20DeployedClaim.
             * @function eRC20DeployedClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgERC20DeployedClaim} request MsgERC20DeployedClaim message or plain object
             * @param {gravity.v1.Msg.ERC20DeployedClaimCallback} callback Node-style callback called with the error, if any, and MsgERC20DeployedClaimResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.eRC20DeployedClaim = function eRC20DeployedClaim(request, callback) {
                return this.rpcCall(eRC20DeployedClaim, $root.gravity.v1.MsgERC20DeployedClaim, $root.gravity.v1.MsgERC20DeployedClaimResponse, request, callback);
            }, "name", { value: "ERC20DeployedClaim" });

            /**
             * Calls ERC20DeployedClaim.
             * @function eRC20DeployedClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgERC20DeployedClaim} request MsgERC20DeployedClaim message or plain object
             * @returns {Promise<gravity.v1.MsgERC20DeployedClaimResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#logicCallExecutedClaim}.
             * @memberof gravity.v1.Msg
             * @typedef LogicCallExecutedClaimCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgLogicCallExecutedClaimResponse} [response] MsgLogicCallExecutedClaimResponse
             */

            /**
             * Calls LogicCallExecutedClaim.
             * @function logicCallExecutedClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgLogicCallExecutedClaim} request MsgLogicCallExecutedClaim message or plain object
             * @param {gravity.v1.Msg.LogicCallExecutedClaimCallback} callback Node-style callback called with the error, if any, and MsgLogicCallExecutedClaimResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.logicCallExecutedClaim = function logicCallExecutedClaim(request, callback) {
                return this.rpcCall(logicCallExecutedClaim, $root.gravity.v1.MsgLogicCallExecutedClaim, $root.gravity.v1.MsgLogicCallExecutedClaimResponse, request, callback);
            }, "name", { value: "LogicCallExecutedClaim" });

            /**
             * Calls LogicCallExecutedClaim.
             * @function logicCallExecutedClaim
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgLogicCallExecutedClaim} request MsgLogicCallExecutedClaim message or plain object
             * @returns {Promise<gravity.v1.MsgLogicCallExecutedClaimResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#setOrchestratorAddress}.
             * @memberof gravity.v1.Msg
             * @typedef SetOrchestratorAddressCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgSetOrchestratorAddressResponse} [response] MsgSetOrchestratorAddressResponse
             */

            /**
             * Calls SetOrchestratorAddress.
             * @function setOrchestratorAddress
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgSetOrchestratorAddress} request MsgSetOrchestratorAddress message or plain object
             * @param {gravity.v1.Msg.SetOrchestratorAddressCallback} callback Node-style callback called with the error, if any, and MsgSetOrchestratorAddressResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.setOrchestratorAddress = function setOrchestratorAddress(request, callback) {
                return this.rpcCall(setOrchestratorAddress, $root.gravity.v1.MsgSetOrchestratorAddress, $root.gravity.v1.MsgSetOrchestratorAddressResponse, request, callback);
            }, "name", { value: "SetOrchestratorAddress" });

            /**
             * Calls SetOrchestratorAddress.
             * @function setOrchestratorAddress
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgSetOrchestratorAddress} request MsgSetOrchestratorAddress message or plain object
             * @returns {Promise<gravity.v1.MsgSetOrchestratorAddressResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#cancelSendToEth}.
             * @memberof gravity.v1.Msg
             * @typedef CancelSendToEthCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgCancelSendToEthResponse} [response] MsgCancelSendToEthResponse
             */

            /**
             * Calls CancelSendToEth.
             * @function cancelSendToEth
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgCancelSendToEth} request MsgCancelSendToEth message or plain object
             * @param {gravity.v1.Msg.CancelSendToEthCallback} callback Node-style callback called with the error, if any, and MsgCancelSendToEthResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.cancelSendToEth = function cancelSendToEth(request, callback) {
                return this.rpcCall(cancelSendToEth, $root.gravity.v1.MsgCancelSendToEth, $root.gravity.v1.MsgCancelSendToEthResponse, request, callback);
            }, "name", { value: "CancelSendToEth" });

            /**
             * Calls CancelSendToEth.
             * @function cancelSendToEth
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgCancelSendToEth} request MsgCancelSendToEth message or plain object
             * @returns {Promise<gravity.v1.MsgCancelSendToEthResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link gravity.v1.Msg#submitBadSignatureEvidence}.
             * @memberof gravity.v1.Msg
             * @typedef SubmitBadSignatureEvidenceCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {gravity.v1.MsgSubmitBadSignatureEvidenceResponse} [response] MsgSubmitBadSignatureEvidenceResponse
             */

            /**
             * Calls SubmitBadSignatureEvidence.
             * @function submitBadSignatureEvidence
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgSubmitBadSignatureEvidence} request MsgSubmitBadSignatureEvidence message or plain object
             * @param {gravity.v1.Msg.SubmitBadSignatureEvidenceCallback} callback Node-style callback called with the error, if any, and MsgSubmitBadSignatureEvidenceResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Msg.prototype.submitBadSignatureEvidence = function submitBadSignatureEvidence(request, callback) {
                return this.rpcCall(submitBadSignatureEvidence, $root.gravity.v1.MsgSubmitBadSignatureEvidence, $root.gravity.v1.MsgSubmitBadSignatureEvidenceResponse, request, callback);
            }, "name", { value: "SubmitBadSignatureEvidence" });

            /**
             * Calls SubmitBadSignatureEvidence.
             * @function submitBadSignatureEvidence
             * @memberof gravity.v1.Msg
             * @instance
             * @param {gravity.v1.IMsgSubmitBadSignatureEvidence} request MsgSubmitBadSignatureEvidence message or plain object
             * @returns {Promise<gravity.v1.MsgSubmitBadSignatureEvidenceResponse>} Promise
             * @variation 2
             */

            return Msg;
        })();

        v1.MsgSetOrchestratorAddress = (function() {

            /**
             * Properties of a MsgSetOrchestratorAddress.
             * @memberof gravity.v1
             * @interface IMsgSetOrchestratorAddress
             * @property {string|null} [validator] MsgSetOrchestratorAddress validator
             * @property {string|null} [orchestrator] MsgSetOrchestratorAddress orchestrator
             * @property {string|null} [eth_address] MsgSetOrchestratorAddress eth_address
             */

            /**
             * Constructs a new MsgSetOrchestratorAddress.
             * @memberof gravity.v1
             * @classdesc Represents a MsgSetOrchestratorAddress.
             * @implements IMsgSetOrchestratorAddress
             * @constructor
             * @param {gravity.v1.IMsgSetOrchestratorAddress=} [properties] Properties to set
             */
            function MsgSetOrchestratorAddress(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgSetOrchestratorAddress validator.
             * @member {string} validator
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @instance
             */
            MsgSetOrchestratorAddress.prototype.validator = "";

            /**
             * MsgSetOrchestratorAddress orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @instance
             */
            MsgSetOrchestratorAddress.prototype.orchestrator = "";

            /**
             * MsgSetOrchestratorAddress eth_address.
             * @member {string} eth_address
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @instance
             */
            MsgSetOrchestratorAddress.prototype.eth_address = "";

            /**
             * Encodes the specified MsgSetOrchestratorAddress message. Does not implicitly {@link gravity.v1.MsgSetOrchestratorAddress.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @static
             * @param {gravity.v1.IMsgSetOrchestratorAddress} message MsgSetOrchestratorAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSetOrchestratorAddress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.orchestrator);
                if (message.eth_address != null && Object.hasOwnProperty.call(message, "eth_address"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.eth_address);
                return writer;
            };

            /**
             * Encodes the specified MsgSetOrchestratorAddress message, length delimited. Does not implicitly {@link gravity.v1.MsgSetOrchestratorAddress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @static
             * @param {gravity.v1.IMsgSetOrchestratorAddress} message MsgSetOrchestratorAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSetOrchestratorAddress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgSetOrchestratorAddress message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgSetOrchestratorAddress} MsgSetOrchestratorAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSetOrchestratorAddress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgSetOrchestratorAddress();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator = reader.string();
                        break;
                    case 2:
                        message.orchestrator = reader.string();
                        break;
                    case 3:
                        message.eth_address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgSetOrchestratorAddress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgSetOrchestratorAddress} MsgSetOrchestratorAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSetOrchestratorAddress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgSetOrchestratorAddress message.
             * @function verify
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgSetOrchestratorAddress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator != null && message.hasOwnProperty("validator"))
                    if (!$util.isString(message.validator))
                        return "validator: string expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    if (!$util.isString(message.eth_address))
                        return "eth_address: string expected";
                return null;
            };

            /**
             * Creates a MsgSetOrchestratorAddress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgSetOrchestratorAddress} MsgSetOrchestratorAddress
             */
            MsgSetOrchestratorAddress.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgSetOrchestratorAddress)
                    return object;
                let message = new $root.gravity.v1.MsgSetOrchestratorAddress();
                if (object.validator != null)
                    message.validator = String(object.validator);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                if (object.eth_address != null)
                    message.eth_address = String(object.eth_address);
                return message;
            };

            /**
             * Creates a plain object from a MsgSetOrchestratorAddress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @static
             * @param {gravity.v1.MsgSetOrchestratorAddress} message MsgSetOrchestratorAddress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgSetOrchestratorAddress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.validator = "";
                    object.orchestrator = "";
                    object.eth_address = "";
                }
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = message.validator;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    object.eth_address = message.eth_address;
                return object;
            };

            /**
             * Converts this MsgSetOrchestratorAddress to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgSetOrchestratorAddress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgSetOrchestratorAddress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgSetOrchestratorAddress;
        })();

        v1.MsgSetOrchestratorAddressResponse = (function() {

            /**
             * Properties of a MsgSetOrchestratorAddressResponse.
             * @memberof gravity.v1
             * @interface IMsgSetOrchestratorAddressResponse
             */

            /**
             * Constructs a new MsgSetOrchestratorAddressResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgSetOrchestratorAddressResponse.
             * @implements IMsgSetOrchestratorAddressResponse
             * @constructor
             * @param {gravity.v1.IMsgSetOrchestratorAddressResponse=} [properties] Properties to set
             */
            function MsgSetOrchestratorAddressResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgSetOrchestratorAddressResponse message. Does not implicitly {@link gravity.v1.MsgSetOrchestratorAddressResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgSetOrchestratorAddressResponse
             * @static
             * @param {gravity.v1.IMsgSetOrchestratorAddressResponse} message MsgSetOrchestratorAddressResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSetOrchestratorAddressResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgSetOrchestratorAddressResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgSetOrchestratorAddressResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgSetOrchestratorAddressResponse
             * @static
             * @param {gravity.v1.IMsgSetOrchestratorAddressResponse} message MsgSetOrchestratorAddressResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSetOrchestratorAddressResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgSetOrchestratorAddressResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgSetOrchestratorAddressResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgSetOrchestratorAddressResponse} MsgSetOrchestratorAddressResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSetOrchestratorAddressResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgSetOrchestratorAddressResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgSetOrchestratorAddressResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgSetOrchestratorAddressResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgSetOrchestratorAddressResponse} MsgSetOrchestratorAddressResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSetOrchestratorAddressResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgSetOrchestratorAddressResponse message.
             * @function verify
             * @memberof gravity.v1.MsgSetOrchestratorAddressResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgSetOrchestratorAddressResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgSetOrchestratorAddressResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgSetOrchestratorAddressResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgSetOrchestratorAddressResponse} MsgSetOrchestratorAddressResponse
             */
            MsgSetOrchestratorAddressResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgSetOrchestratorAddressResponse)
                    return object;
                return new $root.gravity.v1.MsgSetOrchestratorAddressResponse();
            };

            /**
             * Creates a plain object from a MsgSetOrchestratorAddressResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgSetOrchestratorAddressResponse
             * @static
             * @param {gravity.v1.MsgSetOrchestratorAddressResponse} message MsgSetOrchestratorAddressResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgSetOrchestratorAddressResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgSetOrchestratorAddressResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgSetOrchestratorAddressResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgSetOrchestratorAddressResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgSetOrchestratorAddressResponse;
        })();

        v1.MsgValsetConfirm = (function() {

            /**
             * Properties of a MsgValsetConfirm.
             * @memberof gravity.v1
             * @interface IMsgValsetConfirm
             * @property {number|null} [nonce] MsgValsetConfirm nonce
             * @property {string|null} [orchestrator] MsgValsetConfirm orchestrator
             * @property {string|null} [eth_address] MsgValsetConfirm eth_address
             * @property {string|null} [signature] MsgValsetConfirm signature
             */

            /**
             * Constructs a new MsgValsetConfirm.
             * @memberof gravity.v1
             * @classdesc Represents a MsgValsetConfirm.
             * @implements IMsgValsetConfirm
             * @constructor
             * @param {gravity.v1.IMsgValsetConfirm=} [properties] Properties to set
             */
            function MsgValsetConfirm(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgValsetConfirm nonce.
             * @member {number} nonce
             * @memberof gravity.v1.MsgValsetConfirm
             * @instance
             */
            MsgValsetConfirm.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgValsetConfirm orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgValsetConfirm
             * @instance
             */
            MsgValsetConfirm.prototype.orchestrator = "";

            /**
             * MsgValsetConfirm eth_address.
             * @member {string} eth_address
             * @memberof gravity.v1.MsgValsetConfirm
             * @instance
             */
            MsgValsetConfirm.prototype.eth_address = "";

            /**
             * MsgValsetConfirm signature.
             * @member {string} signature
             * @memberof gravity.v1.MsgValsetConfirm
             * @instance
             */
            MsgValsetConfirm.prototype.signature = "";

            /**
             * Encodes the specified MsgValsetConfirm message. Does not implicitly {@link gravity.v1.MsgValsetConfirm.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgValsetConfirm
             * @static
             * @param {gravity.v1.IMsgValsetConfirm} message MsgValsetConfirm message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgValsetConfirm.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.orchestrator);
                if (message.eth_address != null && Object.hasOwnProperty.call(message, "eth_address"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.eth_address);
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.signature);
                return writer;
            };

            /**
             * Encodes the specified MsgValsetConfirm message, length delimited. Does not implicitly {@link gravity.v1.MsgValsetConfirm.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgValsetConfirm
             * @static
             * @param {gravity.v1.IMsgValsetConfirm} message MsgValsetConfirm message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgValsetConfirm.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgValsetConfirm message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgValsetConfirm
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgValsetConfirm} MsgValsetConfirm
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgValsetConfirm.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgValsetConfirm();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    case 2:
                        message.orchestrator = reader.string();
                        break;
                    case 3:
                        message.eth_address = reader.string();
                        break;
                    case 4:
                        message.signature = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgValsetConfirm message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgValsetConfirm
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgValsetConfirm} MsgValsetConfirm
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgValsetConfirm.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgValsetConfirm message.
             * @function verify
             * @memberof gravity.v1.MsgValsetConfirm
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgValsetConfirm.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    if (!$util.isString(message.eth_address))
                        return "eth_address: string expected";
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!$util.isString(message.signature))
                        return "signature: string expected";
                return null;
            };

            /**
             * Creates a MsgValsetConfirm message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgValsetConfirm
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgValsetConfirm} MsgValsetConfirm
             */
            MsgValsetConfirm.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgValsetConfirm)
                    return object;
                let message = new $root.gravity.v1.MsgValsetConfirm();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                if (object.eth_address != null)
                    message.eth_address = String(object.eth_address);
                if (object.signature != null)
                    message.signature = String(object.signature);
                return message;
            };

            /**
             * Creates a plain object from a MsgValsetConfirm message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgValsetConfirm
             * @static
             * @param {gravity.v1.MsgValsetConfirm} message MsgValsetConfirm
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgValsetConfirm.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                    object.orchestrator = "";
                    object.eth_address = "";
                    object.signature = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                if (message.eth_address != null && message.hasOwnProperty("eth_address"))
                    object.eth_address = message.eth_address;
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = message.signature;
                return object;
            };

            /**
             * Converts this MsgValsetConfirm to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgValsetConfirm
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgValsetConfirm.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgValsetConfirm;
        })();

        v1.MsgValsetConfirmResponse = (function() {

            /**
             * Properties of a MsgValsetConfirmResponse.
             * @memberof gravity.v1
             * @interface IMsgValsetConfirmResponse
             */

            /**
             * Constructs a new MsgValsetConfirmResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgValsetConfirmResponse.
             * @implements IMsgValsetConfirmResponse
             * @constructor
             * @param {gravity.v1.IMsgValsetConfirmResponse=} [properties] Properties to set
             */
            function MsgValsetConfirmResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgValsetConfirmResponse message. Does not implicitly {@link gravity.v1.MsgValsetConfirmResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgValsetConfirmResponse
             * @static
             * @param {gravity.v1.IMsgValsetConfirmResponse} message MsgValsetConfirmResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgValsetConfirmResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgValsetConfirmResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgValsetConfirmResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgValsetConfirmResponse
             * @static
             * @param {gravity.v1.IMsgValsetConfirmResponse} message MsgValsetConfirmResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgValsetConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgValsetConfirmResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgValsetConfirmResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgValsetConfirmResponse} MsgValsetConfirmResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgValsetConfirmResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgValsetConfirmResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgValsetConfirmResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgValsetConfirmResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgValsetConfirmResponse} MsgValsetConfirmResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgValsetConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgValsetConfirmResponse message.
             * @function verify
             * @memberof gravity.v1.MsgValsetConfirmResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgValsetConfirmResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgValsetConfirmResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgValsetConfirmResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgValsetConfirmResponse} MsgValsetConfirmResponse
             */
            MsgValsetConfirmResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgValsetConfirmResponse)
                    return object;
                return new $root.gravity.v1.MsgValsetConfirmResponse();
            };

            /**
             * Creates a plain object from a MsgValsetConfirmResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgValsetConfirmResponse
             * @static
             * @param {gravity.v1.MsgValsetConfirmResponse} message MsgValsetConfirmResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgValsetConfirmResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgValsetConfirmResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgValsetConfirmResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgValsetConfirmResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgValsetConfirmResponse;
        })();

        v1.MsgSendToEth = (function() {

            /**
             * Properties of a MsgSendToEth.
             * @memberof gravity.v1
             * @interface IMsgSendToEth
             * @property {string|null} [sender] MsgSendToEth sender
             * @property {string|null} [eth_dest] MsgSendToEth eth_dest
             * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgSendToEth amount
             * @property {cosmos.base.v1beta1.ICoin|null} [bridge_fee] MsgSendToEth bridge_fee
             * @property {cosmos.base.v1beta1.ICoin|null} [chain_fee] MsgSendToEth chain_fee
             */

            /**
             * Constructs a new MsgSendToEth.
             * @memberof gravity.v1
             * @classdesc Represents a MsgSendToEth.
             * @implements IMsgSendToEth
             * @constructor
             * @param {gravity.v1.IMsgSendToEth=} [properties] Properties to set
             */
            function MsgSendToEth(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgSendToEth sender.
             * @member {string} sender
             * @memberof gravity.v1.MsgSendToEth
             * @instance
             */
            MsgSendToEth.prototype.sender = "";

            /**
             * MsgSendToEth eth_dest.
             * @member {string} eth_dest
             * @memberof gravity.v1.MsgSendToEth
             * @instance
             */
            MsgSendToEth.prototype.eth_dest = "";

            /**
             * MsgSendToEth amount.
             * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
             * @memberof gravity.v1.MsgSendToEth
             * @instance
             */
            MsgSendToEth.prototype.amount = null;

            /**
             * MsgSendToEth bridge_fee.
             * @member {cosmos.base.v1beta1.ICoin|null|undefined} bridge_fee
             * @memberof gravity.v1.MsgSendToEth
             * @instance
             */
            MsgSendToEth.prototype.bridge_fee = null;

            /**
             * MsgSendToEth chain_fee.
             * @member {cosmos.base.v1beta1.ICoin|null|undefined} chain_fee
             * @memberof gravity.v1.MsgSendToEth
             * @instance
             */
            MsgSendToEth.prototype.chain_fee = null;

            /**
             * Encodes the specified MsgSendToEth message. Does not implicitly {@link gravity.v1.MsgSendToEth.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgSendToEth
             * @static
             * @param {gravity.v1.IMsgSendToEth} message MsgSendToEth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSendToEth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                if (message.eth_dest != null && Object.hasOwnProperty.call(message, "eth_dest"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.eth_dest);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.bridge_fee != null && Object.hasOwnProperty.call(message, "bridge_fee"))
                    $root.cosmos.base.v1beta1.Coin.encode(message.bridge_fee, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.chain_fee != null && Object.hasOwnProperty.call(message, "chain_fee"))
                    $root.cosmos.base.v1beta1.Coin.encode(message.chain_fee, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MsgSendToEth message, length delimited. Does not implicitly {@link gravity.v1.MsgSendToEth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgSendToEth
             * @static
             * @param {gravity.v1.IMsgSendToEth} message MsgSendToEth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSendToEth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgSendToEth message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgSendToEth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgSendToEth} MsgSendToEth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSendToEth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgSendToEth();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = reader.string();
                        break;
                    case 2:
                        message.eth_dest = reader.string();
                        break;
                    case 3:
                        message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.bridge_fee = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.chain_fee = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgSendToEth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgSendToEth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgSendToEth} MsgSendToEth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSendToEth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgSendToEth message.
             * @function verify
             * @memberof gravity.v1.MsgSendToEth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgSendToEth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                if (message.eth_dest != null && message.hasOwnProperty("eth_dest"))
                    if (!$util.isString(message.eth_dest))
                        return "eth_dest: string expected";
                if (message.amount != null && message.hasOwnProperty("amount")) {
                    let error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                    if (error)
                        return "amount." + error;
                }
                if (message.bridge_fee != null && message.hasOwnProperty("bridge_fee")) {
                    let error = $root.cosmos.base.v1beta1.Coin.verify(message.bridge_fee);
                    if (error)
                        return "bridge_fee." + error;
                }
                if (message.chain_fee != null && message.hasOwnProperty("chain_fee")) {
                    let error = $root.cosmos.base.v1beta1.Coin.verify(message.chain_fee);
                    if (error)
                        return "chain_fee." + error;
                }
                return null;
            };

            /**
             * Creates a MsgSendToEth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgSendToEth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgSendToEth} MsgSendToEth
             */
            MsgSendToEth.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgSendToEth)
                    return object;
                let message = new $root.gravity.v1.MsgSendToEth();
                if (object.sender != null)
                    message.sender = String(object.sender);
                if (object.eth_dest != null)
                    message.eth_dest = String(object.eth_dest);
                if (object.amount != null) {
                    if (typeof object.amount !== "object")
                        throw TypeError(".gravity.v1.MsgSendToEth.amount: object expected");
                    message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                }
                if (object.bridge_fee != null) {
                    if (typeof object.bridge_fee !== "object")
                        throw TypeError(".gravity.v1.MsgSendToEth.bridge_fee: object expected");
                    message.bridge_fee = $root.cosmos.base.v1beta1.Coin.fromObject(object.bridge_fee);
                }
                if (object.chain_fee != null) {
                    if (typeof object.chain_fee !== "object")
                        throw TypeError(".gravity.v1.MsgSendToEth.chain_fee: object expected");
                    message.chain_fee = $root.cosmos.base.v1beta1.Coin.fromObject(object.chain_fee);
                }
                return message;
            };

            /**
             * Creates a plain object from a MsgSendToEth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgSendToEth
             * @static
             * @param {gravity.v1.MsgSendToEth} message MsgSendToEth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgSendToEth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.sender = "";
                    object.eth_dest = "";
                    object.amount = null;
                    object.bridge_fee = null;
                    object.chain_fee = null;
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                if (message.eth_dest != null && message.hasOwnProperty("eth_dest"))
                    object.eth_dest = message.eth_dest;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                if (message.bridge_fee != null && message.hasOwnProperty("bridge_fee"))
                    object.bridge_fee = $root.cosmos.base.v1beta1.Coin.toObject(message.bridge_fee, options);
                if (message.chain_fee != null && message.hasOwnProperty("chain_fee"))
                    object.chain_fee = $root.cosmos.base.v1beta1.Coin.toObject(message.chain_fee, options);
                return object;
            };

            /**
             * Converts this MsgSendToEth to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgSendToEth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgSendToEth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgSendToEth;
        })();

        v1.MsgSendToEthResponse = (function() {

            /**
             * Properties of a MsgSendToEthResponse.
             * @memberof gravity.v1
             * @interface IMsgSendToEthResponse
             */

            /**
             * Constructs a new MsgSendToEthResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgSendToEthResponse.
             * @implements IMsgSendToEthResponse
             * @constructor
             * @param {gravity.v1.IMsgSendToEthResponse=} [properties] Properties to set
             */
            function MsgSendToEthResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgSendToEthResponse message. Does not implicitly {@link gravity.v1.MsgSendToEthResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgSendToEthResponse
             * @static
             * @param {gravity.v1.IMsgSendToEthResponse} message MsgSendToEthResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSendToEthResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgSendToEthResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgSendToEthResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgSendToEthResponse
             * @static
             * @param {gravity.v1.IMsgSendToEthResponse} message MsgSendToEthResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSendToEthResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgSendToEthResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgSendToEthResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgSendToEthResponse} MsgSendToEthResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSendToEthResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgSendToEthResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgSendToEthResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgSendToEthResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgSendToEthResponse} MsgSendToEthResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSendToEthResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgSendToEthResponse message.
             * @function verify
             * @memberof gravity.v1.MsgSendToEthResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgSendToEthResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgSendToEthResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgSendToEthResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgSendToEthResponse} MsgSendToEthResponse
             */
            MsgSendToEthResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgSendToEthResponse)
                    return object;
                return new $root.gravity.v1.MsgSendToEthResponse();
            };

            /**
             * Creates a plain object from a MsgSendToEthResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgSendToEthResponse
             * @static
             * @param {gravity.v1.MsgSendToEthResponse} message MsgSendToEthResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgSendToEthResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgSendToEthResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgSendToEthResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgSendToEthResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgSendToEthResponse;
        })();

        v1.MsgRequestBatch = (function() {

            /**
             * Properties of a MsgRequestBatch.
             * @memberof gravity.v1
             * @interface IMsgRequestBatch
             * @property {string|null} [sender] MsgRequestBatch sender
             * @property {string|null} [denom] MsgRequestBatch denom
             */

            /**
             * Constructs a new MsgRequestBatch.
             * @memberof gravity.v1
             * @classdesc Represents a MsgRequestBatch.
             * @implements IMsgRequestBatch
             * @constructor
             * @param {gravity.v1.IMsgRequestBatch=} [properties] Properties to set
             */
            function MsgRequestBatch(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgRequestBatch sender.
             * @member {string} sender
             * @memberof gravity.v1.MsgRequestBatch
             * @instance
             */
            MsgRequestBatch.prototype.sender = "";

            /**
             * MsgRequestBatch denom.
             * @member {string} denom
             * @memberof gravity.v1.MsgRequestBatch
             * @instance
             */
            MsgRequestBatch.prototype.denom = "";

            /**
             * Encodes the specified MsgRequestBatch message. Does not implicitly {@link gravity.v1.MsgRequestBatch.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgRequestBatch
             * @static
             * @param {gravity.v1.IMsgRequestBatch} message MsgRequestBatch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgRequestBatch.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                return writer;
            };

            /**
             * Encodes the specified MsgRequestBatch message, length delimited. Does not implicitly {@link gravity.v1.MsgRequestBatch.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgRequestBatch
             * @static
             * @param {gravity.v1.IMsgRequestBatch} message MsgRequestBatch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgRequestBatch.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgRequestBatch message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgRequestBatch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgRequestBatch} MsgRequestBatch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgRequestBatch.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgRequestBatch();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = reader.string();
                        break;
                    case 2:
                        message.denom = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgRequestBatch message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgRequestBatch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgRequestBatch} MsgRequestBatch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgRequestBatch.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgRequestBatch message.
             * @function verify
             * @memberof gravity.v1.MsgRequestBatch
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgRequestBatch.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                if (message.denom != null && message.hasOwnProperty("denom"))
                    if (!$util.isString(message.denom))
                        return "denom: string expected";
                return null;
            };

            /**
             * Creates a MsgRequestBatch message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgRequestBatch
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgRequestBatch} MsgRequestBatch
             */
            MsgRequestBatch.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgRequestBatch)
                    return object;
                let message = new $root.gravity.v1.MsgRequestBatch();
                if (object.sender != null)
                    message.sender = String(object.sender);
                if (object.denom != null)
                    message.denom = String(object.denom);
                return message;
            };

            /**
             * Creates a plain object from a MsgRequestBatch message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgRequestBatch
             * @static
             * @param {gravity.v1.MsgRequestBatch} message MsgRequestBatch
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgRequestBatch.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.sender = "";
                    object.denom = "";
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                if (message.denom != null && message.hasOwnProperty("denom"))
                    object.denom = message.denom;
                return object;
            };

            /**
             * Converts this MsgRequestBatch to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgRequestBatch
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgRequestBatch.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgRequestBatch;
        })();

        v1.MsgRequestBatchResponse = (function() {

            /**
             * Properties of a MsgRequestBatchResponse.
             * @memberof gravity.v1
             * @interface IMsgRequestBatchResponse
             */

            /**
             * Constructs a new MsgRequestBatchResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgRequestBatchResponse.
             * @implements IMsgRequestBatchResponse
             * @constructor
             * @param {gravity.v1.IMsgRequestBatchResponse=} [properties] Properties to set
             */
            function MsgRequestBatchResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgRequestBatchResponse message. Does not implicitly {@link gravity.v1.MsgRequestBatchResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgRequestBatchResponse
             * @static
             * @param {gravity.v1.IMsgRequestBatchResponse} message MsgRequestBatchResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgRequestBatchResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgRequestBatchResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgRequestBatchResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgRequestBatchResponse
             * @static
             * @param {gravity.v1.IMsgRequestBatchResponse} message MsgRequestBatchResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgRequestBatchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgRequestBatchResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgRequestBatchResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgRequestBatchResponse} MsgRequestBatchResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgRequestBatchResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgRequestBatchResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgRequestBatchResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgRequestBatchResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgRequestBatchResponse} MsgRequestBatchResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgRequestBatchResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgRequestBatchResponse message.
             * @function verify
             * @memberof gravity.v1.MsgRequestBatchResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgRequestBatchResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgRequestBatchResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgRequestBatchResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgRequestBatchResponse} MsgRequestBatchResponse
             */
            MsgRequestBatchResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgRequestBatchResponse)
                    return object;
                return new $root.gravity.v1.MsgRequestBatchResponse();
            };

            /**
             * Creates a plain object from a MsgRequestBatchResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgRequestBatchResponse
             * @static
             * @param {gravity.v1.MsgRequestBatchResponse} message MsgRequestBatchResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgRequestBatchResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgRequestBatchResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgRequestBatchResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgRequestBatchResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgRequestBatchResponse;
        })();

        v1.MsgConfirmBatch = (function() {

            /**
             * Properties of a MsgConfirmBatch.
             * @memberof gravity.v1
             * @interface IMsgConfirmBatch
             * @property {number|null} [nonce] MsgConfirmBatch nonce
             * @property {string|null} [token_contract] MsgConfirmBatch token_contract
             * @property {string|null} [eth_signer] MsgConfirmBatch eth_signer
             * @property {string|null} [orchestrator] MsgConfirmBatch orchestrator
             * @property {string|null} [signature] MsgConfirmBatch signature
             */

            /**
             * Constructs a new MsgConfirmBatch.
             * @memberof gravity.v1
             * @classdesc Represents a MsgConfirmBatch.
             * @implements IMsgConfirmBatch
             * @constructor
             * @param {gravity.v1.IMsgConfirmBatch=} [properties] Properties to set
             */
            function MsgConfirmBatch(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgConfirmBatch nonce.
             * @member {number} nonce
             * @memberof gravity.v1.MsgConfirmBatch
             * @instance
             */
            MsgConfirmBatch.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgConfirmBatch token_contract.
             * @member {string} token_contract
             * @memberof gravity.v1.MsgConfirmBatch
             * @instance
             */
            MsgConfirmBatch.prototype.token_contract = "";

            /**
             * MsgConfirmBatch eth_signer.
             * @member {string} eth_signer
             * @memberof gravity.v1.MsgConfirmBatch
             * @instance
             */
            MsgConfirmBatch.prototype.eth_signer = "";

            /**
             * MsgConfirmBatch orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgConfirmBatch
             * @instance
             */
            MsgConfirmBatch.prototype.orchestrator = "";

            /**
             * MsgConfirmBatch signature.
             * @member {string} signature
             * @memberof gravity.v1.MsgConfirmBatch
             * @instance
             */
            MsgConfirmBatch.prototype.signature = "";

            /**
             * Encodes the specified MsgConfirmBatch message. Does not implicitly {@link gravity.v1.MsgConfirmBatch.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgConfirmBatch
             * @static
             * @param {gravity.v1.IMsgConfirmBatch} message MsgConfirmBatch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgConfirmBatch.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.nonce);
                if (message.token_contract != null && Object.hasOwnProperty.call(message, "token_contract"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.token_contract);
                if (message.eth_signer != null && Object.hasOwnProperty.call(message, "eth_signer"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.eth_signer);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.orchestrator);
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.signature);
                return writer;
            };

            /**
             * Encodes the specified MsgConfirmBatch message, length delimited. Does not implicitly {@link gravity.v1.MsgConfirmBatch.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgConfirmBatch
             * @static
             * @param {gravity.v1.IMsgConfirmBatch} message MsgConfirmBatch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgConfirmBatch.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgConfirmBatch message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgConfirmBatch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgConfirmBatch} MsgConfirmBatch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgConfirmBatch.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgConfirmBatch();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.uint64();
                        break;
                    case 2:
                        message.token_contract = reader.string();
                        break;
                    case 3:
                        message.eth_signer = reader.string();
                        break;
                    case 4:
                        message.orchestrator = reader.string();
                        break;
                    case 5:
                        message.signature = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgConfirmBatch message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgConfirmBatch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgConfirmBatch} MsgConfirmBatch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgConfirmBatch.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgConfirmBatch message.
             * @function verify
             * @memberof gravity.v1.MsgConfirmBatch
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgConfirmBatch.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                        return "nonce: integer|Long expected";
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    if (!$util.isString(message.token_contract))
                        return "token_contract: string expected";
                if (message.eth_signer != null && message.hasOwnProperty("eth_signer"))
                    if (!$util.isString(message.eth_signer))
                        return "eth_signer: string expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!$util.isString(message.signature))
                        return "signature: string expected";
                return null;
            };

            /**
             * Creates a MsgConfirmBatch message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgConfirmBatch
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgConfirmBatch} MsgConfirmBatch
             */
            MsgConfirmBatch.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgConfirmBatch)
                    return object;
                let message = new $root.gravity.v1.MsgConfirmBatch();
                if (object.nonce != null)
                    if ($util.Long)
                        (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = true;
                    else if (typeof object.nonce === "string")
                        message.nonce = parseInt(object.nonce, 10);
                    else if (typeof object.nonce === "number")
                        message.nonce = object.nonce;
                    else if (typeof object.nonce === "object")
                        message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber(true);
                if (object.token_contract != null)
                    message.token_contract = String(object.token_contract);
                if (object.eth_signer != null)
                    message.eth_signer = String(object.eth_signer);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                if (object.signature != null)
                    message.signature = String(object.signature);
                return message;
            };

            /**
             * Creates a plain object from a MsgConfirmBatch message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgConfirmBatch
             * @static
             * @param {gravity.v1.MsgConfirmBatch} message MsgConfirmBatch
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgConfirmBatch.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.nonce = options.longs === String ? "0" : 0;
                    object.token_contract = "";
                    object.eth_signer = "";
                    object.orchestrator = "";
                    object.signature = "";
                }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (typeof message.nonce === "number")
                        object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                    else
                        object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber(true) : message.nonce;
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    object.token_contract = message.token_contract;
                if (message.eth_signer != null && message.hasOwnProperty("eth_signer"))
                    object.eth_signer = message.eth_signer;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = message.signature;
                return object;
            };

            /**
             * Converts this MsgConfirmBatch to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgConfirmBatch
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgConfirmBatch.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgConfirmBatch;
        })();

        v1.MsgConfirmBatchResponse = (function() {

            /**
             * Properties of a MsgConfirmBatchResponse.
             * @memberof gravity.v1
             * @interface IMsgConfirmBatchResponse
             */

            /**
             * Constructs a new MsgConfirmBatchResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgConfirmBatchResponse.
             * @implements IMsgConfirmBatchResponse
             * @constructor
             * @param {gravity.v1.IMsgConfirmBatchResponse=} [properties] Properties to set
             */
            function MsgConfirmBatchResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgConfirmBatchResponse message. Does not implicitly {@link gravity.v1.MsgConfirmBatchResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgConfirmBatchResponse
             * @static
             * @param {gravity.v1.IMsgConfirmBatchResponse} message MsgConfirmBatchResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgConfirmBatchResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgConfirmBatchResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgConfirmBatchResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgConfirmBatchResponse
             * @static
             * @param {gravity.v1.IMsgConfirmBatchResponse} message MsgConfirmBatchResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgConfirmBatchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgConfirmBatchResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgConfirmBatchResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgConfirmBatchResponse} MsgConfirmBatchResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgConfirmBatchResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgConfirmBatchResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgConfirmBatchResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgConfirmBatchResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgConfirmBatchResponse} MsgConfirmBatchResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgConfirmBatchResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgConfirmBatchResponse message.
             * @function verify
             * @memberof gravity.v1.MsgConfirmBatchResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgConfirmBatchResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgConfirmBatchResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgConfirmBatchResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgConfirmBatchResponse} MsgConfirmBatchResponse
             */
            MsgConfirmBatchResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgConfirmBatchResponse)
                    return object;
                return new $root.gravity.v1.MsgConfirmBatchResponse();
            };

            /**
             * Creates a plain object from a MsgConfirmBatchResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgConfirmBatchResponse
             * @static
             * @param {gravity.v1.MsgConfirmBatchResponse} message MsgConfirmBatchResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgConfirmBatchResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgConfirmBatchResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgConfirmBatchResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgConfirmBatchResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgConfirmBatchResponse;
        })();

        v1.MsgConfirmLogicCall = (function() {

            /**
             * Properties of a MsgConfirmLogicCall.
             * @memberof gravity.v1
             * @interface IMsgConfirmLogicCall
             * @property {string|null} [invalidation_id] MsgConfirmLogicCall invalidation_id
             * @property {number|null} [invalidation_nonce] MsgConfirmLogicCall invalidation_nonce
             * @property {string|null} [eth_signer] MsgConfirmLogicCall eth_signer
             * @property {string|null} [orchestrator] MsgConfirmLogicCall orchestrator
             * @property {string|null} [signature] MsgConfirmLogicCall signature
             */

            /**
             * Constructs a new MsgConfirmLogicCall.
             * @memberof gravity.v1
             * @classdesc Represents a MsgConfirmLogicCall.
             * @implements IMsgConfirmLogicCall
             * @constructor
             * @param {gravity.v1.IMsgConfirmLogicCall=} [properties] Properties to set
             */
            function MsgConfirmLogicCall(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgConfirmLogicCall invalidation_id.
             * @member {string} invalidation_id
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @instance
             */
            MsgConfirmLogicCall.prototype.invalidation_id = "";

            /**
             * MsgConfirmLogicCall invalidation_nonce.
             * @member {number} invalidation_nonce
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @instance
             */
            MsgConfirmLogicCall.prototype.invalidation_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgConfirmLogicCall eth_signer.
             * @member {string} eth_signer
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @instance
             */
            MsgConfirmLogicCall.prototype.eth_signer = "";

            /**
             * MsgConfirmLogicCall orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @instance
             */
            MsgConfirmLogicCall.prototype.orchestrator = "";

            /**
             * MsgConfirmLogicCall signature.
             * @member {string} signature
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @instance
             */
            MsgConfirmLogicCall.prototype.signature = "";

            /**
             * Encodes the specified MsgConfirmLogicCall message. Does not implicitly {@link gravity.v1.MsgConfirmLogicCall.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @static
             * @param {gravity.v1.IMsgConfirmLogicCall} message MsgConfirmLogicCall message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgConfirmLogicCall.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.invalidation_id != null && Object.hasOwnProperty.call(message, "invalidation_id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.invalidation_id);
                if (message.invalidation_nonce != null && Object.hasOwnProperty.call(message, "invalidation_nonce"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.invalidation_nonce);
                if (message.eth_signer != null && Object.hasOwnProperty.call(message, "eth_signer"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.eth_signer);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.orchestrator);
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.signature);
                return writer;
            };

            /**
             * Encodes the specified MsgConfirmLogicCall message, length delimited. Does not implicitly {@link gravity.v1.MsgConfirmLogicCall.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @static
             * @param {gravity.v1.IMsgConfirmLogicCall} message MsgConfirmLogicCall message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgConfirmLogicCall.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgConfirmLogicCall message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgConfirmLogicCall} MsgConfirmLogicCall
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgConfirmLogicCall.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgConfirmLogicCall();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.invalidation_id = reader.string();
                        break;
                    case 2:
                        message.invalidation_nonce = reader.uint64();
                        break;
                    case 3:
                        message.eth_signer = reader.string();
                        break;
                    case 4:
                        message.orchestrator = reader.string();
                        break;
                    case 5:
                        message.signature = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgConfirmLogicCall message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgConfirmLogicCall} MsgConfirmLogicCall
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgConfirmLogicCall.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgConfirmLogicCall message.
             * @function verify
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgConfirmLogicCall.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.invalidation_id != null && message.hasOwnProperty("invalidation_id"))
                    if (!$util.isString(message.invalidation_id))
                        return "invalidation_id: string expected";
                if (message.invalidation_nonce != null && message.hasOwnProperty("invalidation_nonce"))
                    if (!$util.isInteger(message.invalidation_nonce) && !(message.invalidation_nonce && $util.isInteger(message.invalidation_nonce.low) && $util.isInteger(message.invalidation_nonce.high)))
                        return "invalidation_nonce: integer|Long expected";
                if (message.eth_signer != null && message.hasOwnProperty("eth_signer"))
                    if (!$util.isString(message.eth_signer))
                        return "eth_signer: string expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!$util.isString(message.signature))
                        return "signature: string expected";
                return null;
            };

            /**
             * Creates a MsgConfirmLogicCall message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgConfirmLogicCall} MsgConfirmLogicCall
             */
            MsgConfirmLogicCall.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgConfirmLogicCall)
                    return object;
                let message = new $root.gravity.v1.MsgConfirmLogicCall();
                if (object.invalidation_id != null)
                    message.invalidation_id = String(object.invalidation_id);
                if (object.invalidation_nonce != null)
                    if ($util.Long)
                        (message.invalidation_nonce = $util.Long.fromValue(object.invalidation_nonce)).unsigned = true;
                    else if (typeof object.invalidation_nonce === "string")
                        message.invalidation_nonce = parseInt(object.invalidation_nonce, 10);
                    else if (typeof object.invalidation_nonce === "number")
                        message.invalidation_nonce = object.invalidation_nonce;
                    else if (typeof object.invalidation_nonce === "object")
                        message.invalidation_nonce = new $util.LongBits(object.invalidation_nonce.low >>> 0, object.invalidation_nonce.high >>> 0).toNumber(true);
                if (object.eth_signer != null)
                    message.eth_signer = String(object.eth_signer);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                if (object.signature != null)
                    message.signature = String(object.signature);
                return message;
            };

            /**
             * Creates a plain object from a MsgConfirmLogicCall message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @static
             * @param {gravity.v1.MsgConfirmLogicCall} message MsgConfirmLogicCall
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgConfirmLogicCall.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.invalidation_id = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.invalidation_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.invalidation_nonce = options.longs === String ? "0" : 0;
                    object.eth_signer = "";
                    object.orchestrator = "";
                    object.signature = "";
                }
                if (message.invalidation_id != null && message.hasOwnProperty("invalidation_id"))
                    object.invalidation_id = message.invalidation_id;
                if (message.invalidation_nonce != null && message.hasOwnProperty("invalidation_nonce"))
                    if (typeof message.invalidation_nonce === "number")
                        object.invalidation_nonce = options.longs === String ? String(message.invalidation_nonce) : message.invalidation_nonce;
                    else
                        object.invalidation_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.invalidation_nonce) : options.longs === Number ? new $util.LongBits(message.invalidation_nonce.low >>> 0, message.invalidation_nonce.high >>> 0).toNumber(true) : message.invalidation_nonce;
                if (message.eth_signer != null && message.hasOwnProperty("eth_signer"))
                    object.eth_signer = message.eth_signer;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = message.signature;
                return object;
            };

            /**
             * Converts this MsgConfirmLogicCall to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgConfirmLogicCall
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgConfirmLogicCall.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgConfirmLogicCall;
        })();

        v1.MsgConfirmLogicCallResponse = (function() {

            /**
             * Properties of a MsgConfirmLogicCallResponse.
             * @memberof gravity.v1
             * @interface IMsgConfirmLogicCallResponse
             */

            /**
             * Constructs a new MsgConfirmLogicCallResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgConfirmLogicCallResponse.
             * @implements IMsgConfirmLogicCallResponse
             * @constructor
             * @param {gravity.v1.IMsgConfirmLogicCallResponse=} [properties] Properties to set
             */
            function MsgConfirmLogicCallResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgConfirmLogicCallResponse message. Does not implicitly {@link gravity.v1.MsgConfirmLogicCallResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgConfirmLogicCallResponse
             * @static
             * @param {gravity.v1.IMsgConfirmLogicCallResponse} message MsgConfirmLogicCallResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgConfirmLogicCallResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgConfirmLogicCallResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgConfirmLogicCallResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgConfirmLogicCallResponse
             * @static
             * @param {gravity.v1.IMsgConfirmLogicCallResponse} message MsgConfirmLogicCallResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgConfirmLogicCallResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgConfirmLogicCallResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgConfirmLogicCallResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgConfirmLogicCallResponse} MsgConfirmLogicCallResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgConfirmLogicCallResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgConfirmLogicCallResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgConfirmLogicCallResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgConfirmLogicCallResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgConfirmLogicCallResponse} MsgConfirmLogicCallResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgConfirmLogicCallResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgConfirmLogicCallResponse message.
             * @function verify
             * @memberof gravity.v1.MsgConfirmLogicCallResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgConfirmLogicCallResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgConfirmLogicCallResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgConfirmLogicCallResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgConfirmLogicCallResponse} MsgConfirmLogicCallResponse
             */
            MsgConfirmLogicCallResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgConfirmLogicCallResponse)
                    return object;
                return new $root.gravity.v1.MsgConfirmLogicCallResponse();
            };

            /**
             * Creates a plain object from a MsgConfirmLogicCallResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgConfirmLogicCallResponse
             * @static
             * @param {gravity.v1.MsgConfirmLogicCallResponse} message MsgConfirmLogicCallResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgConfirmLogicCallResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgConfirmLogicCallResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgConfirmLogicCallResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgConfirmLogicCallResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgConfirmLogicCallResponse;
        })();

        v1.MsgSendToCosmosClaim = (function() {

            /**
             * Properties of a MsgSendToCosmosClaim.
             * @memberof gravity.v1
             * @interface IMsgSendToCosmosClaim
             * @property {number|null} [event_nonce] MsgSendToCosmosClaim event_nonce
             * @property {number|null} [eth_block_height] MsgSendToCosmosClaim eth_block_height
             * @property {string|null} [token_contract] MsgSendToCosmosClaim token_contract
             * @property {string|null} [amount] MsgSendToCosmosClaim amount
             * @property {string|null} [ethereum_sender] MsgSendToCosmosClaim ethereum_sender
             * @property {string|null} [cosmos_receiver] MsgSendToCosmosClaim cosmos_receiver
             * @property {string|null} [orchestrator] MsgSendToCosmosClaim orchestrator
             */

            /**
             * Constructs a new MsgSendToCosmosClaim.
             * @memberof gravity.v1
             * @classdesc Represents a MsgSendToCosmosClaim.
             * @implements IMsgSendToCosmosClaim
             * @constructor
             * @param {gravity.v1.IMsgSendToCosmosClaim=} [properties] Properties to set
             */
            function MsgSendToCosmosClaim(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgSendToCosmosClaim event_nonce.
             * @member {number} event_nonce
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @instance
             */
            MsgSendToCosmosClaim.prototype.event_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgSendToCosmosClaim eth_block_height.
             * @member {number} eth_block_height
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @instance
             */
            MsgSendToCosmosClaim.prototype.eth_block_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgSendToCosmosClaim token_contract.
             * @member {string} token_contract
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @instance
             */
            MsgSendToCosmosClaim.prototype.token_contract = "";

            /**
             * MsgSendToCosmosClaim amount.
             * @member {string} amount
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @instance
             */
            MsgSendToCosmosClaim.prototype.amount = "";

            /**
             * MsgSendToCosmosClaim ethereum_sender.
             * @member {string} ethereum_sender
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @instance
             */
            MsgSendToCosmosClaim.prototype.ethereum_sender = "";

            /**
             * MsgSendToCosmosClaim cosmos_receiver.
             * @member {string} cosmos_receiver
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @instance
             */
            MsgSendToCosmosClaim.prototype.cosmos_receiver = "";

            /**
             * MsgSendToCosmosClaim orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @instance
             */
            MsgSendToCosmosClaim.prototype.orchestrator = "";

            /**
             * Encodes the specified MsgSendToCosmosClaim message. Does not implicitly {@link gravity.v1.MsgSendToCosmosClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @static
             * @param {gravity.v1.IMsgSendToCosmosClaim} message MsgSendToCosmosClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSendToCosmosClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.event_nonce != null && Object.hasOwnProperty.call(message, "event_nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.event_nonce);
                if (message.eth_block_height != null && Object.hasOwnProperty.call(message, "eth_block_height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.eth_block_height);
                if (message.token_contract != null && Object.hasOwnProperty.call(message, "token_contract"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.token_contract);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.amount);
                if (message.ethereum_sender != null && Object.hasOwnProperty.call(message, "ethereum_sender"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.ethereum_sender);
                if (message.cosmos_receiver != null && Object.hasOwnProperty.call(message, "cosmos_receiver"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.cosmos_receiver);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.orchestrator);
                return writer;
            };

            /**
             * Encodes the specified MsgSendToCosmosClaim message, length delimited. Does not implicitly {@link gravity.v1.MsgSendToCosmosClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @static
             * @param {gravity.v1.IMsgSendToCosmosClaim} message MsgSendToCosmosClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSendToCosmosClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgSendToCosmosClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgSendToCosmosClaim} MsgSendToCosmosClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSendToCosmosClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgSendToCosmosClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.event_nonce = reader.uint64();
                        break;
                    case 2:
                        message.eth_block_height = reader.uint64();
                        break;
                    case 3:
                        message.token_contract = reader.string();
                        break;
                    case 4:
                        message.amount = reader.string();
                        break;
                    case 5:
                        message.ethereum_sender = reader.string();
                        break;
                    case 6:
                        message.cosmos_receiver = reader.string();
                        break;
                    case 7:
                        message.orchestrator = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgSendToCosmosClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgSendToCosmosClaim} MsgSendToCosmosClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSendToCosmosClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgSendToCosmosClaim message.
             * @function verify
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgSendToCosmosClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (!$util.isInteger(message.event_nonce) && !(message.event_nonce && $util.isInteger(message.event_nonce.low) && $util.isInteger(message.event_nonce.high)))
                        return "event_nonce: integer|Long expected";
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (!$util.isInteger(message.eth_block_height) && !(message.eth_block_height && $util.isInteger(message.eth_block_height.low) && $util.isInteger(message.eth_block_height.high)))
                        return "eth_block_height: integer|Long expected";
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    if (!$util.isString(message.token_contract))
                        return "token_contract: string expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isString(message.amount))
                        return "amount: string expected";
                if (message.ethereum_sender != null && message.hasOwnProperty("ethereum_sender"))
                    if (!$util.isString(message.ethereum_sender))
                        return "ethereum_sender: string expected";
                if (message.cosmos_receiver != null && message.hasOwnProperty("cosmos_receiver"))
                    if (!$util.isString(message.cosmos_receiver))
                        return "cosmos_receiver: string expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                return null;
            };

            /**
             * Creates a MsgSendToCosmosClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgSendToCosmosClaim} MsgSendToCosmosClaim
             */
            MsgSendToCosmosClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgSendToCosmosClaim)
                    return object;
                let message = new $root.gravity.v1.MsgSendToCosmosClaim();
                if (object.event_nonce != null)
                    if ($util.Long)
                        (message.event_nonce = $util.Long.fromValue(object.event_nonce)).unsigned = true;
                    else if (typeof object.event_nonce === "string")
                        message.event_nonce = parseInt(object.event_nonce, 10);
                    else if (typeof object.event_nonce === "number")
                        message.event_nonce = object.event_nonce;
                    else if (typeof object.event_nonce === "object")
                        message.event_nonce = new $util.LongBits(object.event_nonce.low >>> 0, object.event_nonce.high >>> 0).toNumber(true);
                if (object.eth_block_height != null)
                    if ($util.Long)
                        (message.eth_block_height = $util.Long.fromValue(object.eth_block_height)).unsigned = true;
                    else if (typeof object.eth_block_height === "string")
                        message.eth_block_height = parseInt(object.eth_block_height, 10);
                    else if (typeof object.eth_block_height === "number")
                        message.eth_block_height = object.eth_block_height;
                    else if (typeof object.eth_block_height === "object")
                        message.eth_block_height = new $util.LongBits(object.eth_block_height.low >>> 0, object.eth_block_height.high >>> 0).toNumber(true);
                if (object.token_contract != null)
                    message.token_contract = String(object.token_contract);
                if (object.amount != null)
                    message.amount = String(object.amount);
                if (object.ethereum_sender != null)
                    message.ethereum_sender = String(object.ethereum_sender);
                if (object.cosmos_receiver != null)
                    message.cosmos_receiver = String(object.cosmos_receiver);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                return message;
            };

            /**
             * Creates a plain object from a MsgSendToCosmosClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @static
             * @param {gravity.v1.MsgSendToCosmosClaim} message MsgSendToCosmosClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgSendToCosmosClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.event_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.event_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.eth_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.eth_block_height = options.longs === String ? "0" : 0;
                    object.token_contract = "";
                    object.amount = "";
                    object.ethereum_sender = "";
                    object.cosmos_receiver = "";
                    object.orchestrator = "";
                }
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (typeof message.event_nonce === "number")
                        object.event_nonce = options.longs === String ? String(message.event_nonce) : message.event_nonce;
                    else
                        object.event_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.event_nonce) : options.longs === Number ? new $util.LongBits(message.event_nonce.low >>> 0, message.event_nonce.high >>> 0).toNumber(true) : message.event_nonce;
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (typeof message.eth_block_height === "number")
                        object.eth_block_height = options.longs === String ? String(message.eth_block_height) : message.eth_block_height;
                    else
                        object.eth_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.eth_block_height) : options.longs === Number ? new $util.LongBits(message.eth_block_height.low >>> 0, message.eth_block_height.high >>> 0).toNumber(true) : message.eth_block_height;
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    object.token_contract = message.token_contract;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.ethereum_sender != null && message.hasOwnProperty("ethereum_sender"))
                    object.ethereum_sender = message.ethereum_sender;
                if (message.cosmos_receiver != null && message.hasOwnProperty("cosmos_receiver"))
                    object.cosmos_receiver = message.cosmos_receiver;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                return object;
            };

            /**
             * Converts this MsgSendToCosmosClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgSendToCosmosClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgSendToCosmosClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgSendToCosmosClaim;
        })();

        v1.MsgSendToCosmosClaimResponse = (function() {

            /**
             * Properties of a MsgSendToCosmosClaimResponse.
             * @memberof gravity.v1
             * @interface IMsgSendToCosmosClaimResponse
             */

            /**
             * Constructs a new MsgSendToCosmosClaimResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgSendToCosmosClaimResponse.
             * @implements IMsgSendToCosmosClaimResponse
             * @constructor
             * @param {gravity.v1.IMsgSendToCosmosClaimResponse=} [properties] Properties to set
             */
            function MsgSendToCosmosClaimResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgSendToCosmosClaimResponse message. Does not implicitly {@link gravity.v1.MsgSendToCosmosClaimResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgSendToCosmosClaimResponse
             * @static
             * @param {gravity.v1.IMsgSendToCosmosClaimResponse} message MsgSendToCosmosClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSendToCosmosClaimResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgSendToCosmosClaimResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgSendToCosmosClaimResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgSendToCosmosClaimResponse
             * @static
             * @param {gravity.v1.IMsgSendToCosmosClaimResponse} message MsgSendToCosmosClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSendToCosmosClaimResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgSendToCosmosClaimResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgSendToCosmosClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgSendToCosmosClaimResponse} MsgSendToCosmosClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSendToCosmosClaimResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgSendToCosmosClaimResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgSendToCosmosClaimResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgSendToCosmosClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgSendToCosmosClaimResponse} MsgSendToCosmosClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSendToCosmosClaimResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgSendToCosmosClaimResponse message.
             * @function verify
             * @memberof gravity.v1.MsgSendToCosmosClaimResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgSendToCosmosClaimResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgSendToCosmosClaimResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgSendToCosmosClaimResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgSendToCosmosClaimResponse} MsgSendToCosmosClaimResponse
             */
            MsgSendToCosmosClaimResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgSendToCosmosClaimResponse)
                    return object;
                return new $root.gravity.v1.MsgSendToCosmosClaimResponse();
            };

            /**
             * Creates a plain object from a MsgSendToCosmosClaimResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgSendToCosmosClaimResponse
             * @static
             * @param {gravity.v1.MsgSendToCosmosClaimResponse} message MsgSendToCosmosClaimResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgSendToCosmosClaimResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgSendToCosmosClaimResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgSendToCosmosClaimResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgSendToCosmosClaimResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgSendToCosmosClaimResponse;
        })();

        v1.MsgExecuteIbcAutoForwards = (function() {

            /**
             * Properties of a MsgExecuteIbcAutoForwards.
             * @memberof gravity.v1
             * @interface IMsgExecuteIbcAutoForwards
             * @property {number|null} [forwards_to_clear] MsgExecuteIbcAutoForwards forwards_to_clear
             * @property {string|null} [executor] MsgExecuteIbcAutoForwards executor
             */

            /**
             * Constructs a new MsgExecuteIbcAutoForwards.
             * @memberof gravity.v1
             * @classdesc Represents a MsgExecuteIbcAutoForwards.
             * @implements IMsgExecuteIbcAutoForwards
             * @constructor
             * @param {gravity.v1.IMsgExecuteIbcAutoForwards=} [properties] Properties to set
             */
            function MsgExecuteIbcAutoForwards(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgExecuteIbcAutoForwards forwards_to_clear.
             * @member {number} forwards_to_clear
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @instance
             */
            MsgExecuteIbcAutoForwards.prototype.forwards_to_clear = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgExecuteIbcAutoForwards executor.
             * @member {string} executor
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @instance
             */
            MsgExecuteIbcAutoForwards.prototype.executor = "";

            /**
             * Encodes the specified MsgExecuteIbcAutoForwards message. Does not implicitly {@link gravity.v1.MsgExecuteIbcAutoForwards.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @static
             * @param {gravity.v1.IMsgExecuteIbcAutoForwards} message MsgExecuteIbcAutoForwards message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgExecuteIbcAutoForwards.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.forwards_to_clear != null && Object.hasOwnProperty.call(message, "forwards_to_clear"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.forwards_to_clear);
                if (message.executor != null && Object.hasOwnProperty.call(message, "executor"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.executor);
                return writer;
            };

            /**
             * Encodes the specified MsgExecuteIbcAutoForwards message, length delimited. Does not implicitly {@link gravity.v1.MsgExecuteIbcAutoForwards.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @static
             * @param {gravity.v1.IMsgExecuteIbcAutoForwards} message MsgExecuteIbcAutoForwards message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgExecuteIbcAutoForwards.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgExecuteIbcAutoForwards message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgExecuteIbcAutoForwards} MsgExecuteIbcAutoForwards
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgExecuteIbcAutoForwards.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgExecuteIbcAutoForwards();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.forwards_to_clear = reader.uint64();
                        break;
                    case 2:
                        message.executor = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgExecuteIbcAutoForwards message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgExecuteIbcAutoForwards} MsgExecuteIbcAutoForwards
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgExecuteIbcAutoForwards.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgExecuteIbcAutoForwards message.
             * @function verify
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgExecuteIbcAutoForwards.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.forwards_to_clear != null && message.hasOwnProperty("forwards_to_clear"))
                    if (!$util.isInteger(message.forwards_to_clear) && !(message.forwards_to_clear && $util.isInteger(message.forwards_to_clear.low) && $util.isInteger(message.forwards_to_clear.high)))
                        return "forwards_to_clear: integer|Long expected";
                if (message.executor != null && message.hasOwnProperty("executor"))
                    if (!$util.isString(message.executor))
                        return "executor: string expected";
                return null;
            };

            /**
             * Creates a MsgExecuteIbcAutoForwards message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgExecuteIbcAutoForwards} MsgExecuteIbcAutoForwards
             */
            MsgExecuteIbcAutoForwards.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgExecuteIbcAutoForwards)
                    return object;
                let message = new $root.gravity.v1.MsgExecuteIbcAutoForwards();
                if (object.forwards_to_clear != null)
                    if ($util.Long)
                        (message.forwards_to_clear = $util.Long.fromValue(object.forwards_to_clear)).unsigned = true;
                    else if (typeof object.forwards_to_clear === "string")
                        message.forwards_to_clear = parseInt(object.forwards_to_clear, 10);
                    else if (typeof object.forwards_to_clear === "number")
                        message.forwards_to_clear = object.forwards_to_clear;
                    else if (typeof object.forwards_to_clear === "object")
                        message.forwards_to_clear = new $util.LongBits(object.forwards_to_clear.low >>> 0, object.forwards_to_clear.high >>> 0).toNumber(true);
                if (object.executor != null)
                    message.executor = String(object.executor);
                return message;
            };

            /**
             * Creates a plain object from a MsgExecuteIbcAutoForwards message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @static
             * @param {gravity.v1.MsgExecuteIbcAutoForwards} message MsgExecuteIbcAutoForwards
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgExecuteIbcAutoForwards.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.forwards_to_clear = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.forwards_to_clear = options.longs === String ? "0" : 0;
                    object.executor = "";
                }
                if (message.forwards_to_clear != null && message.hasOwnProperty("forwards_to_clear"))
                    if (typeof message.forwards_to_clear === "number")
                        object.forwards_to_clear = options.longs === String ? String(message.forwards_to_clear) : message.forwards_to_clear;
                    else
                        object.forwards_to_clear = options.longs === String ? $util.Long.prototype.toString.call(message.forwards_to_clear) : options.longs === Number ? new $util.LongBits(message.forwards_to_clear.low >>> 0, message.forwards_to_clear.high >>> 0).toNumber(true) : message.forwards_to_clear;
                if (message.executor != null && message.hasOwnProperty("executor"))
                    object.executor = message.executor;
                return object;
            };

            /**
             * Converts this MsgExecuteIbcAutoForwards to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgExecuteIbcAutoForwards
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgExecuteIbcAutoForwards.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgExecuteIbcAutoForwards;
        })();

        v1.MsgExecuteIbcAutoForwardsResponse = (function() {

            /**
             * Properties of a MsgExecuteIbcAutoForwardsResponse.
             * @memberof gravity.v1
             * @interface IMsgExecuteIbcAutoForwardsResponse
             */

            /**
             * Constructs a new MsgExecuteIbcAutoForwardsResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgExecuteIbcAutoForwardsResponse.
             * @implements IMsgExecuteIbcAutoForwardsResponse
             * @constructor
             * @param {gravity.v1.IMsgExecuteIbcAutoForwardsResponse=} [properties] Properties to set
             */
            function MsgExecuteIbcAutoForwardsResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgExecuteIbcAutoForwardsResponse message. Does not implicitly {@link gravity.v1.MsgExecuteIbcAutoForwardsResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgExecuteIbcAutoForwardsResponse
             * @static
             * @param {gravity.v1.IMsgExecuteIbcAutoForwardsResponse} message MsgExecuteIbcAutoForwardsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgExecuteIbcAutoForwardsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgExecuteIbcAutoForwardsResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgExecuteIbcAutoForwardsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgExecuteIbcAutoForwardsResponse
             * @static
             * @param {gravity.v1.IMsgExecuteIbcAutoForwardsResponse} message MsgExecuteIbcAutoForwardsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgExecuteIbcAutoForwardsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgExecuteIbcAutoForwardsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgExecuteIbcAutoForwardsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgExecuteIbcAutoForwardsResponse} MsgExecuteIbcAutoForwardsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgExecuteIbcAutoForwardsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgExecuteIbcAutoForwardsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgExecuteIbcAutoForwardsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgExecuteIbcAutoForwardsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgExecuteIbcAutoForwardsResponse} MsgExecuteIbcAutoForwardsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgExecuteIbcAutoForwardsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgExecuteIbcAutoForwardsResponse message.
             * @function verify
             * @memberof gravity.v1.MsgExecuteIbcAutoForwardsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgExecuteIbcAutoForwardsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgExecuteIbcAutoForwardsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgExecuteIbcAutoForwardsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgExecuteIbcAutoForwardsResponse} MsgExecuteIbcAutoForwardsResponse
             */
            MsgExecuteIbcAutoForwardsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgExecuteIbcAutoForwardsResponse)
                    return object;
                return new $root.gravity.v1.MsgExecuteIbcAutoForwardsResponse();
            };

            /**
             * Creates a plain object from a MsgExecuteIbcAutoForwardsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgExecuteIbcAutoForwardsResponse
             * @static
             * @param {gravity.v1.MsgExecuteIbcAutoForwardsResponse} message MsgExecuteIbcAutoForwardsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgExecuteIbcAutoForwardsResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgExecuteIbcAutoForwardsResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgExecuteIbcAutoForwardsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgExecuteIbcAutoForwardsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgExecuteIbcAutoForwardsResponse;
        })();

        v1.MsgBatchSendToEthClaim = (function() {

            /**
             * Properties of a MsgBatchSendToEthClaim.
             * @memberof gravity.v1
             * @interface IMsgBatchSendToEthClaim
             * @property {number|null} [event_nonce] MsgBatchSendToEthClaim event_nonce
             * @property {number|null} [eth_block_height] MsgBatchSendToEthClaim eth_block_height
             * @property {number|null} [batch_nonce] MsgBatchSendToEthClaim batch_nonce
             * @property {string|null} [token_contract] MsgBatchSendToEthClaim token_contract
             * @property {string|null} [orchestrator] MsgBatchSendToEthClaim orchestrator
             */

            /**
             * Constructs a new MsgBatchSendToEthClaim.
             * @memberof gravity.v1
             * @classdesc Represents a MsgBatchSendToEthClaim.
             * @implements IMsgBatchSendToEthClaim
             * @constructor
             * @param {gravity.v1.IMsgBatchSendToEthClaim=} [properties] Properties to set
             */
            function MsgBatchSendToEthClaim(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgBatchSendToEthClaim event_nonce.
             * @member {number} event_nonce
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @instance
             */
            MsgBatchSendToEthClaim.prototype.event_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgBatchSendToEthClaim eth_block_height.
             * @member {number} eth_block_height
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @instance
             */
            MsgBatchSendToEthClaim.prototype.eth_block_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgBatchSendToEthClaim batch_nonce.
             * @member {number} batch_nonce
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @instance
             */
            MsgBatchSendToEthClaim.prototype.batch_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgBatchSendToEthClaim token_contract.
             * @member {string} token_contract
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @instance
             */
            MsgBatchSendToEthClaim.prototype.token_contract = "";

            /**
             * MsgBatchSendToEthClaim orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @instance
             */
            MsgBatchSendToEthClaim.prototype.orchestrator = "";

            /**
             * Encodes the specified MsgBatchSendToEthClaim message. Does not implicitly {@link gravity.v1.MsgBatchSendToEthClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @static
             * @param {gravity.v1.IMsgBatchSendToEthClaim} message MsgBatchSendToEthClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgBatchSendToEthClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.event_nonce != null && Object.hasOwnProperty.call(message, "event_nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.event_nonce);
                if (message.eth_block_height != null && Object.hasOwnProperty.call(message, "eth_block_height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.eth_block_height);
                if (message.batch_nonce != null && Object.hasOwnProperty.call(message, "batch_nonce"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.batch_nonce);
                if (message.token_contract != null && Object.hasOwnProperty.call(message, "token_contract"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.token_contract);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.orchestrator);
                return writer;
            };

            /**
             * Encodes the specified MsgBatchSendToEthClaim message, length delimited. Does not implicitly {@link gravity.v1.MsgBatchSendToEthClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @static
             * @param {gravity.v1.IMsgBatchSendToEthClaim} message MsgBatchSendToEthClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgBatchSendToEthClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgBatchSendToEthClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgBatchSendToEthClaim} MsgBatchSendToEthClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgBatchSendToEthClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgBatchSendToEthClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.event_nonce = reader.uint64();
                        break;
                    case 2:
                        message.eth_block_height = reader.uint64();
                        break;
                    case 3:
                        message.batch_nonce = reader.uint64();
                        break;
                    case 4:
                        message.token_contract = reader.string();
                        break;
                    case 5:
                        message.orchestrator = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgBatchSendToEthClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgBatchSendToEthClaim} MsgBatchSendToEthClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgBatchSendToEthClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgBatchSendToEthClaim message.
             * @function verify
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgBatchSendToEthClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (!$util.isInteger(message.event_nonce) && !(message.event_nonce && $util.isInteger(message.event_nonce.low) && $util.isInteger(message.event_nonce.high)))
                        return "event_nonce: integer|Long expected";
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (!$util.isInteger(message.eth_block_height) && !(message.eth_block_height && $util.isInteger(message.eth_block_height.low) && $util.isInteger(message.eth_block_height.high)))
                        return "eth_block_height: integer|Long expected";
                if (message.batch_nonce != null && message.hasOwnProperty("batch_nonce"))
                    if (!$util.isInteger(message.batch_nonce) && !(message.batch_nonce && $util.isInteger(message.batch_nonce.low) && $util.isInteger(message.batch_nonce.high)))
                        return "batch_nonce: integer|Long expected";
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    if (!$util.isString(message.token_contract))
                        return "token_contract: string expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                return null;
            };

            /**
             * Creates a MsgBatchSendToEthClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgBatchSendToEthClaim} MsgBatchSendToEthClaim
             */
            MsgBatchSendToEthClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgBatchSendToEthClaim)
                    return object;
                let message = new $root.gravity.v1.MsgBatchSendToEthClaim();
                if (object.event_nonce != null)
                    if ($util.Long)
                        (message.event_nonce = $util.Long.fromValue(object.event_nonce)).unsigned = true;
                    else if (typeof object.event_nonce === "string")
                        message.event_nonce = parseInt(object.event_nonce, 10);
                    else if (typeof object.event_nonce === "number")
                        message.event_nonce = object.event_nonce;
                    else if (typeof object.event_nonce === "object")
                        message.event_nonce = new $util.LongBits(object.event_nonce.low >>> 0, object.event_nonce.high >>> 0).toNumber(true);
                if (object.eth_block_height != null)
                    if ($util.Long)
                        (message.eth_block_height = $util.Long.fromValue(object.eth_block_height)).unsigned = true;
                    else if (typeof object.eth_block_height === "string")
                        message.eth_block_height = parseInt(object.eth_block_height, 10);
                    else if (typeof object.eth_block_height === "number")
                        message.eth_block_height = object.eth_block_height;
                    else if (typeof object.eth_block_height === "object")
                        message.eth_block_height = new $util.LongBits(object.eth_block_height.low >>> 0, object.eth_block_height.high >>> 0).toNumber(true);
                if (object.batch_nonce != null)
                    if ($util.Long)
                        (message.batch_nonce = $util.Long.fromValue(object.batch_nonce)).unsigned = true;
                    else if (typeof object.batch_nonce === "string")
                        message.batch_nonce = parseInt(object.batch_nonce, 10);
                    else if (typeof object.batch_nonce === "number")
                        message.batch_nonce = object.batch_nonce;
                    else if (typeof object.batch_nonce === "object")
                        message.batch_nonce = new $util.LongBits(object.batch_nonce.low >>> 0, object.batch_nonce.high >>> 0).toNumber(true);
                if (object.token_contract != null)
                    message.token_contract = String(object.token_contract);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                return message;
            };

            /**
             * Creates a plain object from a MsgBatchSendToEthClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @static
             * @param {gravity.v1.MsgBatchSendToEthClaim} message MsgBatchSendToEthClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgBatchSendToEthClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.event_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.event_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.eth_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.eth_block_height = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.batch_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.batch_nonce = options.longs === String ? "0" : 0;
                    object.token_contract = "";
                    object.orchestrator = "";
                }
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (typeof message.event_nonce === "number")
                        object.event_nonce = options.longs === String ? String(message.event_nonce) : message.event_nonce;
                    else
                        object.event_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.event_nonce) : options.longs === Number ? new $util.LongBits(message.event_nonce.low >>> 0, message.event_nonce.high >>> 0).toNumber(true) : message.event_nonce;
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (typeof message.eth_block_height === "number")
                        object.eth_block_height = options.longs === String ? String(message.eth_block_height) : message.eth_block_height;
                    else
                        object.eth_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.eth_block_height) : options.longs === Number ? new $util.LongBits(message.eth_block_height.low >>> 0, message.eth_block_height.high >>> 0).toNumber(true) : message.eth_block_height;
                if (message.batch_nonce != null && message.hasOwnProperty("batch_nonce"))
                    if (typeof message.batch_nonce === "number")
                        object.batch_nonce = options.longs === String ? String(message.batch_nonce) : message.batch_nonce;
                    else
                        object.batch_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.batch_nonce) : options.longs === Number ? new $util.LongBits(message.batch_nonce.low >>> 0, message.batch_nonce.high >>> 0).toNumber(true) : message.batch_nonce;
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    object.token_contract = message.token_contract;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                return object;
            };

            /**
             * Converts this MsgBatchSendToEthClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgBatchSendToEthClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgBatchSendToEthClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgBatchSendToEthClaim;
        })();

        v1.MsgBatchSendToEthClaimResponse = (function() {

            /**
             * Properties of a MsgBatchSendToEthClaimResponse.
             * @memberof gravity.v1
             * @interface IMsgBatchSendToEthClaimResponse
             */

            /**
             * Constructs a new MsgBatchSendToEthClaimResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgBatchSendToEthClaimResponse.
             * @implements IMsgBatchSendToEthClaimResponse
             * @constructor
             * @param {gravity.v1.IMsgBatchSendToEthClaimResponse=} [properties] Properties to set
             */
            function MsgBatchSendToEthClaimResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgBatchSendToEthClaimResponse message. Does not implicitly {@link gravity.v1.MsgBatchSendToEthClaimResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgBatchSendToEthClaimResponse
             * @static
             * @param {gravity.v1.IMsgBatchSendToEthClaimResponse} message MsgBatchSendToEthClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgBatchSendToEthClaimResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgBatchSendToEthClaimResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgBatchSendToEthClaimResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgBatchSendToEthClaimResponse
             * @static
             * @param {gravity.v1.IMsgBatchSendToEthClaimResponse} message MsgBatchSendToEthClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgBatchSendToEthClaimResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgBatchSendToEthClaimResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgBatchSendToEthClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgBatchSendToEthClaimResponse} MsgBatchSendToEthClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgBatchSendToEthClaimResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgBatchSendToEthClaimResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgBatchSendToEthClaimResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgBatchSendToEthClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgBatchSendToEthClaimResponse} MsgBatchSendToEthClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgBatchSendToEthClaimResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgBatchSendToEthClaimResponse message.
             * @function verify
             * @memberof gravity.v1.MsgBatchSendToEthClaimResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgBatchSendToEthClaimResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgBatchSendToEthClaimResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgBatchSendToEthClaimResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgBatchSendToEthClaimResponse} MsgBatchSendToEthClaimResponse
             */
            MsgBatchSendToEthClaimResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgBatchSendToEthClaimResponse)
                    return object;
                return new $root.gravity.v1.MsgBatchSendToEthClaimResponse();
            };

            /**
             * Creates a plain object from a MsgBatchSendToEthClaimResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgBatchSendToEthClaimResponse
             * @static
             * @param {gravity.v1.MsgBatchSendToEthClaimResponse} message MsgBatchSendToEthClaimResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgBatchSendToEthClaimResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgBatchSendToEthClaimResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgBatchSendToEthClaimResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgBatchSendToEthClaimResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgBatchSendToEthClaimResponse;
        })();

        v1.MsgERC20DeployedClaim = (function() {

            /**
             * Properties of a MsgERC20DeployedClaim.
             * @memberof gravity.v1
             * @interface IMsgERC20DeployedClaim
             * @property {number|null} [event_nonce] MsgERC20DeployedClaim event_nonce
             * @property {number|null} [eth_block_height] MsgERC20DeployedClaim eth_block_height
             * @property {string|null} [cosmos_denom] MsgERC20DeployedClaim cosmos_denom
             * @property {string|null} [token_contract] MsgERC20DeployedClaim token_contract
             * @property {string|null} [name] MsgERC20DeployedClaim name
             * @property {string|null} [symbol] MsgERC20DeployedClaim symbol
             * @property {number|null} [decimals] MsgERC20DeployedClaim decimals
             * @property {string|null} [orchestrator] MsgERC20DeployedClaim orchestrator
             */

            /**
             * Constructs a new MsgERC20DeployedClaim.
             * @memberof gravity.v1
             * @classdesc Represents a MsgERC20DeployedClaim.
             * @implements IMsgERC20DeployedClaim
             * @constructor
             * @param {gravity.v1.IMsgERC20DeployedClaim=} [properties] Properties to set
             */
            function MsgERC20DeployedClaim(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgERC20DeployedClaim event_nonce.
             * @member {number} event_nonce
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             */
            MsgERC20DeployedClaim.prototype.event_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgERC20DeployedClaim eth_block_height.
             * @member {number} eth_block_height
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             */
            MsgERC20DeployedClaim.prototype.eth_block_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgERC20DeployedClaim cosmos_denom.
             * @member {string} cosmos_denom
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             */
            MsgERC20DeployedClaim.prototype.cosmos_denom = "";

            /**
             * MsgERC20DeployedClaim token_contract.
             * @member {string} token_contract
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             */
            MsgERC20DeployedClaim.prototype.token_contract = "";

            /**
             * MsgERC20DeployedClaim name.
             * @member {string} name
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             */
            MsgERC20DeployedClaim.prototype.name = "";

            /**
             * MsgERC20DeployedClaim symbol.
             * @member {string} symbol
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             */
            MsgERC20DeployedClaim.prototype.symbol = "";

            /**
             * MsgERC20DeployedClaim decimals.
             * @member {number} decimals
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             */
            MsgERC20DeployedClaim.prototype.decimals = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgERC20DeployedClaim orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             */
            MsgERC20DeployedClaim.prototype.orchestrator = "";

            /**
             * Encodes the specified MsgERC20DeployedClaim message. Does not implicitly {@link gravity.v1.MsgERC20DeployedClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @static
             * @param {gravity.v1.IMsgERC20DeployedClaim} message MsgERC20DeployedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgERC20DeployedClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.event_nonce != null && Object.hasOwnProperty.call(message, "event_nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.event_nonce);
                if (message.eth_block_height != null && Object.hasOwnProperty.call(message, "eth_block_height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.eth_block_height);
                if (message.cosmos_denom != null && Object.hasOwnProperty.call(message, "cosmos_denom"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.cosmos_denom);
                if (message.token_contract != null && Object.hasOwnProperty.call(message, "token_contract"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.token_contract);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
                if (message.symbol != null && Object.hasOwnProperty.call(message, "symbol"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.symbol);
                if (message.decimals != null && Object.hasOwnProperty.call(message, "decimals"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.decimals);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.orchestrator);
                return writer;
            };

            /**
             * Encodes the specified MsgERC20DeployedClaim message, length delimited. Does not implicitly {@link gravity.v1.MsgERC20DeployedClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @static
             * @param {gravity.v1.IMsgERC20DeployedClaim} message MsgERC20DeployedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgERC20DeployedClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgERC20DeployedClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgERC20DeployedClaim} MsgERC20DeployedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgERC20DeployedClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgERC20DeployedClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.event_nonce = reader.uint64();
                        break;
                    case 2:
                        message.eth_block_height = reader.uint64();
                        break;
                    case 3:
                        message.cosmos_denom = reader.string();
                        break;
                    case 4:
                        message.token_contract = reader.string();
                        break;
                    case 5:
                        message.name = reader.string();
                        break;
                    case 6:
                        message.symbol = reader.string();
                        break;
                    case 7:
                        message.decimals = reader.uint64();
                        break;
                    case 8:
                        message.orchestrator = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgERC20DeployedClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgERC20DeployedClaim} MsgERC20DeployedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgERC20DeployedClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgERC20DeployedClaim message.
             * @function verify
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgERC20DeployedClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (!$util.isInteger(message.event_nonce) && !(message.event_nonce && $util.isInteger(message.event_nonce.low) && $util.isInteger(message.event_nonce.high)))
                        return "event_nonce: integer|Long expected";
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (!$util.isInteger(message.eth_block_height) && !(message.eth_block_height && $util.isInteger(message.eth_block_height.low) && $util.isInteger(message.eth_block_height.high)))
                        return "eth_block_height: integer|Long expected";
                if (message.cosmos_denom != null && message.hasOwnProperty("cosmos_denom"))
                    if (!$util.isString(message.cosmos_denom))
                        return "cosmos_denom: string expected";
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    if (!$util.isString(message.token_contract))
                        return "token_contract: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.symbol != null && message.hasOwnProperty("symbol"))
                    if (!$util.isString(message.symbol))
                        return "symbol: string expected";
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (!$util.isInteger(message.decimals) && !(message.decimals && $util.isInteger(message.decimals.low) && $util.isInteger(message.decimals.high)))
                        return "decimals: integer|Long expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                return null;
            };

            /**
             * Creates a MsgERC20DeployedClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgERC20DeployedClaim} MsgERC20DeployedClaim
             */
            MsgERC20DeployedClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgERC20DeployedClaim)
                    return object;
                let message = new $root.gravity.v1.MsgERC20DeployedClaim();
                if (object.event_nonce != null)
                    if ($util.Long)
                        (message.event_nonce = $util.Long.fromValue(object.event_nonce)).unsigned = true;
                    else if (typeof object.event_nonce === "string")
                        message.event_nonce = parseInt(object.event_nonce, 10);
                    else if (typeof object.event_nonce === "number")
                        message.event_nonce = object.event_nonce;
                    else if (typeof object.event_nonce === "object")
                        message.event_nonce = new $util.LongBits(object.event_nonce.low >>> 0, object.event_nonce.high >>> 0).toNumber(true);
                if (object.eth_block_height != null)
                    if ($util.Long)
                        (message.eth_block_height = $util.Long.fromValue(object.eth_block_height)).unsigned = true;
                    else if (typeof object.eth_block_height === "string")
                        message.eth_block_height = parseInt(object.eth_block_height, 10);
                    else if (typeof object.eth_block_height === "number")
                        message.eth_block_height = object.eth_block_height;
                    else if (typeof object.eth_block_height === "object")
                        message.eth_block_height = new $util.LongBits(object.eth_block_height.low >>> 0, object.eth_block_height.high >>> 0).toNumber(true);
                if (object.cosmos_denom != null)
                    message.cosmos_denom = String(object.cosmos_denom);
                if (object.token_contract != null)
                    message.token_contract = String(object.token_contract);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.symbol != null)
                    message.symbol = String(object.symbol);
                if (object.decimals != null)
                    if ($util.Long)
                        (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = true;
                    else if (typeof object.decimals === "string")
                        message.decimals = parseInt(object.decimals, 10);
                    else if (typeof object.decimals === "number")
                        message.decimals = object.decimals;
                    else if (typeof object.decimals === "object")
                        message.decimals = new $util.LongBits(object.decimals.low >>> 0, object.decimals.high >>> 0).toNumber(true);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                return message;
            };

            /**
             * Creates a plain object from a MsgERC20DeployedClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @static
             * @param {gravity.v1.MsgERC20DeployedClaim} message MsgERC20DeployedClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgERC20DeployedClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.event_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.event_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.eth_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.eth_block_height = options.longs === String ? "0" : 0;
                    object.cosmos_denom = "";
                    object.token_contract = "";
                    object.name = "";
                    object.symbol = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.decimals = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.decimals = options.longs === String ? "0" : 0;
                    object.orchestrator = "";
                }
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (typeof message.event_nonce === "number")
                        object.event_nonce = options.longs === String ? String(message.event_nonce) : message.event_nonce;
                    else
                        object.event_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.event_nonce) : options.longs === Number ? new $util.LongBits(message.event_nonce.low >>> 0, message.event_nonce.high >>> 0).toNumber(true) : message.event_nonce;
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (typeof message.eth_block_height === "number")
                        object.eth_block_height = options.longs === String ? String(message.eth_block_height) : message.eth_block_height;
                    else
                        object.eth_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.eth_block_height) : options.longs === Number ? new $util.LongBits(message.eth_block_height.low >>> 0, message.eth_block_height.high >>> 0).toNumber(true) : message.eth_block_height;
                if (message.cosmos_denom != null && message.hasOwnProperty("cosmos_denom"))
                    object.cosmos_denom = message.cosmos_denom;
                if (message.token_contract != null && message.hasOwnProperty("token_contract"))
                    object.token_contract = message.token_contract;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.symbol != null && message.hasOwnProperty("symbol"))
                    object.symbol = message.symbol;
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (typeof message.decimals === "number")
                        object.decimals = options.longs === String ? String(message.decimals) : message.decimals;
                    else
                        object.decimals = options.longs === String ? $util.Long.prototype.toString.call(message.decimals) : options.longs === Number ? new $util.LongBits(message.decimals.low >>> 0, message.decimals.high >>> 0).toNumber(true) : message.decimals;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                return object;
            };

            /**
             * Converts this MsgERC20DeployedClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgERC20DeployedClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgERC20DeployedClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgERC20DeployedClaim;
        })();

        v1.MsgERC20DeployedClaimResponse = (function() {

            /**
             * Properties of a MsgERC20DeployedClaimResponse.
             * @memberof gravity.v1
             * @interface IMsgERC20DeployedClaimResponse
             */

            /**
             * Constructs a new MsgERC20DeployedClaimResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgERC20DeployedClaimResponse.
             * @implements IMsgERC20DeployedClaimResponse
             * @constructor
             * @param {gravity.v1.IMsgERC20DeployedClaimResponse=} [properties] Properties to set
             */
            function MsgERC20DeployedClaimResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgERC20DeployedClaimResponse message. Does not implicitly {@link gravity.v1.MsgERC20DeployedClaimResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgERC20DeployedClaimResponse
             * @static
             * @param {gravity.v1.IMsgERC20DeployedClaimResponse} message MsgERC20DeployedClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgERC20DeployedClaimResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgERC20DeployedClaimResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgERC20DeployedClaimResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgERC20DeployedClaimResponse
             * @static
             * @param {gravity.v1.IMsgERC20DeployedClaimResponse} message MsgERC20DeployedClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgERC20DeployedClaimResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgERC20DeployedClaimResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgERC20DeployedClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgERC20DeployedClaimResponse} MsgERC20DeployedClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgERC20DeployedClaimResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgERC20DeployedClaimResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgERC20DeployedClaimResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgERC20DeployedClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgERC20DeployedClaimResponse} MsgERC20DeployedClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgERC20DeployedClaimResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgERC20DeployedClaimResponse message.
             * @function verify
             * @memberof gravity.v1.MsgERC20DeployedClaimResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgERC20DeployedClaimResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgERC20DeployedClaimResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgERC20DeployedClaimResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgERC20DeployedClaimResponse} MsgERC20DeployedClaimResponse
             */
            MsgERC20DeployedClaimResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgERC20DeployedClaimResponse)
                    return object;
                return new $root.gravity.v1.MsgERC20DeployedClaimResponse();
            };

            /**
             * Creates a plain object from a MsgERC20DeployedClaimResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgERC20DeployedClaimResponse
             * @static
             * @param {gravity.v1.MsgERC20DeployedClaimResponse} message MsgERC20DeployedClaimResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgERC20DeployedClaimResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgERC20DeployedClaimResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgERC20DeployedClaimResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgERC20DeployedClaimResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgERC20DeployedClaimResponse;
        })();

        v1.MsgLogicCallExecutedClaim = (function() {

            /**
             * Properties of a MsgLogicCallExecutedClaim.
             * @memberof gravity.v1
             * @interface IMsgLogicCallExecutedClaim
             * @property {number|null} [event_nonce] MsgLogicCallExecutedClaim event_nonce
             * @property {number|null} [eth_block_height] MsgLogicCallExecutedClaim eth_block_height
             * @property {Uint8Array|null} [invalidation_id] MsgLogicCallExecutedClaim invalidation_id
             * @property {number|null} [invalidation_nonce] MsgLogicCallExecutedClaim invalidation_nonce
             * @property {string|null} [orchestrator] MsgLogicCallExecutedClaim orchestrator
             */

            /**
             * Constructs a new MsgLogicCallExecutedClaim.
             * @memberof gravity.v1
             * @classdesc Represents a MsgLogicCallExecutedClaim.
             * @implements IMsgLogicCallExecutedClaim
             * @constructor
             * @param {gravity.v1.IMsgLogicCallExecutedClaim=} [properties] Properties to set
             */
            function MsgLogicCallExecutedClaim(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgLogicCallExecutedClaim event_nonce.
             * @member {number} event_nonce
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @instance
             */
            MsgLogicCallExecutedClaim.prototype.event_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgLogicCallExecutedClaim eth_block_height.
             * @member {number} eth_block_height
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @instance
             */
            MsgLogicCallExecutedClaim.prototype.eth_block_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgLogicCallExecutedClaim invalidation_id.
             * @member {Uint8Array} invalidation_id
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @instance
             */
            MsgLogicCallExecutedClaim.prototype.invalidation_id = $util.newBuffer([]);

            /**
             * MsgLogicCallExecutedClaim invalidation_nonce.
             * @member {number} invalidation_nonce
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @instance
             */
            MsgLogicCallExecutedClaim.prototype.invalidation_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgLogicCallExecutedClaim orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @instance
             */
            MsgLogicCallExecutedClaim.prototype.orchestrator = "";

            /**
             * Encodes the specified MsgLogicCallExecutedClaim message. Does not implicitly {@link gravity.v1.MsgLogicCallExecutedClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @static
             * @param {gravity.v1.IMsgLogicCallExecutedClaim} message MsgLogicCallExecutedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgLogicCallExecutedClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.event_nonce != null && Object.hasOwnProperty.call(message, "event_nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.event_nonce);
                if (message.eth_block_height != null && Object.hasOwnProperty.call(message, "eth_block_height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.eth_block_height);
                if (message.invalidation_id != null && Object.hasOwnProperty.call(message, "invalidation_id"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.invalidation_id);
                if (message.invalidation_nonce != null && Object.hasOwnProperty.call(message, "invalidation_nonce"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.invalidation_nonce);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.orchestrator);
                return writer;
            };

            /**
             * Encodes the specified MsgLogicCallExecutedClaim message, length delimited. Does not implicitly {@link gravity.v1.MsgLogicCallExecutedClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @static
             * @param {gravity.v1.IMsgLogicCallExecutedClaim} message MsgLogicCallExecutedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgLogicCallExecutedClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgLogicCallExecutedClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgLogicCallExecutedClaim} MsgLogicCallExecutedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgLogicCallExecutedClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgLogicCallExecutedClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.event_nonce = reader.uint64();
                        break;
                    case 2:
                        message.eth_block_height = reader.uint64();
                        break;
                    case 3:
                        message.invalidation_id = reader.bytes();
                        break;
                    case 4:
                        message.invalidation_nonce = reader.uint64();
                        break;
                    case 5:
                        message.orchestrator = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgLogicCallExecutedClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgLogicCallExecutedClaim} MsgLogicCallExecutedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgLogicCallExecutedClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgLogicCallExecutedClaim message.
             * @function verify
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgLogicCallExecutedClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (!$util.isInteger(message.event_nonce) && !(message.event_nonce && $util.isInteger(message.event_nonce.low) && $util.isInteger(message.event_nonce.high)))
                        return "event_nonce: integer|Long expected";
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (!$util.isInteger(message.eth_block_height) && !(message.eth_block_height && $util.isInteger(message.eth_block_height.low) && $util.isInteger(message.eth_block_height.high)))
                        return "eth_block_height: integer|Long expected";
                if (message.invalidation_id != null && message.hasOwnProperty("invalidation_id"))
                    if (!(message.invalidation_id && typeof message.invalidation_id.length === "number" || $util.isString(message.invalidation_id)))
                        return "invalidation_id: buffer expected";
                if (message.invalidation_nonce != null && message.hasOwnProperty("invalidation_nonce"))
                    if (!$util.isInteger(message.invalidation_nonce) && !(message.invalidation_nonce && $util.isInteger(message.invalidation_nonce.low) && $util.isInteger(message.invalidation_nonce.high)))
                        return "invalidation_nonce: integer|Long expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                return null;
            };

            /**
             * Creates a MsgLogicCallExecutedClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgLogicCallExecutedClaim} MsgLogicCallExecutedClaim
             */
            MsgLogicCallExecutedClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgLogicCallExecutedClaim)
                    return object;
                let message = new $root.gravity.v1.MsgLogicCallExecutedClaim();
                if (object.event_nonce != null)
                    if ($util.Long)
                        (message.event_nonce = $util.Long.fromValue(object.event_nonce)).unsigned = true;
                    else if (typeof object.event_nonce === "string")
                        message.event_nonce = parseInt(object.event_nonce, 10);
                    else if (typeof object.event_nonce === "number")
                        message.event_nonce = object.event_nonce;
                    else if (typeof object.event_nonce === "object")
                        message.event_nonce = new $util.LongBits(object.event_nonce.low >>> 0, object.event_nonce.high >>> 0).toNumber(true);
                if (object.eth_block_height != null)
                    if ($util.Long)
                        (message.eth_block_height = $util.Long.fromValue(object.eth_block_height)).unsigned = true;
                    else if (typeof object.eth_block_height === "string")
                        message.eth_block_height = parseInt(object.eth_block_height, 10);
                    else if (typeof object.eth_block_height === "number")
                        message.eth_block_height = object.eth_block_height;
                    else if (typeof object.eth_block_height === "object")
                        message.eth_block_height = new $util.LongBits(object.eth_block_height.low >>> 0, object.eth_block_height.high >>> 0).toNumber(true);
                if (object.invalidation_id != null)
                    if (typeof object.invalidation_id === "string")
                        $util.base64.decode(object.invalidation_id, message.invalidation_id = $util.newBuffer($util.base64.length(object.invalidation_id)), 0);
                    else if (object.invalidation_id.length)
                        message.invalidation_id = object.invalidation_id;
                if (object.invalidation_nonce != null)
                    if ($util.Long)
                        (message.invalidation_nonce = $util.Long.fromValue(object.invalidation_nonce)).unsigned = true;
                    else if (typeof object.invalidation_nonce === "string")
                        message.invalidation_nonce = parseInt(object.invalidation_nonce, 10);
                    else if (typeof object.invalidation_nonce === "number")
                        message.invalidation_nonce = object.invalidation_nonce;
                    else if (typeof object.invalidation_nonce === "object")
                        message.invalidation_nonce = new $util.LongBits(object.invalidation_nonce.low >>> 0, object.invalidation_nonce.high >>> 0).toNumber(true);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                return message;
            };

            /**
             * Creates a plain object from a MsgLogicCallExecutedClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @static
             * @param {gravity.v1.MsgLogicCallExecutedClaim} message MsgLogicCallExecutedClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgLogicCallExecutedClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.event_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.event_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.eth_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.eth_block_height = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.invalidation_id = "";
                    else {
                        object.invalidation_id = [];
                        if (options.bytes !== Array)
                            object.invalidation_id = $util.newBuffer(object.invalidation_id);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.invalidation_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.invalidation_nonce = options.longs === String ? "0" : 0;
                    object.orchestrator = "";
                }
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (typeof message.event_nonce === "number")
                        object.event_nonce = options.longs === String ? String(message.event_nonce) : message.event_nonce;
                    else
                        object.event_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.event_nonce) : options.longs === Number ? new $util.LongBits(message.event_nonce.low >>> 0, message.event_nonce.high >>> 0).toNumber(true) : message.event_nonce;
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (typeof message.eth_block_height === "number")
                        object.eth_block_height = options.longs === String ? String(message.eth_block_height) : message.eth_block_height;
                    else
                        object.eth_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.eth_block_height) : options.longs === Number ? new $util.LongBits(message.eth_block_height.low >>> 0, message.eth_block_height.high >>> 0).toNumber(true) : message.eth_block_height;
                if (message.invalidation_id != null && message.hasOwnProperty("invalidation_id"))
                    object.invalidation_id = options.bytes === String ? $util.base64.encode(message.invalidation_id, 0, message.invalidation_id.length) : options.bytes === Array ? Array.prototype.slice.call(message.invalidation_id) : message.invalidation_id;
                if (message.invalidation_nonce != null && message.hasOwnProperty("invalidation_nonce"))
                    if (typeof message.invalidation_nonce === "number")
                        object.invalidation_nonce = options.longs === String ? String(message.invalidation_nonce) : message.invalidation_nonce;
                    else
                        object.invalidation_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.invalidation_nonce) : options.longs === Number ? new $util.LongBits(message.invalidation_nonce.low >>> 0, message.invalidation_nonce.high >>> 0).toNumber(true) : message.invalidation_nonce;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                return object;
            };

            /**
             * Converts this MsgLogicCallExecutedClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgLogicCallExecutedClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgLogicCallExecutedClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgLogicCallExecutedClaim;
        })();

        v1.MsgLogicCallExecutedClaimResponse = (function() {

            /**
             * Properties of a MsgLogicCallExecutedClaimResponse.
             * @memberof gravity.v1
             * @interface IMsgLogicCallExecutedClaimResponse
             */

            /**
             * Constructs a new MsgLogicCallExecutedClaimResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgLogicCallExecutedClaimResponse.
             * @implements IMsgLogicCallExecutedClaimResponse
             * @constructor
             * @param {gravity.v1.IMsgLogicCallExecutedClaimResponse=} [properties] Properties to set
             */
            function MsgLogicCallExecutedClaimResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgLogicCallExecutedClaimResponse message. Does not implicitly {@link gravity.v1.MsgLogicCallExecutedClaimResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgLogicCallExecutedClaimResponse
             * @static
             * @param {gravity.v1.IMsgLogicCallExecutedClaimResponse} message MsgLogicCallExecutedClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgLogicCallExecutedClaimResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgLogicCallExecutedClaimResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgLogicCallExecutedClaimResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgLogicCallExecutedClaimResponse
             * @static
             * @param {gravity.v1.IMsgLogicCallExecutedClaimResponse} message MsgLogicCallExecutedClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgLogicCallExecutedClaimResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgLogicCallExecutedClaimResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgLogicCallExecutedClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgLogicCallExecutedClaimResponse} MsgLogicCallExecutedClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgLogicCallExecutedClaimResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgLogicCallExecutedClaimResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgLogicCallExecutedClaimResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgLogicCallExecutedClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgLogicCallExecutedClaimResponse} MsgLogicCallExecutedClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgLogicCallExecutedClaimResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgLogicCallExecutedClaimResponse message.
             * @function verify
             * @memberof gravity.v1.MsgLogicCallExecutedClaimResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgLogicCallExecutedClaimResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgLogicCallExecutedClaimResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgLogicCallExecutedClaimResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgLogicCallExecutedClaimResponse} MsgLogicCallExecutedClaimResponse
             */
            MsgLogicCallExecutedClaimResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgLogicCallExecutedClaimResponse)
                    return object;
                return new $root.gravity.v1.MsgLogicCallExecutedClaimResponse();
            };

            /**
             * Creates a plain object from a MsgLogicCallExecutedClaimResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgLogicCallExecutedClaimResponse
             * @static
             * @param {gravity.v1.MsgLogicCallExecutedClaimResponse} message MsgLogicCallExecutedClaimResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgLogicCallExecutedClaimResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgLogicCallExecutedClaimResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgLogicCallExecutedClaimResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgLogicCallExecutedClaimResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgLogicCallExecutedClaimResponse;
        })();

        v1.MsgValsetUpdatedClaim = (function() {

            /**
             * Properties of a MsgValsetUpdatedClaim.
             * @memberof gravity.v1
             * @interface IMsgValsetUpdatedClaim
             * @property {number|null} [event_nonce] MsgValsetUpdatedClaim event_nonce
             * @property {number|null} [valset_nonce] MsgValsetUpdatedClaim valset_nonce
             * @property {number|null} [eth_block_height] MsgValsetUpdatedClaim eth_block_height
             * @property {Array.<gravity.v1.IBridgeValidator>|null} [members] MsgValsetUpdatedClaim members
             * @property {string|null} [reward_amount] MsgValsetUpdatedClaim reward_amount
             * @property {string|null} [reward_token] MsgValsetUpdatedClaim reward_token
             * @property {string|null} [orchestrator] MsgValsetUpdatedClaim orchestrator
             */

            /**
             * Constructs a new MsgValsetUpdatedClaim.
             * @memberof gravity.v1
             * @classdesc Represents a MsgValsetUpdatedClaim.
             * @implements IMsgValsetUpdatedClaim
             * @constructor
             * @param {gravity.v1.IMsgValsetUpdatedClaim=} [properties] Properties to set
             */
            function MsgValsetUpdatedClaim(properties) {
                this.members = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgValsetUpdatedClaim event_nonce.
             * @member {number} event_nonce
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @instance
             */
            MsgValsetUpdatedClaim.prototype.event_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgValsetUpdatedClaim valset_nonce.
             * @member {number} valset_nonce
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @instance
             */
            MsgValsetUpdatedClaim.prototype.valset_nonce = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgValsetUpdatedClaim eth_block_height.
             * @member {number} eth_block_height
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @instance
             */
            MsgValsetUpdatedClaim.prototype.eth_block_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgValsetUpdatedClaim members.
             * @member {Array.<gravity.v1.IBridgeValidator>} members
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @instance
             */
            MsgValsetUpdatedClaim.prototype.members = $util.emptyArray;

            /**
             * MsgValsetUpdatedClaim reward_amount.
             * @member {string} reward_amount
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @instance
             */
            MsgValsetUpdatedClaim.prototype.reward_amount = "";

            /**
             * MsgValsetUpdatedClaim reward_token.
             * @member {string} reward_token
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @instance
             */
            MsgValsetUpdatedClaim.prototype.reward_token = "";

            /**
             * MsgValsetUpdatedClaim orchestrator.
             * @member {string} orchestrator
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @instance
             */
            MsgValsetUpdatedClaim.prototype.orchestrator = "";

            /**
             * Encodes the specified MsgValsetUpdatedClaim message. Does not implicitly {@link gravity.v1.MsgValsetUpdatedClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @static
             * @param {gravity.v1.IMsgValsetUpdatedClaim} message MsgValsetUpdatedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgValsetUpdatedClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.event_nonce != null && Object.hasOwnProperty.call(message, "event_nonce"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.event_nonce);
                if (message.valset_nonce != null && Object.hasOwnProperty.call(message, "valset_nonce"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.valset_nonce);
                if (message.eth_block_height != null && Object.hasOwnProperty.call(message, "eth_block_height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.eth_block_height);
                if (message.members != null && message.members.length)
                    for (let i = 0; i < message.members.length; ++i)
                        $root.gravity.v1.BridgeValidator.encode(message.members[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.reward_amount != null && Object.hasOwnProperty.call(message, "reward_amount"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.reward_amount);
                if (message.reward_token != null && Object.hasOwnProperty.call(message, "reward_token"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.reward_token);
                if (message.orchestrator != null && Object.hasOwnProperty.call(message, "orchestrator"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.orchestrator);
                return writer;
            };

            /**
             * Encodes the specified MsgValsetUpdatedClaim message, length delimited. Does not implicitly {@link gravity.v1.MsgValsetUpdatedClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @static
             * @param {gravity.v1.IMsgValsetUpdatedClaim} message MsgValsetUpdatedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgValsetUpdatedClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgValsetUpdatedClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgValsetUpdatedClaim} MsgValsetUpdatedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgValsetUpdatedClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgValsetUpdatedClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.event_nonce = reader.uint64();
                        break;
                    case 2:
                        message.valset_nonce = reader.uint64();
                        break;
                    case 3:
                        message.eth_block_height = reader.uint64();
                        break;
                    case 4:
                        if (!(message.members && message.members.length))
                            message.members = [];
                        message.members.push($root.gravity.v1.BridgeValidator.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.reward_amount = reader.string();
                        break;
                    case 6:
                        message.reward_token = reader.string();
                        break;
                    case 7:
                        message.orchestrator = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgValsetUpdatedClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgValsetUpdatedClaim} MsgValsetUpdatedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgValsetUpdatedClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgValsetUpdatedClaim message.
             * @function verify
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgValsetUpdatedClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (!$util.isInteger(message.event_nonce) && !(message.event_nonce && $util.isInteger(message.event_nonce.low) && $util.isInteger(message.event_nonce.high)))
                        return "event_nonce: integer|Long expected";
                if (message.valset_nonce != null && message.hasOwnProperty("valset_nonce"))
                    if (!$util.isInteger(message.valset_nonce) && !(message.valset_nonce && $util.isInteger(message.valset_nonce.low) && $util.isInteger(message.valset_nonce.high)))
                        return "valset_nonce: integer|Long expected";
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (!$util.isInteger(message.eth_block_height) && !(message.eth_block_height && $util.isInteger(message.eth_block_height.low) && $util.isInteger(message.eth_block_height.high)))
                        return "eth_block_height: integer|Long expected";
                if (message.members != null && message.hasOwnProperty("members")) {
                    if (!Array.isArray(message.members))
                        return "members: array expected";
                    for (let i = 0; i < message.members.length; ++i) {
                        let error = $root.gravity.v1.BridgeValidator.verify(message.members[i]);
                        if (error)
                            return "members." + error;
                    }
                }
                if (message.reward_amount != null && message.hasOwnProperty("reward_amount"))
                    if (!$util.isString(message.reward_amount))
                        return "reward_amount: string expected";
                if (message.reward_token != null && message.hasOwnProperty("reward_token"))
                    if (!$util.isString(message.reward_token))
                        return "reward_token: string expected";
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    if (!$util.isString(message.orchestrator))
                        return "orchestrator: string expected";
                return null;
            };

            /**
             * Creates a MsgValsetUpdatedClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgValsetUpdatedClaim} MsgValsetUpdatedClaim
             */
            MsgValsetUpdatedClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgValsetUpdatedClaim)
                    return object;
                let message = new $root.gravity.v1.MsgValsetUpdatedClaim();
                if (object.event_nonce != null)
                    if ($util.Long)
                        (message.event_nonce = $util.Long.fromValue(object.event_nonce)).unsigned = true;
                    else if (typeof object.event_nonce === "string")
                        message.event_nonce = parseInt(object.event_nonce, 10);
                    else if (typeof object.event_nonce === "number")
                        message.event_nonce = object.event_nonce;
                    else if (typeof object.event_nonce === "object")
                        message.event_nonce = new $util.LongBits(object.event_nonce.low >>> 0, object.event_nonce.high >>> 0).toNumber(true);
                if (object.valset_nonce != null)
                    if ($util.Long)
                        (message.valset_nonce = $util.Long.fromValue(object.valset_nonce)).unsigned = true;
                    else if (typeof object.valset_nonce === "string")
                        message.valset_nonce = parseInt(object.valset_nonce, 10);
                    else if (typeof object.valset_nonce === "number")
                        message.valset_nonce = object.valset_nonce;
                    else if (typeof object.valset_nonce === "object")
                        message.valset_nonce = new $util.LongBits(object.valset_nonce.low >>> 0, object.valset_nonce.high >>> 0).toNumber(true);
                if (object.eth_block_height != null)
                    if ($util.Long)
                        (message.eth_block_height = $util.Long.fromValue(object.eth_block_height)).unsigned = true;
                    else if (typeof object.eth_block_height === "string")
                        message.eth_block_height = parseInt(object.eth_block_height, 10);
                    else if (typeof object.eth_block_height === "number")
                        message.eth_block_height = object.eth_block_height;
                    else if (typeof object.eth_block_height === "object")
                        message.eth_block_height = new $util.LongBits(object.eth_block_height.low >>> 0, object.eth_block_height.high >>> 0).toNumber(true);
                if (object.members) {
                    if (!Array.isArray(object.members))
                        throw TypeError(".gravity.v1.MsgValsetUpdatedClaim.members: array expected");
                    message.members = [];
                    for (let i = 0; i < object.members.length; ++i) {
                        if (typeof object.members[i] !== "object")
                            throw TypeError(".gravity.v1.MsgValsetUpdatedClaim.members: object expected");
                        message.members[i] = $root.gravity.v1.BridgeValidator.fromObject(object.members[i]);
                    }
                }
                if (object.reward_amount != null)
                    message.reward_amount = String(object.reward_amount);
                if (object.reward_token != null)
                    message.reward_token = String(object.reward_token);
                if (object.orchestrator != null)
                    message.orchestrator = String(object.orchestrator);
                return message;
            };

            /**
             * Creates a plain object from a MsgValsetUpdatedClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @static
             * @param {gravity.v1.MsgValsetUpdatedClaim} message MsgValsetUpdatedClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgValsetUpdatedClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.members = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.event_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.event_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.valset_nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.valset_nonce = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.eth_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.eth_block_height = options.longs === String ? "0" : 0;
                    object.reward_amount = "";
                    object.reward_token = "";
                    object.orchestrator = "";
                }
                if (message.event_nonce != null && message.hasOwnProperty("event_nonce"))
                    if (typeof message.event_nonce === "number")
                        object.event_nonce = options.longs === String ? String(message.event_nonce) : message.event_nonce;
                    else
                        object.event_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.event_nonce) : options.longs === Number ? new $util.LongBits(message.event_nonce.low >>> 0, message.event_nonce.high >>> 0).toNumber(true) : message.event_nonce;
                if (message.valset_nonce != null && message.hasOwnProperty("valset_nonce"))
                    if (typeof message.valset_nonce === "number")
                        object.valset_nonce = options.longs === String ? String(message.valset_nonce) : message.valset_nonce;
                    else
                        object.valset_nonce = options.longs === String ? $util.Long.prototype.toString.call(message.valset_nonce) : options.longs === Number ? new $util.LongBits(message.valset_nonce.low >>> 0, message.valset_nonce.high >>> 0).toNumber(true) : message.valset_nonce;
                if (message.eth_block_height != null && message.hasOwnProperty("eth_block_height"))
                    if (typeof message.eth_block_height === "number")
                        object.eth_block_height = options.longs === String ? String(message.eth_block_height) : message.eth_block_height;
                    else
                        object.eth_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.eth_block_height) : options.longs === Number ? new $util.LongBits(message.eth_block_height.low >>> 0, message.eth_block_height.high >>> 0).toNumber(true) : message.eth_block_height;
                if (message.members && message.members.length) {
                    object.members = [];
                    for (let j = 0; j < message.members.length; ++j)
                        object.members[j] = $root.gravity.v1.BridgeValidator.toObject(message.members[j], options);
                }
                if (message.reward_amount != null && message.hasOwnProperty("reward_amount"))
                    object.reward_amount = message.reward_amount;
                if (message.reward_token != null && message.hasOwnProperty("reward_token"))
                    object.reward_token = message.reward_token;
                if (message.orchestrator != null && message.hasOwnProperty("orchestrator"))
                    object.orchestrator = message.orchestrator;
                return object;
            };

            /**
             * Converts this MsgValsetUpdatedClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgValsetUpdatedClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgValsetUpdatedClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgValsetUpdatedClaim;
        })();

        v1.MsgValsetUpdatedClaimResponse = (function() {

            /**
             * Properties of a MsgValsetUpdatedClaimResponse.
             * @memberof gravity.v1
             * @interface IMsgValsetUpdatedClaimResponse
             */

            /**
             * Constructs a new MsgValsetUpdatedClaimResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgValsetUpdatedClaimResponse.
             * @implements IMsgValsetUpdatedClaimResponse
             * @constructor
             * @param {gravity.v1.IMsgValsetUpdatedClaimResponse=} [properties] Properties to set
             */
            function MsgValsetUpdatedClaimResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgValsetUpdatedClaimResponse message. Does not implicitly {@link gravity.v1.MsgValsetUpdatedClaimResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgValsetUpdatedClaimResponse
             * @static
             * @param {gravity.v1.IMsgValsetUpdatedClaimResponse} message MsgValsetUpdatedClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgValsetUpdatedClaimResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgValsetUpdatedClaimResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgValsetUpdatedClaimResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgValsetUpdatedClaimResponse
             * @static
             * @param {gravity.v1.IMsgValsetUpdatedClaimResponse} message MsgValsetUpdatedClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgValsetUpdatedClaimResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgValsetUpdatedClaimResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgValsetUpdatedClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgValsetUpdatedClaimResponse} MsgValsetUpdatedClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgValsetUpdatedClaimResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgValsetUpdatedClaimResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgValsetUpdatedClaimResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgValsetUpdatedClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgValsetUpdatedClaimResponse} MsgValsetUpdatedClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgValsetUpdatedClaimResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgValsetUpdatedClaimResponse message.
             * @function verify
             * @memberof gravity.v1.MsgValsetUpdatedClaimResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgValsetUpdatedClaimResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgValsetUpdatedClaimResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgValsetUpdatedClaimResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgValsetUpdatedClaimResponse} MsgValsetUpdatedClaimResponse
             */
            MsgValsetUpdatedClaimResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgValsetUpdatedClaimResponse)
                    return object;
                return new $root.gravity.v1.MsgValsetUpdatedClaimResponse();
            };

            /**
             * Creates a plain object from a MsgValsetUpdatedClaimResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgValsetUpdatedClaimResponse
             * @static
             * @param {gravity.v1.MsgValsetUpdatedClaimResponse} message MsgValsetUpdatedClaimResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgValsetUpdatedClaimResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgValsetUpdatedClaimResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgValsetUpdatedClaimResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgValsetUpdatedClaimResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgValsetUpdatedClaimResponse;
        })();

        v1.MsgCancelSendToEth = (function() {

            /**
             * Properties of a MsgCancelSendToEth.
             * @memberof gravity.v1
             * @interface IMsgCancelSendToEth
             * @property {number|null} [transaction_id] MsgCancelSendToEth transaction_id
             * @property {string|null} [sender] MsgCancelSendToEth sender
             */

            /**
             * Constructs a new MsgCancelSendToEth.
             * @memberof gravity.v1
             * @classdesc Represents a MsgCancelSendToEth.
             * @implements IMsgCancelSendToEth
             * @constructor
             * @param {gravity.v1.IMsgCancelSendToEth=} [properties] Properties to set
             */
            function MsgCancelSendToEth(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgCancelSendToEth transaction_id.
             * @member {number} transaction_id
             * @memberof gravity.v1.MsgCancelSendToEth
             * @instance
             */
            MsgCancelSendToEth.prototype.transaction_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * MsgCancelSendToEth sender.
             * @member {string} sender
             * @memberof gravity.v1.MsgCancelSendToEth
             * @instance
             */
            MsgCancelSendToEth.prototype.sender = "";

            /**
             * Encodes the specified MsgCancelSendToEth message. Does not implicitly {@link gravity.v1.MsgCancelSendToEth.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgCancelSendToEth
             * @static
             * @param {gravity.v1.IMsgCancelSendToEth} message MsgCancelSendToEth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgCancelSendToEth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transaction_id != null && Object.hasOwnProperty.call(message, "transaction_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.transaction_id);
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);
                return writer;
            };

            /**
             * Encodes the specified MsgCancelSendToEth message, length delimited. Does not implicitly {@link gravity.v1.MsgCancelSendToEth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgCancelSendToEth
             * @static
             * @param {gravity.v1.IMsgCancelSendToEth} message MsgCancelSendToEth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgCancelSendToEth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgCancelSendToEth message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgCancelSendToEth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgCancelSendToEth} MsgCancelSendToEth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgCancelSendToEth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgCancelSendToEth();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.transaction_id = reader.uint64();
                        break;
                    case 2:
                        message.sender = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgCancelSendToEth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgCancelSendToEth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgCancelSendToEth} MsgCancelSendToEth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgCancelSendToEth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgCancelSendToEth message.
             * @function verify
             * @memberof gravity.v1.MsgCancelSendToEth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgCancelSendToEth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.transaction_id != null && message.hasOwnProperty("transaction_id"))
                    if (!$util.isInteger(message.transaction_id) && !(message.transaction_id && $util.isInteger(message.transaction_id.low) && $util.isInteger(message.transaction_id.high)))
                        return "transaction_id: integer|Long expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                return null;
            };

            /**
             * Creates a MsgCancelSendToEth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgCancelSendToEth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgCancelSendToEth} MsgCancelSendToEth
             */
            MsgCancelSendToEth.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgCancelSendToEth)
                    return object;
                let message = new $root.gravity.v1.MsgCancelSendToEth();
                if (object.transaction_id != null)
                    if ($util.Long)
                        (message.transaction_id = $util.Long.fromValue(object.transaction_id)).unsigned = true;
                    else if (typeof object.transaction_id === "string")
                        message.transaction_id = parseInt(object.transaction_id, 10);
                    else if (typeof object.transaction_id === "number")
                        message.transaction_id = object.transaction_id;
                    else if (typeof object.transaction_id === "object")
                        message.transaction_id = new $util.LongBits(object.transaction_id.low >>> 0, object.transaction_id.high >>> 0).toNumber(true);
                if (object.sender != null)
                    message.sender = String(object.sender);
                return message;
            };

            /**
             * Creates a plain object from a MsgCancelSendToEth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgCancelSendToEth
             * @static
             * @param {gravity.v1.MsgCancelSendToEth} message MsgCancelSendToEth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgCancelSendToEth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.transaction_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.transaction_id = options.longs === String ? "0" : 0;
                    object.sender = "";
                }
                if (message.transaction_id != null && message.hasOwnProperty("transaction_id"))
                    if (typeof message.transaction_id === "number")
                        object.transaction_id = options.longs === String ? String(message.transaction_id) : message.transaction_id;
                    else
                        object.transaction_id = options.longs === String ? $util.Long.prototype.toString.call(message.transaction_id) : options.longs === Number ? new $util.LongBits(message.transaction_id.low >>> 0, message.transaction_id.high >>> 0).toNumber(true) : message.transaction_id;
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                return object;
            };

            /**
             * Converts this MsgCancelSendToEth to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgCancelSendToEth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgCancelSendToEth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgCancelSendToEth;
        })();

        v1.MsgCancelSendToEthResponse = (function() {

            /**
             * Properties of a MsgCancelSendToEthResponse.
             * @memberof gravity.v1
             * @interface IMsgCancelSendToEthResponse
             */

            /**
             * Constructs a new MsgCancelSendToEthResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgCancelSendToEthResponse.
             * @implements IMsgCancelSendToEthResponse
             * @constructor
             * @param {gravity.v1.IMsgCancelSendToEthResponse=} [properties] Properties to set
             */
            function MsgCancelSendToEthResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgCancelSendToEthResponse message. Does not implicitly {@link gravity.v1.MsgCancelSendToEthResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgCancelSendToEthResponse
             * @static
             * @param {gravity.v1.IMsgCancelSendToEthResponse} message MsgCancelSendToEthResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgCancelSendToEthResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgCancelSendToEthResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgCancelSendToEthResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgCancelSendToEthResponse
             * @static
             * @param {gravity.v1.IMsgCancelSendToEthResponse} message MsgCancelSendToEthResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgCancelSendToEthResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgCancelSendToEthResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgCancelSendToEthResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgCancelSendToEthResponse} MsgCancelSendToEthResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgCancelSendToEthResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgCancelSendToEthResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgCancelSendToEthResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgCancelSendToEthResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgCancelSendToEthResponse} MsgCancelSendToEthResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgCancelSendToEthResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgCancelSendToEthResponse message.
             * @function verify
             * @memberof gravity.v1.MsgCancelSendToEthResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgCancelSendToEthResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgCancelSendToEthResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgCancelSendToEthResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgCancelSendToEthResponse} MsgCancelSendToEthResponse
             */
            MsgCancelSendToEthResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgCancelSendToEthResponse)
                    return object;
                return new $root.gravity.v1.MsgCancelSendToEthResponse();
            };

            /**
             * Creates a plain object from a MsgCancelSendToEthResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgCancelSendToEthResponse
             * @static
             * @param {gravity.v1.MsgCancelSendToEthResponse} message MsgCancelSendToEthResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgCancelSendToEthResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgCancelSendToEthResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgCancelSendToEthResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgCancelSendToEthResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgCancelSendToEthResponse;
        })();

        v1.MsgSubmitBadSignatureEvidence = (function() {

            /**
             * Properties of a MsgSubmitBadSignatureEvidence.
             * @memberof gravity.v1
             * @interface IMsgSubmitBadSignatureEvidence
             * @property {google.protobuf.IAny|null} [subject] MsgSubmitBadSignatureEvidence subject
             * @property {string|null} [signature] MsgSubmitBadSignatureEvidence signature
             * @property {string|null} [sender] MsgSubmitBadSignatureEvidence sender
             */

            /**
             * Constructs a new MsgSubmitBadSignatureEvidence.
             * @memberof gravity.v1
             * @classdesc Represents a MsgSubmitBadSignatureEvidence.
             * @implements IMsgSubmitBadSignatureEvidence
             * @constructor
             * @param {gravity.v1.IMsgSubmitBadSignatureEvidence=} [properties] Properties to set
             */
            function MsgSubmitBadSignatureEvidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MsgSubmitBadSignatureEvidence subject.
             * @member {google.protobuf.IAny|null|undefined} subject
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @instance
             */
            MsgSubmitBadSignatureEvidence.prototype.subject = null;

            /**
             * MsgSubmitBadSignatureEvidence signature.
             * @member {string} signature
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @instance
             */
            MsgSubmitBadSignatureEvidence.prototype.signature = "";

            /**
             * MsgSubmitBadSignatureEvidence sender.
             * @member {string} sender
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @instance
             */
            MsgSubmitBadSignatureEvidence.prototype.sender = "";

            /**
             * Encodes the specified MsgSubmitBadSignatureEvidence message. Does not implicitly {@link gravity.v1.MsgSubmitBadSignatureEvidence.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @static
             * @param {gravity.v1.IMsgSubmitBadSignatureEvidence} message MsgSubmitBadSignatureEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSubmitBadSignatureEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.subject != null && Object.hasOwnProperty.call(message, "subject"))
                    $root.google.protobuf.Any.encode(message.subject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.signature);
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.sender);
                return writer;
            };

            /**
             * Encodes the specified MsgSubmitBadSignatureEvidence message, length delimited. Does not implicitly {@link gravity.v1.MsgSubmitBadSignatureEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @static
             * @param {gravity.v1.IMsgSubmitBadSignatureEvidence} message MsgSubmitBadSignatureEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSubmitBadSignatureEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgSubmitBadSignatureEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgSubmitBadSignatureEvidence} MsgSubmitBadSignatureEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSubmitBadSignatureEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgSubmitBadSignatureEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.subject = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.signature = reader.string();
                        break;
                    case 3:
                        message.sender = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgSubmitBadSignatureEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgSubmitBadSignatureEvidence} MsgSubmitBadSignatureEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSubmitBadSignatureEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgSubmitBadSignatureEvidence message.
             * @function verify
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgSubmitBadSignatureEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.subject != null && message.hasOwnProperty("subject")) {
                    let error = $root.google.protobuf.Any.verify(message.subject);
                    if (error)
                        return "subject." + error;
                }
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!$util.isString(message.signature))
                        return "signature: string expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                return null;
            };

            /**
             * Creates a MsgSubmitBadSignatureEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgSubmitBadSignatureEvidence} MsgSubmitBadSignatureEvidence
             */
            MsgSubmitBadSignatureEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgSubmitBadSignatureEvidence)
                    return object;
                let message = new $root.gravity.v1.MsgSubmitBadSignatureEvidence();
                if (object.subject != null) {
                    if (typeof object.subject !== "object")
                        throw TypeError(".gravity.v1.MsgSubmitBadSignatureEvidence.subject: object expected");
                    message.subject = $root.google.protobuf.Any.fromObject(object.subject);
                }
                if (object.signature != null)
                    message.signature = String(object.signature);
                if (object.sender != null)
                    message.sender = String(object.sender);
                return message;
            };

            /**
             * Creates a plain object from a MsgSubmitBadSignatureEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @static
             * @param {gravity.v1.MsgSubmitBadSignatureEvidence} message MsgSubmitBadSignatureEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgSubmitBadSignatureEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.subject = null;
                    object.signature = "";
                    object.sender = "";
                }
                if (message.subject != null && message.hasOwnProperty("subject"))
                    object.subject = $root.google.protobuf.Any.toObject(message.subject, options);
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = message.signature;
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                return object;
            };

            /**
             * Converts this MsgSubmitBadSignatureEvidence to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgSubmitBadSignatureEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgSubmitBadSignatureEvidence;
        })();

        v1.MsgSubmitBadSignatureEvidenceResponse = (function() {

            /**
             * Properties of a MsgSubmitBadSignatureEvidenceResponse.
             * @memberof gravity.v1
             * @interface IMsgSubmitBadSignatureEvidenceResponse
             */

            /**
             * Constructs a new MsgSubmitBadSignatureEvidenceResponse.
             * @memberof gravity.v1
             * @classdesc Represents a MsgSubmitBadSignatureEvidenceResponse.
             * @implements IMsgSubmitBadSignatureEvidenceResponse
             * @constructor
             * @param {gravity.v1.IMsgSubmitBadSignatureEvidenceResponse=} [properties] Properties to set
             */
            function MsgSubmitBadSignatureEvidenceResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified MsgSubmitBadSignatureEvidenceResponse message. Does not implicitly {@link gravity.v1.MsgSubmitBadSignatureEvidenceResponse.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidenceResponse
             * @static
             * @param {gravity.v1.IMsgSubmitBadSignatureEvidenceResponse} message MsgSubmitBadSignatureEvidenceResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSubmitBadSignatureEvidenceResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MsgSubmitBadSignatureEvidenceResponse message, length delimited. Does not implicitly {@link gravity.v1.MsgSubmitBadSignatureEvidenceResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidenceResponse
             * @static
             * @param {gravity.v1.IMsgSubmitBadSignatureEvidenceResponse} message MsgSubmitBadSignatureEvidenceResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MsgSubmitBadSignatureEvidenceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MsgSubmitBadSignatureEvidenceResponse message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidenceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.MsgSubmitBadSignatureEvidenceResponse} MsgSubmitBadSignatureEvidenceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSubmitBadSignatureEvidenceResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.MsgSubmitBadSignatureEvidenceResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MsgSubmitBadSignatureEvidenceResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidenceResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.MsgSubmitBadSignatureEvidenceResponse} MsgSubmitBadSignatureEvidenceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MsgSubmitBadSignatureEvidenceResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MsgSubmitBadSignatureEvidenceResponse message.
             * @function verify
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidenceResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MsgSubmitBadSignatureEvidenceResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MsgSubmitBadSignatureEvidenceResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidenceResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.MsgSubmitBadSignatureEvidenceResponse} MsgSubmitBadSignatureEvidenceResponse
             */
            MsgSubmitBadSignatureEvidenceResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.MsgSubmitBadSignatureEvidenceResponse)
                    return object;
                return new $root.gravity.v1.MsgSubmitBadSignatureEvidenceResponse();
            };

            /**
             * Creates a plain object from a MsgSubmitBadSignatureEvidenceResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidenceResponse
             * @static
             * @param {gravity.v1.MsgSubmitBadSignatureEvidenceResponse} message MsgSubmitBadSignatureEvidenceResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MsgSubmitBadSignatureEvidenceResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MsgSubmitBadSignatureEvidenceResponse to JSON.
             * @function toJSON
             * @memberof gravity.v1.MsgSubmitBadSignatureEvidenceResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MsgSubmitBadSignatureEvidenceResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MsgSubmitBadSignatureEvidenceResponse;
        })();

        v1.EventSetOperatorAddress = (function() {

            /**
             * Properties of an EventSetOperatorAddress.
             * @memberof gravity.v1
             * @interface IEventSetOperatorAddress
             * @property {string|null} [message] EventSetOperatorAddress message
             * @property {string|null} [address] EventSetOperatorAddress address
             */

            /**
             * Constructs a new EventSetOperatorAddress.
             * @memberof gravity.v1
             * @classdesc Represents an EventSetOperatorAddress.
             * @implements IEventSetOperatorAddress
             * @constructor
             * @param {gravity.v1.IEventSetOperatorAddress=} [properties] Properties to set
             */
            function EventSetOperatorAddress(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSetOperatorAddress message.
             * @member {string} message
             * @memberof gravity.v1.EventSetOperatorAddress
             * @instance
             */
            EventSetOperatorAddress.prototype.message = "";

            /**
             * EventSetOperatorAddress address.
             * @member {string} address
             * @memberof gravity.v1.EventSetOperatorAddress
             * @instance
             */
            EventSetOperatorAddress.prototype.address = "";

            /**
             * Encodes the specified EventSetOperatorAddress message. Does not implicitly {@link gravity.v1.EventSetOperatorAddress.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventSetOperatorAddress
             * @static
             * @param {gravity.v1.IEventSetOperatorAddress} message EventSetOperatorAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSetOperatorAddress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.address);
                return writer;
            };

            /**
             * Encodes the specified EventSetOperatorAddress message, length delimited. Does not implicitly {@link gravity.v1.EventSetOperatorAddress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventSetOperatorAddress
             * @static
             * @param {gravity.v1.IEventSetOperatorAddress} message EventSetOperatorAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSetOperatorAddress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSetOperatorAddress message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventSetOperatorAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventSetOperatorAddress} EventSetOperatorAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSetOperatorAddress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventSetOperatorAddress();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    case 2:
                        message.address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSetOperatorAddress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventSetOperatorAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventSetOperatorAddress} EventSetOperatorAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSetOperatorAddress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSetOperatorAddress message.
             * @function verify
             * @memberof gravity.v1.EventSetOperatorAddress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSetOperatorAddress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                return null;
            };

            /**
             * Creates an EventSetOperatorAddress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventSetOperatorAddress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventSetOperatorAddress} EventSetOperatorAddress
             */
            EventSetOperatorAddress.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventSetOperatorAddress)
                    return object;
                let message = new $root.gravity.v1.EventSetOperatorAddress();
                if (object.message != null)
                    message.message = String(object.message);
                if (object.address != null)
                    message.address = String(object.address);
                return message;
            };

            /**
             * Creates a plain object from an EventSetOperatorAddress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventSetOperatorAddress
             * @static
             * @param {gravity.v1.EventSetOperatorAddress} message EventSetOperatorAddress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSetOperatorAddress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.message = "";
                    object.address = "";
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                return object;
            };

            /**
             * Converts this EventSetOperatorAddress to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventSetOperatorAddress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSetOperatorAddress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSetOperatorAddress;
        })();

        v1.EventValsetConfirmKey = (function() {

            /**
             * Properties of an EventValsetConfirmKey.
             * @memberof gravity.v1
             * @interface IEventValsetConfirmKey
             * @property {string|null} [message] EventValsetConfirmKey message
             * @property {string|null} [key] EventValsetConfirmKey key
             */

            /**
             * Constructs a new EventValsetConfirmKey.
             * @memberof gravity.v1
             * @classdesc Represents an EventValsetConfirmKey.
             * @implements IEventValsetConfirmKey
             * @constructor
             * @param {gravity.v1.IEventValsetConfirmKey=} [properties] Properties to set
             */
            function EventValsetConfirmKey(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventValsetConfirmKey message.
             * @member {string} message
             * @memberof gravity.v1.EventValsetConfirmKey
             * @instance
             */
            EventValsetConfirmKey.prototype.message = "";

            /**
             * EventValsetConfirmKey key.
             * @member {string} key
             * @memberof gravity.v1.EventValsetConfirmKey
             * @instance
             */
            EventValsetConfirmKey.prototype.key = "";

            /**
             * Encodes the specified EventValsetConfirmKey message. Does not implicitly {@link gravity.v1.EventValsetConfirmKey.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventValsetConfirmKey
             * @static
             * @param {gravity.v1.IEventValsetConfirmKey} message EventValsetConfirmKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventValsetConfirmKey.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);
                return writer;
            };

            /**
             * Encodes the specified EventValsetConfirmKey message, length delimited. Does not implicitly {@link gravity.v1.EventValsetConfirmKey.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventValsetConfirmKey
             * @static
             * @param {gravity.v1.IEventValsetConfirmKey} message EventValsetConfirmKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventValsetConfirmKey.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventValsetConfirmKey message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventValsetConfirmKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventValsetConfirmKey} EventValsetConfirmKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventValsetConfirmKey.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventValsetConfirmKey();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    case 2:
                        message.key = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventValsetConfirmKey message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventValsetConfirmKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventValsetConfirmKey} EventValsetConfirmKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventValsetConfirmKey.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventValsetConfirmKey message.
             * @function verify
             * @memberof gravity.v1.EventValsetConfirmKey
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventValsetConfirmKey.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                return null;
            };

            /**
             * Creates an EventValsetConfirmKey message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventValsetConfirmKey
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventValsetConfirmKey} EventValsetConfirmKey
             */
            EventValsetConfirmKey.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventValsetConfirmKey)
                    return object;
                let message = new $root.gravity.v1.EventValsetConfirmKey();
                if (object.message != null)
                    message.message = String(object.message);
                if (object.key != null)
                    message.key = String(object.key);
                return message;
            };

            /**
             * Creates a plain object from an EventValsetConfirmKey message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventValsetConfirmKey
             * @static
             * @param {gravity.v1.EventValsetConfirmKey} message EventValsetConfirmKey
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventValsetConfirmKey.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.message = "";
                    object.key = "";
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                return object;
            };

            /**
             * Converts this EventValsetConfirmKey to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventValsetConfirmKey
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventValsetConfirmKey.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventValsetConfirmKey;
        })();

        v1.EventBatchCreated = (function() {

            /**
             * Properties of an EventBatchCreated.
             * @memberof gravity.v1
             * @interface IEventBatchCreated
             * @property {string|null} [message] EventBatchCreated message
             * @property {string|null} [batch_nonce] EventBatchCreated batch_nonce
             */

            /**
             * Constructs a new EventBatchCreated.
             * @memberof gravity.v1
             * @classdesc Represents an EventBatchCreated.
             * @implements IEventBatchCreated
             * @constructor
             * @param {gravity.v1.IEventBatchCreated=} [properties] Properties to set
             */
            function EventBatchCreated(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventBatchCreated message.
             * @member {string} message
             * @memberof gravity.v1.EventBatchCreated
             * @instance
             */
            EventBatchCreated.prototype.message = "";

            /**
             * EventBatchCreated batch_nonce.
             * @member {string} batch_nonce
             * @memberof gravity.v1.EventBatchCreated
             * @instance
             */
            EventBatchCreated.prototype.batch_nonce = "";

            /**
             * Encodes the specified EventBatchCreated message. Does not implicitly {@link gravity.v1.EventBatchCreated.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventBatchCreated
             * @static
             * @param {gravity.v1.IEventBatchCreated} message EventBatchCreated message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventBatchCreated.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                if (message.batch_nonce != null && Object.hasOwnProperty.call(message, "batch_nonce"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.batch_nonce);
                return writer;
            };

            /**
             * Encodes the specified EventBatchCreated message, length delimited. Does not implicitly {@link gravity.v1.EventBatchCreated.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventBatchCreated
             * @static
             * @param {gravity.v1.IEventBatchCreated} message EventBatchCreated message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventBatchCreated.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventBatchCreated message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventBatchCreated
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventBatchCreated} EventBatchCreated
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventBatchCreated.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventBatchCreated();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    case 2:
                        message.batch_nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventBatchCreated message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventBatchCreated
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventBatchCreated} EventBatchCreated
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventBatchCreated.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventBatchCreated message.
             * @function verify
             * @memberof gravity.v1.EventBatchCreated
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventBatchCreated.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.batch_nonce != null && message.hasOwnProperty("batch_nonce"))
                    if (!$util.isString(message.batch_nonce))
                        return "batch_nonce: string expected";
                return null;
            };

            /**
             * Creates an EventBatchCreated message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventBatchCreated
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventBatchCreated} EventBatchCreated
             */
            EventBatchCreated.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventBatchCreated)
                    return object;
                let message = new $root.gravity.v1.EventBatchCreated();
                if (object.message != null)
                    message.message = String(object.message);
                if (object.batch_nonce != null)
                    message.batch_nonce = String(object.batch_nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventBatchCreated message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventBatchCreated
             * @static
             * @param {gravity.v1.EventBatchCreated} message EventBatchCreated
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventBatchCreated.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.message = "";
                    object.batch_nonce = "";
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.batch_nonce != null && message.hasOwnProperty("batch_nonce"))
                    object.batch_nonce = message.batch_nonce;
                return object;
            };

            /**
             * Converts this EventBatchCreated to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventBatchCreated
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventBatchCreated.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventBatchCreated;
        })();

        v1.EventBatchConfirmKey = (function() {

            /**
             * Properties of an EventBatchConfirmKey.
             * @memberof gravity.v1
             * @interface IEventBatchConfirmKey
             * @property {string|null} [message] EventBatchConfirmKey message
             * @property {string|null} [batch_confirm_key] EventBatchConfirmKey batch_confirm_key
             */

            /**
             * Constructs a new EventBatchConfirmKey.
             * @memberof gravity.v1
             * @classdesc Represents an EventBatchConfirmKey.
             * @implements IEventBatchConfirmKey
             * @constructor
             * @param {gravity.v1.IEventBatchConfirmKey=} [properties] Properties to set
             */
            function EventBatchConfirmKey(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventBatchConfirmKey message.
             * @member {string} message
             * @memberof gravity.v1.EventBatchConfirmKey
             * @instance
             */
            EventBatchConfirmKey.prototype.message = "";

            /**
             * EventBatchConfirmKey batch_confirm_key.
             * @member {string} batch_confirm_key
             * @memberof gravity.v1.EventBatchConfirmKey
             * @instance
             */
            EventBatchConfirmKey.prototype.batch_confirm_key = "";

            /**
             * Encodes the specified EventBatchConfirmKey message. Does not implicitly {@link gravity.v1.EventBatchConfirmKey.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventBatchConfirmKey
             * @static
             * @param {gravity.v1.IEventBatchConfirmKey} message EventBatchConfirmKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventBatchConfirmKey.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                if (message.batch_confirm_key != null && Object.hasOwnProperty.call(message, "batch_confirm_key"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.batch_confirm_key);
                return writer;
            };

            /**
             * Encodes the specified EventBatchConfirmKey message, length delimited. Does not implicitly {@link gravity.v1.EventBatchConfirmKey.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventBatchConfirmKey
             * @static
             * @param {gravity.v1.IEventBatchConfirmKey} message EventBatchConfirmKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventBatchConfirmKey.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventBatchConfirmKey message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventBatchConfirmKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventBatchConfirmKey} EventBatchConfirmKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventBatchConfirmKey.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventBatchConfirmKey();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    case 2:
                        message.batch_confirm_key = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventBatchConfirmKey message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventBatchConfirmKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventBatchConfirmKey} EventBatchConfirmKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventBatchConfirmKey.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventBatchConfirmKey message.
             * @function verify
             * @memberof gravity.v1.EventBatchConfirmKey
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventBatchConfirmKey.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.batch_confirm_key != null && message.hasOwnProperty("batch_confirm_key"))
                    if (!$util.isString(message.batch_confirm_key))
                        return "batch_confirm_key: string expected";
                return null;
            };

            /**
             * Creates an EventBatchConfirmKey message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventBatchConfirmKey
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventBatchConfirmKey} EventBatchConfirmKey
             */
            EventBatchConfirmKey.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventBatchConfirmKey)
                    return object;
                let message = new $root.gravity.v1.EventBatchConfirmKey();
                if (object.message != null)
                    message.message = String(object.message);
                if (object.batch_confirm_key != null)
                    message.batch_confirm_key = String(object.batch_confirm_key);
                return message;
            };

            /**
             * Creates a plain object from an EventBatchConfirmKey message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventBatchConfirmKey
             * @static
             * @param {gravity.v1.EventBatchConfirmKey} message EventBatchConfirmKey
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventBatchConfirmKey.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.message = "";
                    object.batch_confirm_key = "";
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.batch_confirm_key != null && message.hasOwnProperty("batch_confirm_key"))
                    object.batch_confirm_key = message.batch_confirm_key;
                return object;
            };

            /**
             * Converts this EventBatchConfirmKey to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventBatchConfirmKey
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventBatchConfirmKey.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventBatchConfirmKey;
        })();

        v1.EventBatchSendToEthClaim = (function() {

            /**
             * Properties of an EventBatchSendToEthClaim.
             * @memberof gravity.v1
             * @interface IEventBatchSendToEthClaim
             * @property {string|null} [nonce] EventBatchSendToEthClaim nonce
             */

            /**
             * Constructs a new EventBatchSendToEthClaim.
             * @memberof gravity.v1
             * @classdesc Represents an EventBatchSendToEthClaim.
             * @implements IEventBatchSendToEthClaim
             * @constructor
             * @param {gravity.v1.IEventBatchSendToEthClaim=} [properties] Properties to set
             */
            function EventBatchSendToEthClaim(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventBatchSendToEthClaim nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @instance
             */
            EventBatchSendToEthClaim.prototype.nonce = "";

            /**
             * Encodes the specified EventBatchSendToEthClaim message. Does not implicitly {@link gravity.v1.EventBatchSendToEthClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @static
             * @param {gravity.v1.IEventBatchSendToEthClaim} message EventBatchSendToEthClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventBatchSendToEthClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified EventBatchSendToEthClaim message, length delimited. Does not implicitly {@link gravity.v1.EventBatchSendToEthClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @static
             * @param {gravity.v1.IEventBatchSendToEthClaim} message EventBatchSendToEthClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventBatchSendToEthClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventBatchSendToEthClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventBatchSendToEthClaim} EventBatchSendToEthClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventBatchSendToEthClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventBatchSendToEthClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventBatchSendToEthClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventBatchSendToEthClaim} EventBatchSendToEthClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventBatchSendToEthClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventBatchSendToEthClaim message.
             * @function verify
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventBatchSendToEthClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                return null;
            };

            /**
             * Creates an EventBatchSendToEthClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventBatchSendToEthClaim} EventBatchSendToEthClaim
             */
            EventBatchSendToEthClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventBatchSendToEthClaim)
                    return object;
                let message = new $root.gravity.v1.EventBatchSendToEthClaim();
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventBatchSendToEthClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @static
             * @param {gravity.v1.EventBatchSendToEthClaim} message EventBatchSendToEthClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventBatchSendToEthClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.nonce = "";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                return object;
            };

            /**
             * Converts this EventBatchSendToEthClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventBatchSendToEthClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventBatchSendToEthClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventBatchSendToEthClaim;
        })();

        v1.EventClaim = (function() {

            /**
             * Properties of an EventClaim.
             * @memberof gravity.v1
             * @interface IEventClaim
             * @property {string|null} [message] EventClaim message
             * @property {string|null} [claim_hash] EventClaim claim_hash
             * @property {string|null} [attestation_id] EventClaim attestation_id
             */

            /**
             * Constructs a new EventClaim.
             * @memberof gravity.v1
             * @classdesc Represents an EventClaim.
             * @implements IEventClaim
             * @constructor
             * @param {gravity.v1.IEventClaim=} [properties] Properties to set
             */
            function EventClaim(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventClaim message.
             * @member {string} message
             * @memberof gravity.v1.EventClaim
             * @instance
             */
            EventClaim.prototype.message = "";

            /**
             * EventClaim claim_hash.
             * @member {string} claim_hash
             * @memberof gravity.v1.EventClaim
             * @instance
             */
            EventClaim.prototype.claim_hash = "";

            /**
             * EventClaim attestation_id.
             * @member {string} attestation_id
             * @memberof gravity.v1.EventClaim
             * @instance
             */
            EventClaim.prototype.attestation_id = "";

            /**
             * Encodes the specified EventClaim message. Does not implicitly {@link gravity.v1.EventClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventClaim
             * @static
             * @param {gravity.v1.IEventClaim} message EventClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                if (message.claim_hash != null && Object.hasOwnProperty.call(message, "claim_hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.claim_hash);
                if (message.attestation_id != null && Object.hasOwnProperty.call(message, "attestation_id"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.attestation_id);
                return writer;
            };

            /**
             * Encodes the specified EventClaim message, length delimited. Does not implicitly {@link gravity.v1.EventClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventClaim
             * @static
             * @param {gravity.v1.IEventClaim} message EventClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventClaim} EventClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    case 2:
                        message.claim_hash = reader.string();
                        break;
                    case 3:
                        message.attestation_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventClaim} EventClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventClaim message.
             * @function verify
             * @memberof gravity.v1.EventClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.claim_hash != null && message.hasOwnProperty("claim_hash"))
                    if (!$util.isString(message.claim_hash))
                        return "claim_hash: string expected";
                if (message.attestation_id != null && message.hasOwnProperty("attestation_id"))
                    if (!$util.isString(message.attestation_id))
                        return "attestation_id: string expected";
                return null;
            };

            /**
             * Creates an EventClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventClaim} EventClaim
             */
            EventClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventClaim)
                    return object;
                let message = new $root.gravity.v1.EventClaim();
                if (object.message != null)
                    message.message = String(object.message);
                if (object.claim_hash != null)
                    message.claim_hash = String(object.claim_hash);
                if (object.attestation_id != null)
                    message.attestation_id = String(object.attestation_id);
                return message;
            };

            /**
             * Creates a plain object from an EventClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventClaim
             * @static
             * @param {gravity.v1.EventClaim} message EventClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.message = "";
                    object.claim_hash = "";
                    object.attestation_id = "";
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.claim_hash != null && message.hasOwnProperty("claim_hash"))
                    object.claim_hash = message.claim_hash;
                if (message.attestation_id != null && message.hasOwnProperty("attestation_id"))
                    object.attestation_id = message.attestation_id;
                return object;
            };

            /**
             * Converts this EventClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventClaim;
        })();

        v1.EventBadSignatureEvidence = (function() {

            /**
             * Properties of an EventBadSignatureEvidence.
             * @memberof gravity.v1
             * @interface IEventBadSignatureEvidence
             * @property {string|null} [message] EventBadSignatureEvidence message
             * @property {string|null} [bad_eth_signature] EventBadSignatureEvidence bad_eth_signature
             * @property {string|null} [bad_eth_signature_subject] EventBadSignatureEvidence bad_eth_signature_subject
             */

            /**
             * Constructs a new EventBadSignatureEvidence.
             * @memberof gravity.v1
             * @classdesc Represents an EventBadSignatureEvidence.
             * @implements IEventBadSignatureEvidence
             * @constructor
             * @param {gravity.v1.IEventBadSignatureEvidence=} [properties] Properties to set
             */
            function EventBadSignatureEvidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventBadSignatureEvidence message.
             * @member {string} message
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @instance
             */
            EventBadSignatureEvidence.prototype.message = "";

            /**
             * EventBadSignatureEvidence bad_eth_signature.
             * @member {string} bad_eth_signature
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @instance
             */
            EventBadSignatureEvidence.prototype.bad_eth_signature = "";

            /**
             * EventBadSignatureEvidence bad_eth_signature_subject.
             * @member {string} bad_eth_signature_subject
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @instance
             */
            EventBadSignatureEvidence.prototype.bad_eth_signature_subject = "";

            /**
             * Encodes the specified EventBadSignatureEvidence message. Does not implicitly {@link gravity.v1.EventBadSignatureEvidence.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @static
             * @param {gravity.v1.IEventBadSignatureEvidence} message EventBadSignatureEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventBadSignatureEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                if (message.bad_eth_signature != null && Object.hasOwnProperty.call(message, "bad_eth_signature"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.bad_eth_signature);
                if (message.bad_eth_signature_subject != null && Object.hasOwnProperty.call(message, "bad_eth_signature_subject"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.bad_eth_signature_subject);
                return writer;
            };

            /**
             * Encodes the specified EventBadSignatureEvidence message, length delimited. Does not implicitly {@link gravity.v1.EventBadSignatureEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @static
             * @param {gravity.v1.IEventBadSignatureEvidence} message EventBadSignatureEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventBadSignatureEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventBadSignatureEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventBadSignatureEvidence} EventBadSignatureEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventBadSignatureEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventBadSignatureEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    case 2:
                        message.bad_eth_signature = reader.string();
                        break;
                    case 3:
                        message.bad_eth_signature_subject = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventBadSignatureEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventBadSignatureEvidence} EventBadSignatureEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventBadSignatureEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventBadSignatureEvidence message.
             * @function verify
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventBadSignatureEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.bad_eth_signature != null && message.hasOwnProperty("bad_eth_signature"))
                    if (!$util.isString(message.bad_eth_signature))
                        return "bad_eth_signature: string expected";
                if (message.bad_eth_signature_subject != null && message.hasOwnProperty("bad_eth_signature_subject"))
                    if (!$util.isString(message.bad_eth_signature_subject))
                        return "bad_eth_signature_subject: string expected";
                return null;
            };

            /**
             * Creates an EventBadSignatureEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventBadSignatureEvidence} EventBadSignatureEvidence
             */
            EventBadSignatureEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventBadSignatureEvidence)
                    return object;
                let message = new $root.gravity.v1.EventBadSignatureEvidence();
                if (object.message != null)
                    message.message = String(object.message);
                if (object.bad_eth_signature != null)
                    message.bad_eth_signature = String(object.bad_eth_signature);
                if (object.bad_eth_signature_subject != null)
                    message.bad_eth_signature_subject = String(object.bad_eth_signature_subject);
                return message;
            };

            /**
             * Creates a plain object from an EventBadSignatureEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @static
             * @param {gravity.v1.EventBadSignatureEvidence} message EventBadSignatureEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventBadSignatureEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.message = "";
                    object.bad_eth_signature = "";
                    object.bad_eth_signature_subject = "";
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.bad_eth_signature != null && message.hasOwnProperty("bad_eth_signature"))
                    object.bad_eth_signature = message.bad_eth_signature;
                if (message.bad_eth_signature_subject != null && message.hasOwnProperty("bad_eth_signature_subject"))
                    object.bad_eth_signature_subject = message.bad_eth_signature_subject;
                return object;
            };

            /**
             * Converts this EventBadSignatureEvidence to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventBadSignatureEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventBadSignatureEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventBadSignatureEvidence;
        })();

        v1.EventERC20DeployedClaim = (function() {

            /**
             * Properties of an EventERC20DeployedClaim.
             * @memberof gravity.v1
             * @interface IEventERC20DeployedClaim
             * @property {string|null} [token] EventERC20DeployedClaim token
             * @property {string|null} [nonce] EventERC20DeployedClaim nonce
             */

            /**
             * Constructs a new EventERC20DeployedClaim.
             * @memberof gravity.v1
             * @classdesc Represents an EventERC20DeployedClaim.
             * @implements IEventERC20DeployedClaim
             * @constructor
             * @param {gravity.v1.IEventERC20DeployedClaim=} [properties] Properties to set
             */
            function EventERC20DeployedClaim(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventERC20DeployedClaim token.
             * @member {string} token
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @instance
             */
            EventERC20DeployedClaim.prototype.token = "";

            /**
             * EventERC20DeployedClaim nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @instance
             */
            EventERC20DeployedClaim.prototype.nonce = "";

            /**
             * Encodes the specified EventERC20DeployedClaim message. Does not implicitly {@link gravity.v1.EventERC20DeployedClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @static
             * @param {gravity.v1.IEventERC20DeployedClaim} message EventERC20DeployedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventERC20DeployedClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified EventERC20DeployedClaim message, length delimited. Does not implicitly {@link gravity.v1.EventERC20DeployedClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @static
             * @param {gravity.v1.IEventERC20DeployedClaim} message EventERC20DeployedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventERC20DeployedClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventERC20DeployedClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventERC20DeployedClaim} EventERC20DeployedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventERC20DeployedClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventERC20DeployedClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.token = reader.string();
                        break;
                    case 2:
                        message.nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventERC20DeployedClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventERC20DeployedClaim} EventERC20DeployedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventERC20DeployedClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventERC20DeployedClaim message.
             * @function verify
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventERC20DeployedClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                return null;
            };

            /**
             * Creates an EventERC20DeployedClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventERC20DeployedClaim} EventERC20DeployedClaim
             */
            EventERC20DeployedClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventERC20DeployedClaim)
                    return object;
                let message = new $root.gravity.v1.EventERC20DeployedClaim();
                if (object.token != null)
                    message.token = String(object.token);
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventERC20DeployedClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @static
             * @param {gravity.v1.EventERC20DeployedClaim} message EventERC20DeployedClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventERC20DeployedClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.token = "";
                    object.nonce = "";
                }
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                return object;
            };

            /**
             * Converts this EventERC20DeployedClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventERC20DeployedClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventERC20DeployedClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventERC20DeployedClaim;
        })();

        v1.EventValsetUpdatedClaim = (function() {

            /**
             * Properties of an EventValsetUpdatedClaim.
             * @memberof gravity.v1
             * @interface IEventValsetUpdatedClaim
             * @property {string|null} [nonce] EventValsetUpdatedClaim nonce
             */

            /**
             * Constructs a new EventValsetUpdatedClaim.
             * @memberof gravity.v1
             * @classdesc Represents an EventValsetUpdatedClaim.
             * @implements IEventValsetUpdatedClaim
             * @constructor
             * @param {gravity.v1.IEventValsetUpdatedClaim=} [properties] Properties to set
             */
            function EventValsetUpdatedClaim(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventValsetUpdatedClaim nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @instance
             */
            EventValsetUpdatedClaim.prototype.nonce = "";

            /**
             * Encodes the specified EventValsetUpdatedClaim message. Does not implicitly {@link gravity.v1.EventValsetUpdatedClaim.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @static
             * @param {gravity.v1.IEventValsetUpdatedClaim} message EventValsetUpdatedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventValsetUpdatedClaim.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified EventValsetUpdatedClaim message, length delimited. Does not implicitly {@link gravity.v1.EventValsetUpdatedClaim.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @static
             * @param {gravity.v1.IEventValsetUpdatedClaim} message EventValsetUpdatedClaim message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventValsetUpdatedClaim.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventValsetUpdatedClaim message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventValsetUpdatedClaim} EventValsetUpdatedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventValsetUpdatedClaim.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventValsetUpdatedClaim();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventValsetUpdatedClaim message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventValsetUpdatedClaim} EventValsetUpdatedClaim
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventValsetUpdatedClaim.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventValsetUpdatedClaim message.
             * @function verify
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventValsetUpdatedClaim.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                return null;
            };

            /**
             * Creates an EventValsetUpdatedClaim message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventValsetUpdatedClaim} EventValsetUpdatedClaim
             */
            EventValsetUpdatedClaim.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventValsetUpdatedClaim)
                    return object;
                let message = new $root.gravity.v1.EventValsetUpdatedClaim();
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventValsetUpdatedClaim message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @static
             * @param {gravity.v1.EventValsetUpdatedClaim} message EventValsetUpdatedClaim
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventValsetUpdatedClaim.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.nonce = "";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                return object;
            };

            /**
             * Converts this EventValsetUpdatedClaim to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventValsetUpdatedClaim
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventValsetUpdatedClaim.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventValsetUpdatedClaim;
        })();

        v1.EventMultisigUpdateRequest = (function() {

            /**
             * Properties of an EventMultisigUpdateRequest.
             * @memberof gravity.v1
             * @interface IEventMultisigUpdateRequest
             * @property {string|null} [bridge_contract] EventMultisigUpdateRequest bridge_contract
             * @property {string|null} [bridge_chain_id] EventMultisigUpdateRequest bridge_chain_id
             * @property {string|null} [multisig_id] EventMultisigUpdateRequest multisig_id
             * @property {string|null} [nonce] EventMultisigUpdateRequest nonce
             */

            /**
             * Constructs a new EventMultisigUpdateRequest.
             * @memberof gravity.v1
             * @classdesc Represents an EventMultisigUpdateRequest.
             * @implements IEventMultisigUpdateRequest
             * @constructor
             * @param {gravity.v1.IEventMultisigUpdateRequest=} [properties] Properties to set
             */
            function EventMultisigUpdateRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventMultisigUpdateRequest bridge_contract.
             * @member {string} bridge_contract
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @instance
             */
            EventMultisigUpdateRequest.prototype.bridge_contract = "";

            /**
             * EventMultisigUpdateRequest bridge_chain_id.
             * @member {string} bridge_chain_id
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @instance
             */
            EventMultisigUpdateRequest.prototype.bridge_chain_id = "";

            /**
             * EventMultisigUpdateRequest multisig_id.
             * @member {string} multisig_id
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @instance
             */
            EventMultisigUpdateRequest.prototype.multisig_id = "";

            /**
             * EventMultisigUpdateRequest nonce.
             * @member {string} nonce
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @instance
             */
            EventMultisigUpdateRequest.prototype.nonce = "";

            /**
             * Encodes the specified EventMultisigUpdateRequest message. Does not implicitly {@link gravity.v1.EventMultisigUpdateRequest.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @static
             * @param {gravity.v1.IEventMultisigUpdateRequest} message EventMultisigUpdateRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventMultisigUpdateRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bridge_contract != null && Object.hasOwnProperty.call(message, "bridge_contract"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.bridge_contract);
                if (message.bridge_chain_id != null && Object.hasOwnProperty.call(message, "bridge_chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.bridge_chain_id);
                if (message.multisig_id != null && Object.hasOwnProperty.call(message, "multisig_id"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.multisig_id);
                if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified EventMultisigUpdateRequest message, length delimited. Does not implicitly {@link gravity.v1.EventMultisigUpdateRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @static
             * @param {gravity.v1.IEventMultisigUpdateRequest} message EventMultisigUpdateRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventMultisigUpdateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventMultisigUpdateRequest message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventMultisigUpdateRequest} EventMultisigUpdateRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventMultisigUpdateRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventMultisigUpdateRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.bridge_contract = reader.string();
                        break;
                    case 2:
                        message.bridge_chain_id = reader.string();
                        break;
                    case 3:
                        message.multisig_id = reader.string();
                        break;
                    case 4:
                        message.nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventMultisigUpdateRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventMultisigUpdateRequest} EventMultisigUpdateRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventMultisigUpdateRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventMultisigUpdateRequest message.
             * @function verify
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventMultisigUpdateRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    if (!$util.isString(message.bridge_contract))
                        return "bridge_contract: string expected";
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    if (!$util.isString(message.bridge_chain_id))
                        return "bridge_chain_id: string expected";
                if (message.multisig_id != null && message.hasOwnProperty("multisig_id"))
                    if (!$util.isString(message.multisig_id))
                        return "multisig_id: string expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!$util.isString(message.nonce))
                        return "nonce: string expected";
                return null;
            };

            /**
             * Creates an EventMultisigUpdateRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventMultisigUpdateRequest} EventMultisigUpdateRequest
             */
            EventMultisigUpdateRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventMultisigUpdateRequest)
                    return object;
                let message = new $root.gravity.v1.EventMultisigUpdateRequest();
                if (object.bridge_contract != null)
                    message.bridge_contract = String(object.bridge_contract);
                if (object.bridge_chain_id != null)
                    message.bridge_chain_id = String(object.bridge_chain_id);
                if (object.multisig_id != null)
                    message.multisig_id = String(object.multisig_id);
                if (object.nonce != null)
                    message.nonce = String(object.nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventMultisigUpdateRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @static
             * @param {gravity.v1.EventMultisigUpdateRequest} message EventMultisigUpdateRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventMultisigUpdateRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.bridge_contract = "";
                    object.bridge_chain_id = "";
                    object.multisig_id = "";
                    object.nonce = "";
                }
                if (message.bridge_contract != null && message.hasOwnProperty("bridge_contract"))
                    object.bridge_contract = message.bridge_contract;
                if (message.bridge_chain_id != null && message.hasOwnProperty("bridge_chain_id"))
                    object.bridge_chain_id = message.bridge_chain_id;
                if (message.multisig_id != null && message.hasOwnProperty("multisig_id"))
                    object.multisig_id = message.multisig_id;
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = message.nonce;
                return object;
            };

            /**
             * Converts this EventMultisigUpdateRequest to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventMultisigUpdateRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventMultisigUpdateRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventMultisigUpdateRequest;
        })();

        v1.EventOutgoingLogicCallCanceled = (function() {

            /**
             * Properties of an EventOutgoingLogicCallCanceled.
             * @memberof gravity.v1
             * @interface IEventOutgoingLogicCallCanceled
             * @property {string|null} [logic_call_invalidation_id] EventOutgoingLogicCallCanceled logic_call_invalidation_id
             * @property {string|null} [logic_call_invalidation_nonce] EventOutgoingLogicCallCanceled logic_call_invalidation_nonce
             */

            /**
             * Constructs a new EventOutgoingLogicCallCanceled.
             * @memberof gravity.v1
             * @classdesc Represents an EventOutgoingLogicCallCanceled.
             * @implements IEventOutgoingLogicCallCanceled
             * @constructor
             * @param {gravity.v1.IEventOutgoingLogicCallCanceled=} [properties] Properties to set
             */
            function EventOutgoingLogicCallCanceled(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventOutgoingLogicCallCanceled logic_call_invalidation_id.
             * @member {string} logic_call_invalidation_id
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @instance
             */
            EventOutgoingLogicCallCanceled.prototype.logic_call_invalidation_id = "";

            /**
             * EventOutgoingLogicCallCanceled logic_call_invalidation_nonce.
             * @member {string} logic_call_invalidation_nonce
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @instance
             */
            EventOutgoingLogicCallCanceled.prototype.logic_call_invalidation_nonce = "";

            /**
             * Encodes the specified EventOutgoingLogicCallCanceled message. Does not implicitly {@link gravity.v1.EventOutgoingLogicCallCanceled.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @static
             * @param {gravity.v1.IEventOutgoingLogicCallCanceled} message EventOutgoingLogicCallCanceled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventOutgoingLogicCallCanceled.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.logic_call_invalidation_id != null && Object.hasOwnProperty.call(message, "logic_call_invalidation_id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.logic_call_invalidation_id);
                if (message.logic_call_invalidation_nonce != null && Object.hasOwnProperty.call(message, "logic_call_invalidation_nonce"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.logic_call_invalidation_nonce);
                return writer;
            };

            /**
             * Encodes the specified EventOutgoingLogicCallCanceled message, length delimited. Does not implicitly {@link gravity.v1.EventOutgoingLogicCallCanceled.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @static
             * @param {gravity.v1.IEventOutgoingLogicCallCanceled} message EventOutgoingLogicCallCanceled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventOutgoingLogicCallCanceled.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventOutgoingLogicCallCanceled message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventOutgoingLogicCallCanceled} EventOutgoingLogicCallCanceled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventOutgoingLogicCallCanceled.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventOutgoingLogicCallCanceled();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.logic_call_invalidation_id = reader.string();
                        break;
                    case 2:
                        message.logic_call_invalidation_nonce = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventOutgoingLogicCallCanceled message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventOutgoingLogicCallCanceled} EventOutgoingLogicCallCanceled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventOutgoingLogicCallCanceled.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventOutgoingLogicCallCanceled message.
             * @function verify
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventOutgoingLogicCallCanceled.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.logic_call_invalidation_id != null && message.hasOwnProperty("logic_call_invalidation_id"))
                    if (!$util.isString(message.logic_call_invalidation_id))
                        return "logic_call_invalidation_id: string expected";
                if (message.logic_call_invalidation_nonce != null && message.hasOwnProperty("logic_call_invalidation_nonce"))
                    if (!$util.isString(message.logic_call_invalidation_nonce))
                        return "logic_call_invalidation_nonce: string expected";
                return null;
            };

            /**
             * Creates an EventOutgoingLogicCallCanceled message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventOutgoingLogicCallCanceled} EventOutgoingLogicCallCanceled
             */
            EventOutgoingLogicCallCanceled.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventOutgoingLogicCallCanceled)
                    return object;
                let message = new $root.gravity.v1.EventOutgoingLogicCallCanceled();
                if (object.logic_call_invalidation_id != null)
                    message.logic_call_invalidation_id = String(object.logic_call_invalidation_id);
                if (object.logic_call_invalidation_nonce != null)
                    message.logic_call_invalidation_nonce = String(object.logic_call_invalidation_nonce);
                return message;
            };

            /**
             * Creates a plain object from an EventOutgoingLogicCallCanceled message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @static
             * @param {gravity.v1.EventOutgoingLogicCallCanceled} message EventOutgoingLogicCallCanceled
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventOutgoingLogicCallCanceled.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.logic_call_invalidation_id = "";
                    object.logic_call_invalidation_nonce = "";
                }
                if (message.logic_call_invalidation_id != null && message.hasOwnProperty("logic_call_invalidation_id"))
                    object.logic_call_invalidation_id = message.logic_call_invalidation_id;
                if (message.logic_call_invalidation_nonce != null && message.hasOwnProperty("logic_call_invalidation_nonce"))
                    object.logic_call_invalidation_nonce = message.logic_call_invalidation_nonce;
                return object;
            };

            /**
             * Converts this EventOutgoingLogicCallCanceled to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventOutgoingLogicCallCanceled
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventOutgoingLogicCallCanceled.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventOutgoingLogicCallCanceled;
        })();

        v1.EventSignatureSlashing = (function() {

            /**
             * Properties of an EventSignatureSlashing.
             * @memberof gravity.v1
             * @interface IEventSignatureSlashing
             * @property {string|null} [type] EventSignatureSlashing type
             * @property {string|null} [address] EventSignatureSlashing address
             */

            /**
             * Constructs a new EventSignatureSlashing.
             * @memberof gravity.v1
             * @classdesc Represents an EventSignatureSlashing.
             * @implements IEventSignatureSlashing
             * @constructor
             * @param {gravity.v1.IEventSignatureSlashing=} [properties] Properties to set
             */
            function EventSignatureSlashing(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSignatureSlashing type.
             * @member {string} type
             * @memberof gravity.v1.EventSignatureSlashing
             * @instance
             */
            EventSignatureSlashing.prototype.type = "";

            /**
             * EventSignatureSlashing address.
             * @member {string} address
             * @memberof gravity.v1.EventSignatureSlashing
             * @instance
             */
            EventSignatureSlashing.prototype.address = "";

            /**
             * Encodes the specified EventSignatureSlashing message. Does not implicitly {@link gravity.v1.EventSignatureSlashing.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventSignatureSlashing
             * @static
             * @param {gravity.v1.IEventSignatureSlashing} message EventSignatureSlashing message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSignatureSlashing.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.address);
                return writer;
            };

            /**
             * Encodes the specified EventSignatureSlashing message, length delimited. Does not implicitly {@link gravity.v1.EventSignatureSlashing.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventSignatureSlashing
             * @static
             * @param {gravity.v1.IEventSignatureSlashing} message EventSignatureSlashing message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSignatureSlashing.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSignatureSlashing message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventSignatureSlashing
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventSignatureSlashing} EventSignatureSlashing
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSignatureSlashing.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventSignatureSlashing();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        message.address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSignatureSlashing message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventSignatureSlashing
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventSignatureSlashing} EventSignatureSlashing
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSignatureSlashing.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSignatureSlashing message.
             * @function verify
             * @memberof gravity.v1.EventSignatureSlashing
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSignatureSlashing.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                return null;
            };

            /**
             * Creates an EventSignatureSlashing message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventSignatureSlashing
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventSignatureSlashing} EventSignatureSlashing
             */
            EventSignatureSlashing.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventSignatureSlashing)
                    return object;
                let message = new $root.gravity.v1.EventSignatureSlashing();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.address != null)
                    message.address = String(object.address);
                return message;
            };

            /**
             * Creates a plain object from an EventSignatureSlashing message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventSignatureSlashing
             * @static
             * @param {gravity.v1.EventSignatureSlashing} message EventSignatureSlashing
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSignatureSlashing.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = "";
                    object.address = "";
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                return object;
            };

            /**
             * Converts this EventSignatureSlashing to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventSignatureSlashing
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSignatureSlashing.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSignatureSlashing;
        })();

        v1.EventOutgoingTxId = (function() {

            /**
             * Properties of an EventOutgoingTxId.
             * @memberof gravity.v1
             * @interface IEventOutgoingTxId
             * @property {string|null} [message] EventOutgoingTxId message
             * @property {string|null} [tx_id] EventOutgoingTxId tx_id
             */

            /**
             * Constructs a new EventOutgoingTxId.
             * @memberof gravity.v1
             * @classdesc Represents an EventOutgoingTxId.
             * @implements IEventOutgoingTxId
             * @constructor
             * @param {gravity.v1.IEventOutgoingTxId=} [properties] Properties to set
             */
            function EventOutgoingTxId(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventOutgoingTxId message.
             * @member {string} message
             * @memberof gravity.v1.EventOutgoingTxId
             * @instance
             */
            EventOutgoingTxId.prototype.message = "";

            /**
             * EventOutgoingTxId tx_id.
             * @member {string} tx_id
             * @memberof gravity.v1.EventOutgoingTxId
             * @instance
             */
            EventOutgoingTxId.prototype.tx_id = "";

            /**
             * Encodes the specified EventOutgoingTxId message. Does not implicitly {@link gravity.v1.EventOutgoingTxId.verify|verify} messages.
             * @function encode
             * @memberof gravity.v1.EventOutgoingTxId
             * @static
             * @param {gravity.v1.IEventOutgoingTxId} message EventOutgoingTxId message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventOutgoingTxId.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                if (message.tx_id != null && Object.hasOwnProperty.call(message, "tx_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.tx_id);
                return writer;
            };

            /**
             * Encodes the specified EventOutgoingTxId message, length delimited. Does not implicitly {@link gravity.v1.EventOutgoingTxId.verify|verify} messages.
             * @function encodeDelimited
             * @memberof gravity.v1.EventOutgoingTxId
             * @static
             * @param {gravity.v1.IEventOutgoingTxId} message EventOutgoingTxId message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventOutgoingTxId.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventOutgoingTxId message from the specified reader or buffer.
             * @function decode
             * @memberof gravity.v1.EventOutgoingTxId
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {gravity.v1.EventOutgoingTxId} EventOutgoingTxId
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventOutgoingTxId.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.gravity.v1.EventOutgoingTxId();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    case 2:
                        message.tx_id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventOutgoingTxId message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof gravity.v1.EventOutgoingTxId
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {gravity.v1.EventOutgoingTxId} EventOutgoingTxId
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventOutgoingTxId.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventOutgoingTxId message.
             * @function verify
             * @memberof gravity.v1.EventOutgoingTxId
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventOutgoingTxId.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.tx_id != null && message.hasOwnProperty("tx_id"))
                    if (!$util.isString(message.tx_id))
                        return "tx_id: string expected";
                return null;
            };

            /**
             * Creates an EventOutgoingTxId message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof gravity.v1.EventOutgoingTxId
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {gravity.v1.EventOutgoingTxId} EventOutgoingTxId
             */
            EventOutgoingTxId.fromObject = function fromObject(object) {
                if (object instanceof $root.gravity.v1.EventOutgoingTxId)
                    return object;
                let message = new $root.gravity.v1.EventOutgoingTxId();
                if (object.message != null)
                    message.message = String(object.message);
                if (object.tx_id != null)
                    message.tx_id = String(object.tx_id);
                return message;
            };

            /**
             * Creates a plain object from an EventOutgoingTxId message. Also converts values to other types if specified.
             * @function toObject
             * @memberof gravity.v1.EventOutgoingTxId
             * @static
             * @param {gravity.v1.EventOutgoingTxId} message EventOutgoingTxId
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventOutgoingTxId.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.message = "";
                    object.tx_id = "";
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.tx_id != null && message.hasOwnProperty("tx_id"))
                    object.tx_id = message.tx_id;
                return object;
            };

            /**
             * Converts this EventOutgoingTxId to JSON.
             * @function toJSON
             * @memberof gravity.v1.EventOutgoingTxId
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventOutgoingTxId.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventOutgoingTxId;
        })();

        /**
         * SignType enum.
         * @name gravity.v1.SignType
         * @enum {number}
         * @property {number} SIGN_TYPE_UNSPECIFIED=0 SIGN_TYPE_UNSPECIFIED value
         * @property {number} SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE=1 SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE value
         * @property {number} SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH=2 SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH value
         */
        v1.SignType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SIGN_TYPE_UNSPECIFIED"] = 0;
            values[valuesById[1] = "SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE"] = 1;
            values[valuesById[2] = "SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH"] = 2;
            return values;
        })();

        return v1;
    })();

    return gravity;
})();

export const gogoproto = $root.gogoproto = (() => {

    /**
     * Namespace gogoproto.
     * @exports gogoproto
     * @namespace
     */
    const gogoproto = {};

    return gogoproto;
})();

export const cosmos = $root.cosmos = (() => {

    /**
     * Namespace cosmos.
     * @exports cosmos
     * @namespace
     */
    const cosmos = {};

    cosmos.base = (function() {

        /**
         * Namespace base.
         * @memberof cosmos
         * @namespace
         */
        const base = {};

        base.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.base
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Coin = (function() {

                /**
                 * Properties of a Coin.
                 * @memberof cosmos.base.v1beta1
                 * @interface ICoin
                 * @property {string|null} [denom] Coin denom
                 * @property {string|null} [amount] Coin amount
                 */

                /**
                 * Constructs a new Coin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a Coin.
                 * @implements ICoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set
                 */
                function Coin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Coin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.denom = "";

                /**
                 * Coin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.amount = "";

                /**
                 * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified Coin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.Coin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Coin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Coin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a Coin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 */
                Coin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.Coin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.Coin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a Coin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.Coin} message Coin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Coin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this Coin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Coin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Coin;
            })();

            v1beta1.DecCoin = (function() {

                /**
                 * Properties of a DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecCoin
                 * @property {string|null} [denom] DecCoin denom
                 * @property {string|null} [amount] DecCoin amount
                 */

                /**
                 * Constructs a new DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecCoin.
                 * @implements IDecCoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set
                 */
                function DecCoin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecCoin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.denom = "";

                /**
                 * DecCoin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.amount = "";

                /**
                 * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified DecCoin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecCoin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecCoin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecCoin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a DecCoin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 */
                DecCoin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecCoin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecCoin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a DecCoin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.DecCoin} message DecCoin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecCoin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this DecCoin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecCoin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecCoin;
            })();

            v1beta1.IntProto = (function() {

                /**
                 * Properties of an IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IIntProto
                 * @property {string|null} [int] IntProto int
                 */

                /**
                 * Constructs a new IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents an IntProto.
                 * @implements IIntProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set
                 */
                function IntProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * IntProto int.
                 * @member {string} int
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 */
                IntProto.prototype.int = "";

                /**
                 * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.int != null && Object.hasOwnProperty.call(message, "int"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.int);
                    return writer;
                };

                /**
                 * Encodes the specified IntProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.IntProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.int = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an IntProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                IntProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.int != null && message.hasOwnProperty("int"))
                        if (!$util.isString(message.int))
                            return "int: string expected";
                    return null;
                };

                /**
                 * Creates an IntProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 */
                IntProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.IntProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.IntProto();
                    if (object.int != null)
                        message.int = String(object.int);
                    return message;
                };

                /**
                 * Creates a plain object from an IntProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IntProto} message IntProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                IntProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.int = "";
                    if (message.int != null && message.hasOwnProperty("int"))
                        object.int = message.int;
                    return object;
                };

                /**
                 * Converts this IntProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                IntProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return IntProto;
            })();

            v1beta1.DecProto = (function() {

                /**
                 * Properties of a DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecProto
                 * @property {string|null} [dec] DecProto dec
                 */

                /**
                 * Constructs a new DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecProto.
                 * @implements IDecProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set
                 */
                function DecProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecProto dec.
                 * @member {string} dec
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 */
                DecProto.prototype.dec = "";

                /**
                 * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.dec != null && Object.hasOwnProperty.call(message, "dec"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.dec);
                    return writer;
                };

                /**
                 * Encodes the specified DecProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.dec = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        if (!$util.isString(message.dec))
                            return "dec: string expected";
                    return null;
                };

                /**
                 * Creates a DecProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 */
                DecProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecProto();
                    if (object.dec != null)
                        message.dec = String(object.dec);
                    return message;
                };

                /**
                 * Creates a plain object from a DecProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.DecProto} message DecProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.dec = "";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        object.dec = message.dec;
                    return object;
                };

                /**
                 * Converts this DecProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecProto;
            })();

            return v1beta1;
        })();

        return base;
    })();

    cosmos.bank = (function() {

        /**
         * Namespace bank.
         * @memberof cosmos
         * @namespace
         */
        const bank = {};

        bank.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.bank
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Params = (function() {

                /**
                 * Properties of a Params.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IParams
                 * @property {Array.<cosmos.bank.v1beta1.ISendEnabled>|null} [send_enabled] Params send_enabled
                 * @property {boolean|null} [default_send_enabled] Params default_send_enabled
                 */

                /**
                 * Constructs a new Params.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    this.send_enabled = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Params send_enabled.
                 * @member {Array.<cosmos.bank.v1beta1.ISendEnabled>} send_enabled
                 * @memberof cosmos.bank.v1beta1.Params
                 * @instance
                 */
                Params.prototype.send_enabled = $util.emptyArray;

                /**
                 * Params default_send_enabled.
                 * @member {boolean} default_send_enabled
                 * @memberof cosmos.bank.v1beta1.Params
                 * @instance
                 */
                Params.prototype.default_send_enabled = false;

                /**
                 * Encodes the specified Params message. Does not implicitly {@link cosmos.bank.v1beta1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {cosmos.bank.v1beta1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.send_enabled != null && message.send_enabled.length)
                        for (let i = 0; i < message.send_enabled.length; ++i)
                            $root.cosmos.bank.v1beta1.SendEnabled.encode(message.send_enabled[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.default_send_enabled != null && Object.hasOwnProperty.call(message, "default_send_enabled"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.default_send_enabled);
                    return writer;
                };

                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {cosmos.bank.v1beta1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Params();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.send_enabled && message.send_enabled.length))
                                message.send_enabled = [];
                            message.send_enabled.push($root.cosmos.bank.v1beta1.SendEnabled.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.default_send_enabled = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.bank.v1beta1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.send_enabled != null && message.hasOwnProperty("send_enabled")) {
                        if (!Array.isArray(message.send_enabled))
                            return "send_enabled: array expected";
                        for (let i = 0; i < message.send_enabled.length; ++i) {
                            let error = $root.cosmos.bank.v1beta1.SendEnabled.verify(message.send_enabled[i]);
                            if (error)
                                return "send_enabled." + error;
                        }
                    }
                    if (message.default_send_enabled != null && message.hasOwnProperty("default_send_enabled"))
                        if (typeof message.default_send_enabled !== "boolean")
                            return "default_send_enabled: boolean expected";
                    return null;
                };

                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.bank.v1beta1.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.bank.v1beta1.Params)
                        return object;
                    let message = new $root.cosmos.bank.v1beta1.Params();
                    if (object.send_enabled) {
                        if (!Array.isArray(object.send_enabled))
                            throw TypeError(".cosmos.bank.v1beta1.Params.send_enabled: array expected");
                        message.send_enabled = [];
                        for (let i = 0; i < object.send_enabled.length; ++i) {
                            if (typeof object.send_enabled[i] !== "object")
                                throw TypeError(".cosmos.bank.v1beta1.Params.send_enabled: object expected");
                            message.send_enabled[i] = $root.cosmos.bank.v1beta1.SendEnabled.fromObject(object.send_enabled[i]);
                        }
                    }
                    if (object.default_send_enabled != null)
                        message.default_send_enabled = Boolean(object.default_send_enabled);
                    return message;
                };

                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.bank.v1beta1.Params
                 * @static
                 * @param {cosmos.bank.v1beta1.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.send_enabled = [];
                    if (options.defaults)
                        object.default_send_enabled = false;
                    if (message.send_enabled && message.send_enabled.length) {
                        object.send_enabled = [];
                        for (let j = 0; j < message.send_enabled.length; ++j)
                            object.send_enabled[j] = $root.cosmos.bank.v1beta1.SendEnabled.toObject(message.send_enabled[j], options);
                    }
                    if (message.default_send_enabled != null && message.hasOwnProperty("default_send_enabled"))
                        object.default_send_enabled = message.default_send_enabled;
                    return object;
                };

                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof cosmos.bank.v1beta1.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Params;
            })();

            v1beta1.SendEnabled = (function() {

                /**
                 * Properties of a SendEnabled.
                 * @memberof cosmos.bank.v1beta1
                 * @interface ISendEnabled
                 * @property {string|null} [denom] SendEnabled denom
                 * @property {boolean|null} [enabled] SendEnabled enabled
                 */

                /**
                 * Constructs a new SendEnabled.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a SendEnabled.
                 * @implements ISendEnabled
                 * @constructor
                 * @param {cosmos.bank.v1beta1.ISendEnabled=} [properties] Properties to set
                 */
                function SendEnabled(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SendEnabled denom.
                 * @member {string} denom
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @instance
                 */
                SendEnabled.prototype.denom = "";

                /**
                 * SendEnabled enabled.
                 * @member {boolean} enabled
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @instance
                 */
                SendEnabled.prototype.enabled = false;

                /**
                 * Encodes the specified SendEnabled message. Does not implicitly {@link cosmos.bank.v1beta1.SendEnabled.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {cosmos.bank.v1beta1.ISendEnabled} message SendEnabled message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SendEnabled.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.enabled != null && Object.hasOwnProperty.call(message, "enabled"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enabled);
                    return writer;
                };

                /**
                 * Encodes the specified SendEnabled message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.SendEnabled.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {cosmos.bank.v1beta1.ISendEnabled} message SendEnabled message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SendEnabled.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SendEnabled message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.SendEnabled} SendEnabled
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SendEnabled.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.SendEnabled();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.enabled = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SendEnabled message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.bank.v1beta1.SendEnabled} SendEnabled
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SendEnabled.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SendEnabled message.
                 * @function verify
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SendEnabled.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.enabled != null && message.hasOwnProperty("enabled"))
                        if (typeof message.enabled !== "boolean")
                            return "enabled: boolean expected";
                    return null;
                };

                /**
                 * Creates a SendEnabled message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.bank.v1beta1.SendEnabled} SendEnabled
                 */
                SendEnabled.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.bank.v1beta1.SendEnabled)
                        return object;
                    let message = new $root.cosmos.bank.v1beta1.SendEnabled();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.enabled != null)
                        message.enabled = Boolean(object.enabled);
                    return message;
                };

                /**
                 * Creates a plain object from a SendEnabled message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @static
                 * @param {cosmos.bank.v1beta1.SendEnabled} message SendEnabled
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SendEnabled.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.enabled = false;
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.enabled != null && message.hasOwnProperty("enabled"))
                        object.enabled = message.enabled;
                    return object;
                };

                /**
                 * Converts this SendEnabled to JSON.
                 * @function toJSON
                 * @memberof cosmos.bank.v1beta1.SendEnabled
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SendEnabled.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SendEnabled;
            })();

            v1beta1.Input = (function() {

                /**
                 * Properties of an Input.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IInput
                 * @property {string|null} [address] Input address
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [coins] Input coins
                 */

                /**
                 * Constructs a new Input.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents an Input.
                 * @implements IInput
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IInput=} [properties] Properties to set
                 */
                function Input(properties) {
                    this.coins = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Input address.
                 * @member {string} address
                 * @memberof cosmos.bank.v1beta1.Input
                 * @instance
                 */
                Input.prototype.address = "";

                /**
                 * Input coins.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} coins
                 * @memberof cosmos.bank.v1beta1.Input
                 * @instance
                 */
                Input.prototype.coins = $util.emptyArray;

                /**
                 * Encodes the specified Input message. Does not implicitly {@link cosmos.bank.v1beta1.Input.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {cosmos.bank.v1beta1.IInput} message Input message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Input.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.coins != null && message.coins.length)
                        for (let i = 0; i < message.coins.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.coins[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Input message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Input.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {cosmos.bank.v1beta1.IInput} message Input message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Input.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Input message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Input} Input
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Input.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Input();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            if (!(message.coins && message.coins.length))
                                message.coins = [];
                            message.coins.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Input message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.bank.v1beta1.Input} Input
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Input.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Input message.
                 * @function verify
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Input.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.coins != null && message.hasOwnProperty("coins")) {
                        if (!Array.isArray(message.coins))
                            return "coins: array expected";
                        for (let i = 0; i < message.coins.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.coins[i]);
                            if (error)
                                return "coins." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an Input message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.bank.v1beta1.Input} Input
                 */
                Input.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.bank.v1beta1.Input)
                        return object;
                    let message = new $root.cosmos.bank.v1beta1.Input();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.coins) {
                        if (!Array.isArray(object.coins))
                            throw TypeError(".cosmos.bank.v1beta1.Input.coins: array expected");
                        message.coins = [];
                        for (let i = 0; i < object.coins.length; ++i) {
                            if (typeof object.coins[i] !== "object")
                                throw TypeError(".cosmos.bank.v1beta1.Input.coins: object expected");
                            message.coins[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.coins[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Input message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.bank.v1beta1.Input
                 * @static
                 * @param {cosmos.bank.v1beta1.Input} message Input
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Input.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.coins = [];
                    if (options.defaults)
                        object.address = "";
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.coins && message.coins.length) {
                        object.coins = [];
                        for (let j = 0; j < message.coins.length; ++j)
                            object.coins[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.coins[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Input to JSON.
                 * @function toJSON
                 * @memberof cosmos.bank.v1beta1.Input
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Input.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Input;
            })();

            v1beta1.Output = (function() {

                /**
                 * Properties of an Output.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IOutput
                 * @property {string|null} [address] Output address
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [coins] Output coins
                 */

                /**
                 * Constructs a new Output.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents an Output.
                 * @implements IOutput
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IOutput=} [properties] Properties to set
                 */
                function Output(properties) {
                    this.coins = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Output address.
                 * @member {string} address
                 * @memberof cosmos.bank.v1beta1.Output
                 * @instance
                 */
                Output.prototype.address = "";

                /**
                 * Output coins.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} coins
                 * @memberof cosmos.bank.v1beta1.Output
                 * @instance
                 */
                Output.prototype.coins = $util.emptyArray;

                /**
                 * Encodes the specified Output message. Does not implicitly {@link cosmos.bank.v1beta1.Output.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {cosmos.bank.v1beta1.IOutput} message Output message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Output.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.coins != null && message.coins.length)
                        for (let i = 0; i < message.coins.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.coins[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Output message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Output.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {cosmos.bank.v1beta1.IOutput} message Output message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Output.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Output message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Output} Output
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Output.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Output();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            if (!(message.coins && message.coins.length))
                                message.coins = [];
                            message.coins.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Output message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.bank.v1beta1.Output} Output
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Output.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Output message.
                 * @function verify
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Output.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.coins != null && message.hasOwnProperty("coins")) {
                        if (!Array.isArray(message.coins))
                            return "coins: array expected";
                        for (let i = 0; i < message.coins.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.coins[i]);
                            if (error)
                                return "coins." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an Output message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.bank.v1beta1.Output} Output
                 */
                Output.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.bank.v1beta1.Output)
                        return object;
                    let message = new $root.cosmos.bank.v1beta1.Output();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.coins) {
                        if (!Array.isArray(object.coins))
                            throw TypeError(".cosmos.bank.v1beta1.Output.coins: array expected");
                        message.coins = [];
                        for (let i = 0; i < object.coins.length; ++i) {
                            if (typeof object.coins[i] !== "object")
                                throw TypeError(".cosmos.bank.v1beta1.Output.coins: object expected");
                            message.coins[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.coins[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Output message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.bank.v1beta1.Output
                 * @static
                 * @param {cosmos.bank.v1beta1.Output} message Output
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Output.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.coins = [];
                    if (options.defaults)
                        object.address = "";
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.coins && message.coins.length) {
                        object.coins = [];
                        for (let j = 0; j < message.coins.length; ++j)
                            object.coins[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.coins[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Output to JSON.
                 * @function toJSON
                 * @memberof cosmos.bank.v1beta1.Output
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Output.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Output;
            })();

            v1beta1.Supply = (function() {

                /**
                 * Properties of a Supply.
                 * @memberof cosmos.bank.v1beta1
                 * @interface ISupply
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [total] Supply total
                 */

                /**
                 * Constructs a new Supply.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a Supply.
                 * @implements ISupply
                 * @constructor
                 * @param {cosmos.bank.v1beta1.ISupply=} [properties] Properties to set
                 */
                function Supply(properties) {
                    this.total = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Supply total.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} total
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @instance
                 */
                Supply.prototype.total = $util.emptyArray;

                /**
                 * Encodes the specified Supply message. Does not implicitly {@link cosmos.bank.v1beta1.Supply.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {cosmos.bank.v1beta1.ISupply} message Supply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Supply.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.total != null && message.total.length)
                        for (let i = 0; i < message.total.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.total[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Supply message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Supply.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {cosmos.bank.v1beta1.ISupply} message Supply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Supply.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Supply message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Supply} Supply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Supply.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Supply();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.total && message.total.length))
                                message.total = [];
                            message.total.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Supply message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.bank.v1beta1.Supply} Supply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Supply.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Supply message.
                 * @function verify
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Supply.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.total != null && message.hasOwnProperty("total")) {
                        if (!Array.isArray(message.total))
                            return "total: array expected";
                        for (let i = 0; i < message.total.length; ++i) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.total[i]);
                            if (error)
                                return "total." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a Supply message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.bank.v1beta1.Supply} Supply
                 */
                Supply.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.bank.v1beta1.Supply)
                        return object;
                    let message = new $root.cosmos.bank.v1beta1.Supply();
                    if (object.total) {
                        if (!Array.isArray(object.total))
                            throw TypeError(".cosmos.bank.v1beta1.Supply.total: array expected");
                        message.total = [];
                        for (let i = 0; i < object.total.length; ++i) {
                            if (typeof object.total[i] !== "object")
                                throw TypeError(".cosmos.bank.v1beta1.Supply.total: object expected");
                            message.total[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.total[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Supply message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @static
                 * @param {cosmos.bank.v1beta1.Supply} message Supply
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Supply.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.total = [];
                    if (message.total && message.total.length) {
                        object.total = [];
                        for (let j = 0; j < message.total.length; ++j)
                            object.total[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.total[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Supply to JSON.
                 * @function toJSON
                 * @memberof cosmos.bank.v1beta1.Supply
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Supply.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Supply;
            })();

            v1beta1.DenomUnit = (function() {

                /**
                 * Properties of a DenomUnit.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IDenomUnit
                 * @property {string|null} [denom] DenomUnit denom
                 * @property {number|null} [exponent] DenomUnit exponent
                 * @property {Array.<string>|null} [aliases] DenomUnit aliases
                 */

                /**
                 * Constructs a new DenomUnit.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a DenomUnit.
                 * @implements IDenomUnit
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IDenomUnit=} [properties] Properties to set
                 */
                function DenomUnit(properties) {
                    this.aliases = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DenomUnit denom.
                 * @member {string} denom
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @instance
                 */
                DenomUnit.prototype.denom = "";

                /**
                 * DenomUnit exponent.
                 * @member {number} exponent
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @instance
                 */
                DenomUnit.prototype.exponent = 0;

                /**
                 * DenomUnit aliases.
                 * @member {Array.<string>} aliases
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @instance
                 */
                DenomUnit.prototype.aliases = $util.emptyArray;

                /**
                 * Encodes the specified DenomUnit message. Does not implicitly {@link cosmos.bank.v1beta1.DenomUnit.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {cosmos.bank.v1beta1.IDenomUnit} message DenomUnit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DenomUnit.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.exponent != null && Object.hasOwnProperty.call(message, "exponent"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.exponent);
                    if (message.aliases != null && message.aliases.length)
                        for (let i = 0; i < message.aliases.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.aliases[i]);
                    return writer;
                };

                /**
                 * Encodes the specified DenomUnit message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.DenomUnit.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {cosmos.bank.v1beta1.IDenomUnit} message DenomUnit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DenomUnit.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DenomUnit message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.DenomUnit} DenomUnit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DenomUnit.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.DenomUnit();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.exponent = reader.uint32();
                            break;
                        case 3:
                            if (!(message.aliases && message.aliases.length))
                                message.aliases = [];
                            message.aliases.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DenomUnit message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.bank.v1beta1.DenomUnit} DenomUnit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DenomUnit.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DenomUnit message.
                 * @function verify
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DenomUnit.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.exponent != null && message.hasOwnProperty("exponent"))
                        if (!$util.isInteger(message.exponent))
                            return "exponent: integer expected";
                    if (message.aliases != null && message.hasOwnProperty("aliases")) {
                        if (!Array.isArray(message.aliases))
                            return "aliases: array expected";
                        for (let i = 0; i < message.aliases.length; ++i)
                            if (!$util.isString(message.aliases[i]))
                                return "aliases: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a DenomUnit message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.bank.v1beta1.DenomUnit} DenomUnit
                 */
                DenomUnit.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.bank.v1beta1.DenomUnit)
                        return object;
                    let message = new $root.cosmos.bank.v1beta1.DenomUnit();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.exponent != null)
                        message.exponent = object.exponent >>> 0;
                    if (object.aliases) {
                        if (!Array.isArray(object.aliases))
                            throw TypeError(".cosmos.bank.v1beta1.DenomUnit.aliases: array expected");
                        message.aliases = [];
                        for (let i = 0; i < object.aliases.length; ++i)
                            message.aliases[i] = String(object.aliases[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a DenomUnit message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @static
                 * @param {cosmos.bank.v1beta1.DenomUnit} message DenomUnit
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DenomUnit.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.aliases = [];
                    if (options.defaults) {
                        object.denom = "";
                        object.exponent = 0;
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.exponent != null && message.hasOwnProperty("exponent"))
                        object.exponent = message.exponent;
                    if (message.aliases && message.aliases.length) {
                        object.aliases = [];
                        for (let j = 0; j < message.aliases.length; ++j)
                            object.aliases[j] = message.aliases[j];
                    }
                    return object;
                };

                /**
                 * Converts this DenomUnit to JSON.
                 * @function toJSON
                 * @memberof cosmos.bank.v1beta1.DenomUnit
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DenomUnit.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DenomUnit;
            })();

            v1beta1.Metadata = (function() {

                /**
                 * Properties of a Metadata.
                 * @memberof cosmos.bank.v1beta1
                 * @interface IMetadata
                 * @property {string|null} [description] Metadata description
                 * @property {Array.<cosmos.bank.v1beta1.IDenomUnit>|null} [denom_units] Metadata denom_units
                 * @property {string|null} [base] Metadata base
                 * @property {string|null} [display] Metadata display
                 * @property {string|null} [name] Metadata name
                 * @property {string|null} [symbol] Metadata symbol
                 */

                /**
                 * Constructs a new Metadata.
                 * @memberof cosmos.bank.v1beta1
                 * @classdesc Represents a Metadata.
                 * @implements IMetadata
                 * @constructor
                 * @param {cosmos.bank.v1beta1.IMetadata=} [properties] Properties to set
                 */
                function Metadata(properties) {
                    this.denom_units = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Metadata description.
                 * @member {string} description
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.description = "";

                /**
                 * Metadata denom_units.
                 * @member {Array.<cosmos.bank.v1beta1.IDenomUnit>} denom_units
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.denom_units = $util.emptyArray;

                /**
                 * Metadata base.
                 * @member {string} base
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.base = "";

                /**
                 * Metadata display.
                 * @member {string} display
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.display = "";

                /**
                 * Metadata name.
                 * @member {string} name
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.name = "";

                /**
                 * Metadata symbol.
                 * @member {string} symbol
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 */
                Metadata.prototype.symbol = "";

                /**
                 * Encodes the specified Metadata message. Does not implicitly {@link cosmos.bank.v1beta1.Metadata.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {cosmos.bank.v1beta1.IMetadata} message Metadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Metadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                    if (message.denom_units != null && message.denom_units.length)
                        for (let i = 0; i < message.denom_units.length; ++i)
                            $root.cosmos.bank.v1beta1.DenomUnit.encode(message.denom_units[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.base != null && Object.hasOwnProperty.call(message, "base"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.base);
                    if (message.display != null && Object.hasOwnProperty.call(message, "display"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.display);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
                    if (message.symbol != null && Object.hasOwnProperty.call(message, "symbol"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.symbol);
                    return writer;
                };

                /**
                 * Encodes the specified Metadata message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Metadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {cosmos.bank.v1beta1.IMetadata} message Metadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Metadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Metadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.bank.v1beta1.Metadata} Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Metadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Metadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.description = reader.string();
                            break;
                        case 2:
                            if (!(message.denom_units && message.denom_units.length))
                                message.denom_units = [];
                            message.denom_units.push($root.cosmos.bank.v1beta1.DenomUnit.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.base = reader.string();
                            break;
                        case 4:
                            message.display = reader.string();
                            break;
                        case 5:
                            message.name = reader.string();
                            break;
                        case 6:
                            message.symbol = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Metadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.bank.v1beta1.Metadata} Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Metadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Metadata message.
                 * @function verify
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Metadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.denom_units != null && message.hasOwnProperty("denom_units")) {
                        if (!Array.isArray(message.denom_units))
                            return "denom_units: array expected";
                        for (let i = 0; i < message.denom_units.length; ++i) {
                            let error = $root.cosmos.bank.v1beta1.DenomUnit.verify(message.denom_units[i]);
                            if (error)
                                return "denom_units." + error;
                        }
                    }
                    if (message.base != null && message.hasOwnProperty("base"))
                        if (!$util.isString(message.base))
                            return "base: string expected";
                    if (message.display != null && message.hasOwnProperty("display"))
                        if (!$util.isString(message.display))
                            return "display: string expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.symbol != null && message.hasOwnProperty("symbol"))
                        if (!$util.isString(message.symbol))
                            return "symbol: string expected";
                    return null;
                };

                /**
                 * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.bank.v1beta1.Metadata} Metadata
                 */
                Metadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.bank.v1beta1.Metadata)
                        return object;
                    let message = new $root.cosmos.bank.v1beta1.Metadata();
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.denom_units) {
                        if (!Array.isArray(object.denom_units))
                            throw TypeError(".cosmos.bank.v1beta1.Metadata.denom_units: array expected");
                        message.denom_units = [];
                        for (let i = 0; i < object.denom_units.length; ++i) {
                            if (typeof object.denom_units[i] !== "object")
                                throw TypeError(".cosmos.bank.v1beta1.Metadata.denom_units: object expected");
                            message.denom_units[i] = $root.cosmos.bank.v1beta1.DenomUnit.fromObject(object.denom_units[i]);
                        }
                    }
                    if (object.base != null)
                        message.base = String(object.base);
                    if (object.display != null)
                        message.display = String(object.display);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.symbol != null)
                        message.symbol = String(object.symbol);
                    return message;
                };

                /**
                 * Creates a plain object from a Metadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @static
                 * @param {cosmos.bank.v1beta1.Metadata} message Metadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Metadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.denom_units = [];
                    if (options.defaults) {
                        object.description = "";
                        object.base = "";
                        object.display = "";
                        object.name = "";
                        object.symbol = "";
                    }
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.denom_units && message.denom_units.length) {
                        object.denom_units = [];
                        for (let j = 0; j < message.denom_units.length; ++j)
                            object.denom_units[j] = $root.cosmos.bank.v1beta1.DenomUnit.toObject(message.denom_units[j], options);
                    }
                    if (message.base != null && message.hasOwnProperty("base"))
                        object.base = message.base;
                    if (message.display != null && message.hasOwnProperty("display"))
                        object.display = message.display;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.symbol != null && message.hasOwnProperty("symbol"))
                        object.symbol = message.symbol;
                    return object;
                };

                /**
                 * Converts this Metadata to JSON.
                 * @function toJSON
                 * @memberof cosmos.bank.v1beta1.Metadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Metadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Metadata;
            })();

            return v1beta1;
        })();

        return bank;
    })();

    return cosmos;
})();

export const cosmos_proto = $root.cosmos_proto = (() => {

    /**
     * Namespace cosmos_proto.
     * @exports cosmos_proto
     * @namespace
     */
    const cosmos_proto = {};

    return cosmos_proto;
})();

export const tendermint = $root.tendermint = (() => {

    /**
     * Namespace tendermint.
     * @exports tendermint
     * @namespace
     */
    const tendermint = {};

    tendermint.abci = (function() {

        /**
         * Namespace abci.
         * @memberof tendermint
         * @namespace
         */
        const abci = {};

        abci.Request = (function() {

            /**
             * Properties of a Request.
             * @memberof tendermint.abci
             * @interface IRequest
             * @property {tendermint.abci.IRequestEcho|null} [echo] Request echo
             * @property {tendermint.abci.IRequestFlush|null} [flush] Request flush
             * @property {tendermint.abci.IRequestInfo|null} [info] Request info
             * @property {tendermint.abci.IRequestSetOption|null} [set_option] Request set_option
             * @property {tendermint.abci.IRequestInitChain|null} [init_chain] Request init_chain
             * @property {tendermint.abci.IRequestQuery|null} [query] Request query
             * @property {tendermint.abci.IRequestBeginBlock|null} [begin_block] Request begin_block
             * @property {tendermint.abci.IRequestCheckTx|null} [check_tx] Request check_tx
             * @property {tendermint.abci.IRequestDeliverTx|null} [deliver_tx] Request deliver_tx
             * @property {tendermint.abci.IRequestEndBlock|null} [end_block] Request end_block
             * @property {tendermint.abci.IRequestCommit|null} [commit] Request commit
             * @property {tendermint.abci.IRequestListSnapshots|null} [list_snapshots] Request list_snapshots
             * @property {tendermint.abci.IRequestOfferSnapshot|null} [offer_snapshot] Request offer_snapshot
             * @property {tendermint.abci.IRequestLoadSnapshotChunk|null} [load_snapshot_chunk] Request load_snapshot_chunk
             * @property {tendermint.abci.IRequestApplySnapshotChunk|null} [apply_snapshot_chunk] Request apply_snapshot_chunk
             */

            /**
             * Constructs a new Request.
             * @memberof tendermint.abci
             * @classdesc Represents a Request.
             * @implements IRequest
             * @constructor
             * @param {tendermint.abci.IRequest=} [properties] Properties to set
             */
            function Request(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Request echo.
             * @member {tendermint.abci.IRequestEcho|null|undefined} echo
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.echo = null;

            /**
             * Request flush.
             * @member {tendermint.abci.IRequestFlush|null|undefined} flush
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.flush = null;

            /**
             * Request info.
             * @member {tendermint.abci.IRequestInfo|null|undefined} info
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.info = null;

            /**
             * Request set_option.
             * @member {tendermint.abci.IRequestSetOption|null|undefined} set_option
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.set_option = null;

            /**
             * Request init_chain.
             * @member {tendermint.abci.IRequestInitChain|null|undefined} init_chain
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.init_chain = null;

            /**
             * Request query.
             * @member {tendermint.abci.IRequestQuery|null|undefined} query
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.query = null;

            /**
             * Request begin_block.
             * @member {tendermint.abci.IRequestBeginBlock|null|undefined} begin_block
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.begin_block = null;

            /**
             * Request check_tx.
             * @member {tendermint.abci.IRequestCheckTx|null|undefined} check_tx
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.check_tx = null;

            /**
             * Request deliver_tx.
             * @member {tendermint.abci.IRequestDeliverTx|null|undefined} deliver_tx
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.deliver_tx = null;

            /**
             * Request end_block.
             * @member {tendermint.abci.IRequestEndBlock|null|undefined} end_block
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.end_block = null;

            /**
             * Request commit.
             * @member {tendermint.abci.IRequestCommit|null|undefined} commit
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.commit = null;

            /**
             * Request list_snapshots.
             * @member {tendermint.abci.IRequestListSnapshots|null|undefined} list_snapshots
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.list_snapshots = null;

            /**
             * Request offer_snapshot.
             * @member {tendermint.abci.IRequestOfferSnapshot|null|undefined} offer_snapshot
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.offer_snapshot = null;

            /**
             * Request load_snapshot_chunk.
             * @member {tendermint.abci.IRequestLoadSnapshotChunk|null|undefined} load_snapshot_chunk
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.load_snapshot_chunk = null;

            /**
             * Request apply_snapshot_chunk.
             * @member {tendermint.abci.IRequestApplySnapshotChunk|null|undefined} apply_snapshot_chunk
             * @memberof tendermint.abci.Request
             * @instance
             */
            Request.prototype.apply_snapshot_chunk = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Request value.
             * @member {"echo"|"flush"|"info"|"set_option"|"init_chain"|"query"|"begin_block"|"check_tx"|"deliver_tx"|"end_block"|"commit"|"list_snapshots"|"offer_snapshot"|"load_snapshot_chunk"|"apply_snapshot_chunk"|undefined} value
             * @memberof tendermint.abci.Request
             * @instance
             */
            Object.defineProperty(Request.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["echo", "flush", "info", "set_option", "init_chain", "query", "begin_block", "check_tx", "deliver_tx", "end_block", "commit", "list_snapshots", "offer_snapshot", "load_snapshot_chunk", "apply_snapshot_chunk"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Request message. Does not implicitly {@link tendermint.abci.Request.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Request
             * @static
             * @param {tendermint.abci.IRequest} message Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Request.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                    $root.tendermint.abci.RequestEcho.encode(message.echo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.flush != null && Object.hasOwnProperty.call(message, "flush"))
                    $root.tendermint.abci.RequestFlush.encode(message.flush, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    $root.tendermint.abci.RequestInfo.encode(message.info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.set_option != null && Object.hasOwnProperty.call(message, "set_option"))
                    $root.tendermint.abci.RequestSetOption.encode(message.set_option, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.init_chain != null && Object.hasOwnProperty.call(message, "init_chain"))
                    $root.tendermint.abci.RequestInitChain.encode(message.init_chain, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                    $root.tendermint.abci.RequestQuery.encode(message.query, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.begin_block != null && Object.hasOwnProperty.call(message, "begin_block"))
                    $root.tendermint.abci.RequestBeginBlock.encode(message.begin_block, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.check_tx != null && Object.hasOwnProperty.call(message, "check_tx"))
                    $root.tendermint.abci.RequestCheckTx.encode(message.check_tx, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.deliver_tx != null && Object.hasOwnProperty.call(message, "deliver_tx"))
                    $root.tendermint.abci.RequestDeliverTx.encode(message.deliver_tx, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.end_block != null && Object.hasOwnProperty.call(message, "end_block"))
                    $root.tendermint.abci.RequestEndBlock.encode(message.end_block, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                    $root.tendermint.abci.RequestCommit.encode(message.commit, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.list_snapshots != null && Object.hasOwnProperty.call(message, "list_snapshots"))
                    $root.tendermint.abci.RequestListSnapshots.encode(message.list_snapshots, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.offer_snapshot != null && Object.hasOwnProperty.call(message, "offer_snapshot"))
                    $root.tendermint.abci.RequestOfferSnapshot.encode(message.offer_snapshot, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.load_snapshot_chunk != null && Object.hasOwnProperty.call(message, "load_snapshot_chunk"))
                    $root.tendermint.abci.RequestLoadSnapshotChunk.encode(message.load_snapshot_chunk, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.apply_snapshot_chunk != null && Object.hasOwnProperty.call(message, "apply_snapshot_chunk"))
                    $root.tendermint.abci.RequestApplySnapshotChunk.encode(message.apply_snapshot_chunk, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Request message, length delimited. Does not implicitly {@link tendermint.abci.Request.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Request
             * @static
             * @param {tendermint.abci.IRequest} message Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Request.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Request message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Request.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Request();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.echo = $root.tendermint.abci.RequestEcho.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.flush = $root.tendermint.abci.RequestFlush.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.info = $root.tendermint.abci.RequestInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.set_option = $root.tendermint.abci.RequestSetOption.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.init_chain = $root.tendermint.abci.RequestInitChain.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.query = $root.tendermint.abci.RequestQuery.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.begin_block = $root.tendermint.abci.RequestBeginBlock.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.check_tx = $root.tendermint.abci.RequestCheckTx.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.deliver_tx = $root.tendermint.abci.RequestDeliverTx.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.end_block = $root.tendermint.abci.RequestEndBlock.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.commit = $root.tendermint.abci.RequestCommit.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.list_snapshots = $root.tendermint.abci.RequestListSnapshots.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Request message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Request.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Request message.
             * @function verify
             * @memberof tendermint.abci.Request
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Request.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.echo != null && message.hasOwnProperty("echo")) {
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestEcho.verify(message.echo);
                        if (error)
                            return "echo." + error;
                    }
                }
                if (message.flush != null && message.hasOwnProperty("flush")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestFlush.verify(message.flush);
                        if (error)
                            return "flush." + error;
                    }
                }
                if (message.info != null && message.hasOwnProperty("info")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestInfo.verify(message.info);
                        if (error)
                            return "info." + error;
                    }
                }
                if (message.set_option != null && message.hasOwnProperty("set_option")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestSetOption.verify(message.set_option);
                        if (error)
                            return "set_option." + error;
                    }
                }
                if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestInitChain.verify(message.init_chain);
                        if (error)
                            return "init_chain." + error;
                    }
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestQuery.verify(message.query);
                        if (error)
                            return "query." + error;
                    }
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestBeginBlock.verify(message.begin_block);
                        if (error)
                            return "begin_block." + error;
                    }
                }
                if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestCheckTx.verify(message.check_tx);
                        if (error)
                            return "check_tx." + error;
                    }
                }
                if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestDeliverTx.verify(message.deliver_tx);
                        if (error)
                            return "deliver_tx." + error;
                    }
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestEndBlock.verify(message.end_block);
                        if (error)
                            return "end_block." + error;
                    }
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestCommit.verify(message.commit);
                        if (error)
                            return "commit." + error;
                    }
                }
                if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestListSnapshots.verify(message.list_snapshots);
                        if (error)
                            return "list_snapshots." + error;
                    }
                }
                if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestOfferSnapshot.verify(message.offer_snapshot);
                        if (error)
                            return "offer_snapshot." + error;
                    }
                }
                if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestLoadSnapshotChunk.verify(message.load_snapshot_chunk);
                        if (error)
                            return "load_snapshot_chunk." + error;
                    }
                }
                if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.RequestApplySnapshotChunk.verify(message.apply_snapshot_chunk);
                        if (error)
                            return "apply_snapshot_chunk." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Request message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Request
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Request} Request
             */
            Request.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Request)
                    return object;
                let message = new $root.tendermint.abci.Request();
                if (object.echo != null) {
                    if (typeof object.echo !== "object")
                        throw TypeError(".tendermint.abci.Request.echo: object expected");
                    message.echo = $root.tendermint.abci.RequestEcho.fromObject(object.echo);
                }
                if (object.flush != null) {
                    if (typeof object.flush !== "object")
                        throw TypeError(".tendermint.abci.Request.flush: object expected");
                    message.flush = $root.tendermint.abci.RequestFlush.fromObject(object.flush);
                }
                if (object.info != null) {
                    if (typeof object.info !== "object")
                        throw TypeError(".tendermint.abci.Request.info: object expected");
                    message.info = $root.tendermint.abci.RequestInfo.fromObject(object.info);
                }
                if (object.set_option != null) {
                    if (typeof object.set_option !== "object")
                        throw TypeError(".tendermint.abci.Request.set_option: object expected");
                    message.set_option = $root.tendermint.abci.RequestSetOption.fromObject(object.set_option);
                }
                if (object.init_chain != null) {
                    if (typeof object.init_chain !== "object")
                        throw TypeError(".tendermint.abci.Request.init_chain: object expected");
                    message.init_chain = $root.tendermint.abci.RequestInitChain.fromObject(object.init_chain);
                }
                if (object.query != null) {
                    if (typeof object.query !== "object")
                        throw TypeError(".tendermint.abci.Request.query: object expected");
                    message.query = $root.tendermint.abci.RequestQuery.fromObject(object.query);
                }
                if (object.begin_block != null) {
                    if (typeof object.begin_block !== "object")
                        throw TypeError(".tendermint.abci.Request.begin_block: object expected");
                    message.begin_block = $root.tendermint.abci.RequestBeginBlock.fromObject(object.begin_block);
                }
                if (object.check_tx != null) {
                    if (typeof object.check_tx !== "object")
                        throw TypeError(".tendermint.abci.Request.check_tx: object expected");
                    message.check_tx = $root.tendermint.abci.RequestCheckTx.fromObject(object.check_tx);
                }
                if (object.deliver_tx != null) {
                    if (typeof object.deliver_tx !== "object")
                        throw TypeError(".tendermint.abci.Request.deliver_tx: object expected");
                    message.deliver_tx = $root.tendermint.abci.RequestDeliverTx.fromObject(object.deliver_tx);
                }
                if (object.end_block != null) {
                    if (typeof object.end_block !== "object")
                        throw TypeError(".tendermint.abci.Request.end_block: object expected");
                    message.end_block = $root.tendermint.abci.RequestEndBlock.fromObject(object.end_block);
                }
                if (object.commit != null) {
                    if (typeof object.commit !== "object")
                        throw TypeError(".tendermint.abci.Request.commit: object expected");
                    message.commit = $root.tendermint.abci.RequestCommit.fromObject(object.commit);
                }
                if (object.list_snapshots != null) {
                    if (typeof object.list_snapshots !== "object")
                        throw TypeError(".tendermint.abci.Request.list_snapshots: object expected");
                    message.list_snapshots = $root.tendermint.abci.RequestListSnapshots.fromObject(object.list_snapshots);
                }
                if (object.offer_snapshot != null) {
                    if (typeof object.offer_snapshot !== "object")
                        throw TypeError(".tendermint.abci.Request.offer_snapshot: object expected");
                    message.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.fromObject(object.offer_snapshot);
                }
                if (object.load_snapshot_chunk != null) {
                    if (typeof object.load_snapshot_chunk !== "object")
                        throw TypeError(".tendermint.abci.Request.load_snapshot_chunk: object expected");
                    message.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.fromObject(object.load_snapshot_chunk);
                }
                if (object.apply_snapshot_chunk != null) {
                    if (typeof object.apply_snapshot_chunk !== "object")
                        throw TypeError(".tendermint.abci.Request.apply_snapshot_chunk: object expected");
                    message.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.fromObject(object.apply_snapshot_chunk);
                }
                return message;
            };

            /**
             * Creates a plain object from a Request message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Request
             * @static
             * @param {tendermint.abci.Request} message Request
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Request.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.echo != null && message.hasOwnProperty("echo")) {
                    object.echo = $root.tendermint.abci.RequestEcho.toObject(message.echo, options);
                    if (options.oneofs)
                        object.value = "echo";
                }
                if (message.flush != null && message.hasOwnProperty("flush")) {
                    object.flush = $root.tendermint.abci.RequestFlush.toObject(message.flush, options);
                    if (options.oneofs)
                        object.value = "flush";
                }
                if (message.info != null && message.hasOwnProperty("info")) {
                    object.info = $root.tendermint.abci.RequestInfo.toObject(message.info, options);
                    if (options.oneofs)
                        object.value = "info";
                }
                if (message.set_option != null && message.hasOwnProperty("set_option")) {
                    object.set_option = $root.tendermint.abci.RequestSetOption.toObject(message.set_option, options);
                    if (options.oneofs)
                        object.value = "set_option";
                }
                if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                    object.init_chain = $root.tendermint.abci.RequestInitChain.toObject(message.init_chain, options);
                    if (options.oneofs)
                        object.value = "init_chain";
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                    object.query = $root.tendermint.abci.RequestQuery.toObject(message.query, options);
                    if (options.oneofs)
                        object.value = "query";
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    object.begin_block = $root.tendermint.abci.RequestBeginBlock.toObject(message.begin_block, options);
                    if (options.oneofs)
                        object.value = "begin_block";
                }
                if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                    object.check_tx = $root.tendermint.abci.RequestCheckTx.toObject(message.check_tx, options);
                    if (options.oneofs)
                        object.value = "check_tx";
                }
                if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                    object.deliver_tx = $root.tendermint.abci.RequestDeliverTx.toObject(message.deliver_tx, options);
                    if (options.oneofs)
                        object.value = "deliver_tx";
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    object.end_block = $root.tendermint.abci.RequestEndBlock.toObject(message.end_block, options);
                    if (options.oneofs)
                        object.value = "end_block";
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    object.commit = $root.tendermint.abci.RequestCommit.toObject(message.commit, options);
                    if (options.oneofs)
                        object.value = "commit";
                }
                if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                    object.list_snapshots = $root.tendermint.abci.RequestListSnapshots.toObject(message.list_snapshots, options);
                    if (options.oneofs)
                        object.value = "list_snapshots";
                }
                if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                    object.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.toObject(message.offer_snapshot, options);
                    if (options.oneofs)
                        object.value = "offer_snapshot";
                }
                if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                    object.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.toObject(message.load_snapshot_chunk, options);
                    if (options.oneofs)
                        object.value = "load_snapshot_chunk";
                }
                if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                    object.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.toObject(message.apply_snapshot_chunk, options);
                    if (options.oneofs)
                        object.value = "apply_snapshot_chunk";
                }
                return object;
            };

            /**
             * Converts this Request to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Request
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Request.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Request;
        })();

        abci.RequestEcho = (function() {

            /**
             * Properties of a RequestEcho.
             * @memberof tendermint.abci
             * @interface IRequestEcho
             * @property {string|null} [message] RequestEcho message
             */

            /**
             * Constructs a new RequestEcho.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestEcho.
             * @implements IRequestEcho
             * @constructor
             * @param {tendermint.abci.IRequestEcho=} [properties] Properties to set
             */
            function RequestEcho(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestEcho message.
             * @member {string} message
             * @memberof tendermint.abci.RequestEcho
             * @instance
             */
            RequestEcho.prototype.message = "";

            /**
             * Encodes the specified RequestEcho message. Does not implicitly {@link tendermint.abci.RequestEcho.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {tendermint.abci.IRequestEcho} message RequestEcho message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEcho.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                return writer;
            };

            /**
             * Encodes the specified RequestEcho message, length delimited. Does not implicitly {@link tendermint.abci.RequestEcho.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {tendermint.abci.IRequestEcho} message RequestEcho message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEcho.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestEcho message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestEcho} RequestEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEcho.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestEcho();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestEcho message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestEcho} RequestEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEcho.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestEcho message.
             * @function verify
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestEcho.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                return null;
            };

            /**
             * Creates a RequestEcho message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestEcho} RequestEcho
             */
            RequestEcho.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestEcho)
                    return object;
                let message = new $root.tendermint.abci.RequestEcho();
                if (object.message != null)
                    message.message = String(object.message);
                return message;
            };

            /**
             * Creates a plain object from a RequestEcho message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestEcho
             * @static
             * @param {tendermint.abci.RequestEcho} message RequestEcho
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestEcho.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.message = "";
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                return object;
            };

            /**
             * Converts this RequestEcho to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestEcho
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestEcho.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestEcho;
        })();

        abci.RequestFlush = (function() {

            /**
             * Properties of a RequestFlush.
             * @memberof tendermint.abci
             * @interface IRequestFlush
             */

            /**
             * Constructs a new RequestFlush.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestFlush.
             * @implements IRequestFlush
             * @constructor
             * @param {tendermint.abci.IRequestFlush=} [properties] Properties to set
             */
            function RequestFlush(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified RequestFlush message. Does not implicitly {@link tendermint.abci.RequestFlush.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {tendermint.abci.IRequestFlush} message RequestFlush message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestFlush.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified RequestFlush message, length delimited. Does not implicitly {@link tendermint.abci.RequestFlush.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {tendermint.abci.IRequestFlush} message RequestFlush message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestFlush.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestFlush message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestFlush} RequestFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestFlush.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestFlush();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestFlush message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestFlush} RequestFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestFlush.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestFlush message.
             * @function verify
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestFlush.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a RequestFlush message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestFlush} RequestFlush
             */
            RequestFlush.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestFlush)
                    return object;
                return new $root.tendermint.abci.RequestFlush();
            };

            /**
             * Creates a plain object from a RequestFlush message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestFlush
             * @static
             * @param {tendermint.abci.RequestFlush} message RequestFlush
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestFlush.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this RequestFlush to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestFlush
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestFlush.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestFlush;
        })();

        abci.RequestInfo = (function() {

            /**
             * Properties of a RequestInfo.
             * @memberof tendermint.abci
             * @interface IRequestInfo
             * @property {string|null} [version] RequestInfo version
             * @property {number|null} [block_version] RequestInfo block_version
             * @property {number|null} [p2p_version] RequestInfo p2p_version
             */

            /**
             * Constructs a new RequestInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestInfo.
             * @implements IRequestInfo
             * @constructor
             * @param {tendermint.abci.IRequestInfo=} [properties] Properties to set
             */
            function RequestInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestInfo version.
             * @member {string} version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.version = "";

            /**
             * RequestInfo block_version.
             * @member {number} block_version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.block_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * RequestInfo p2p_version.
             * @member {number} p2p_version
             * @memberof tendermint.abci.RequestInfo
             * @instance
             */
            RequestInfo.prototype.p2p_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified RequestInfo message. Does not implicitly {@link tendermint.abci.RequestInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {tendermint.abci.IRequestInfo} message RequestInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                if (message.block_version != null && Object.hasOwnProperty.call(message, "block_version"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.block_version);
                if (message.p2p_version != null && Object.hasOwnProperty.call(message, "p2p_version"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.p2p_version);
                return writer;
            };

            /**
             * Encodes the specified RequestInfo message, length delimited. Does not implicitly {@link tendermint.abci.RequestInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {tendermint.abci.IRequestInfo} message RequestInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestInfo} RequestInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.version = reader.string();
                        break;
                    case 2:
                        message.block_version = reader.uint64();
                        break;
                    case 3:
                        message.p2p_version = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestInfo} RequestInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestInfo message.
             * @function verify
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.version != null && message.hasOwnProperty("version"))
                    if (!$util.isString(message.version))
                        return "version: string expected";
                if (message.block_version != null && message.hasOwnProperty("block_version"))
                    if (!$util.isInteger(message.block_version) && !(message.block_version && $util.isInteger(message.block_version.low) && $util.isInteger(message.block_version.high)))
                        return "block_version: integer|Long expected";
                if (message.p2p_version != null && message.hasOwnProperty("p2p_version"))
                    if (!$util.isInteger(message.p2p_version) && !(message.p2p_version && $util.isInteger(message.p2p_version.low) && $util.isInteger(message.p2p_version.high)))
                        return "p2p_version: integer|Long expected";
                return null;
            };

            /**
             * Creates a RequestInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestInfo} RequestInfo
             */
            RequestInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestInfo)
                    return object;
                let message = new $root.tendermint.abci.RequestInfo();
                if (object.version != null)
                    message.version = String(object.version);
                if (object.block_version != null)
                    if ($util.Long)
                        (message.block_version = $util.Long.fromValue(object.block_version)).unsigned = true;
                    else if (typeof object.block_version === "string")
                        message.block_version = parseInt(object.block_version, 10);
                    else if (typeof object.block_version === "number")
                        message.block_version = object.block_version;
                    else if (typeof object.block_version === "object")
                        message.block_version = new $util.LongBits(object.block_version.low >>> 0, object.block_version.high >>> 0).toNumber(true);
                if (object.p2p_version != null)
                    if ($util.Long)
                        (message.p2p_version = $util.Long.fromValue(object.p2p_version)).unsigned = true;
                    else if (typeof object.p2p_version === "string")
                        message.p2p_version = parseInt(object.p2p_version, 10);
                    else if (typeof object.p2p_version === "number")
                        message.p2p_version = object.p2p_version;
                    else if (typeof object.p2p_version === "object")
                        message.p2p_version = new $util.LongBits(object.p2p_version.low >>> 0, object.p2p_version.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a RequestInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestInfo
             * @static
             * @param {tendermint.abci.RequestInfo} message RequestInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.version = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.block_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_version = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.p2p_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.p2p_version = options.longs === String ? "0" : 0;
                }
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = message.version;
                if (message.block_version != null && message.hasOwnProperty("block_version"))
                    if (typeof message.block_version === "number")
                        object.block_version = options.longs === String ? String(message.block_version) : message.block_version;
                    else
                        object.block_version = options.longs === String ? $util.Long.prototype.toString.call(message.block_version) : options.longs === Number ? new $util.LongBits(message.block_version.low >>> 0, message.block_version.high >>> 0).toNumber(true) : message.block_version;
                if (message.p2p_version != null && message.hasOwnProperty("p2p_version"))
                    if (typeof message.p2p_version === "number")
                        object.p2p_version = options.longs === String ? String(message.p2p_version) : message.p2p_version;
                    else
                        object.p2p_version = options.longs === String ? $util.Long.prototype.toString.call(message.p2p_version) : options.longs === Number ? new $util.LongBits(message.p2p_version.low >>> 0, message.p2p_version.high >>> 0).toNumber(true) : message.p2p_version;
                return object;
            };

            /**
             * Converts this RequestInfo to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestInfo;
        })();

        abci.RequestSetOption = (function() {

            /**
             * Properties of a RequestSetOption.
             * @memberof tendermint.abci
             * @interface IRequestSetOption
             * @property {string|null} [key] RequestSetOption key
             * @property {string|null} [value] RequestSetOption value
             */

            /**
             * Constructs a new RequestSetOption.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestSetOption.
             * @implements IRequestSetOption
             * @constructor
             * @param {tendermint.abci.IRequestSetOption=} [properties] Properties to set
             */
            function RequestSetOption(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestSetOption key.
             * @member {string} key
             * @memberof tendermint.abci.RequestSetOption
             * @instance
             */
            RequestSetOption.prototype.key = "";

            /**
             * RequestSetOption value.
             * @member {string} value
             * @memberof tendermint.abci.RequestSetOption
             * @instance
             */
            RequestSetOption.prototype.value = "";

            /**
             * Encodes the specified RequestSetOption message. Does not implicitly {@link tendermint.abci.RequestSetOption.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {tendermint.abci.IRequestSetOption} message RequestSetOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestSetOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };

            /**
             * Encodes the specified RequestSetOption message, length delimited. Does not implicitly {@link tendermint.abci.RequestSetOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {tendermint.abci.IRequestSetOption} message RequestSetOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestSetOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestSetOption message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestSetOption} RequestSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestSetOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestSetOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestSetOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestSetOption} RequestSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestSetOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestSetOption message.
             * @function verify
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestSetOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };

            /**
             * Creates a RequestSetOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestSetOption} RequestSetOption
             */
            RequestSetOption.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestSetOption)
                    return object;
                let message = new $root.tendermint.abci.RequestSetOption();
                if (object.key != null)
                    message.key = String(object.key);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };

            /**
             * Creates a plain object from a RequestSetOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestSetOption
             * @static
             * @param {tendermint.abci.RequestSetOption} message RequestSetOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestSetOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.key = "";
                    object.value = "";
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            /**
             * Converts this RequestSetOption to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestSetOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestSetOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestSetOption;
        })();

        abci.RequestInitChain = (function() {

            /**
             * Properties of a RequestInitChain.
             * @memberof tendermint.abci
             * @interface IRequestInitChain
             * @property {google.protobuf.ITimestamp|null} [time] RequestInitChain time
             * @property {string|null} [chain_id] RequestInitChain chain_id
             * @property {tendermint.abci.IConsensusParams|null} [consensus_params] RequestInitChain consensus_params
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validators] RequestInitChain validators
             * @property {Uint8Array|null} [app_state_bytes] RequestInitChain app_state_bytes
             * @property {number|null} [initial_height] RequestInitChain initial_height
             */

            /**
             * Constructs a new RequestInitChain.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestInitChain.
             * @implements IRequestInitChain
             * @constructor
             * @param {tendermint.abci.IRequestInitChain=} [properties] Properties to set
             */
            function RequestInitChain(properties) {
                this.validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestInitChain time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.time = null;

            /**
             * RequestInitChain chain_id.
             * @member {string} chain_id
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.chain_id = "";

            /**
             * RequestInitChain consensus_params.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_params
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.consensus_params = null;

            /**
             * RequestInitChain validators.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validators
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.validators = $util.emptyArray;

            /**
             * RequestInitChain app_state_bytes.
             * @member {Uint8Array} app_state_bytes
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.app_state_bytes = $util.newBuffer([]);

            /**
             * RequestInitChain initial_height.
             * @member {number} initial_height
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             */
            RequestInitChain.prototype.initial_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified RequestInitChain message. Does not implicitly {@link tendermint.abci.RequestInitChain.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {tendermint.abci.IRequestInitChain} message RequestInitChain message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInitChain.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                if (message.consensus_params != null && Object.hasOwnProperty.call(message, "consensus_params"))
                    $root.tendermint.abci.ConsensusParams.encode(message.consensus_params, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.validators != null && message.validators.length)
                    for (let i = 0; i < message.validators.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(message.validators[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.app_state_bytes != null && Object.hasOwnProperty.call(message, "app_state_bytes"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.app_state_bytes);
                if (message.initial_height != null && Object.hasOwnProperty.call(message, "initial_height"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.initial_height);
                return writer;
            };

            /**
             * Encodes the specified RequestInitChain message, length delimited. Does not implicitly {@link tendermint.abci.RequestInitChain.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {tendermint.abci.IRequestInitChain} message RequestInitChain message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestInitChain.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestInitChain message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestInitChain} RequestInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInitChain.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestInitChain();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.chain_id = reader.string();
                        break;
                    case 3:
                        message.consensus_params = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.validators && message.validators.length))
                            message.validators = [];
                        message.validators.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.app_state_bytes = reader.bytes();
                        break;
                    case 6:
                        message.initial_height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestInitChain message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestInitChain} RequestInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestInitChain.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestInitChain message.
             * @function verify
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestInitChain.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.time != null && message.hasOwnProperty("time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.time);
                    if (error)
                        return "time." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params")) {
                    let error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_params);
                    if (error)
                        return "consensus_params." + error;
                }
                if (message.validators != null && message.hasOwnProperty("validators")) {
                    if (!Array.isArray(message.validators))
                        return "validators: array expected";
                    for (let i = 0; i < message.validators.length; ++i) {
                        let error = $root.tendermint.abci.ValidatorUpdate.verify(message.validators[i]);
                        if (error)
                            return "validators." + error;
                    }
                }
                if (message.app_state_bytes != null && message.hasOwnProperty("app_state_bytes"))
                    if (!(message.app_state_bytes && typeof message.app_state_bytes.length === "number" || $util.isString(message.app_state_bytes)))
                        return "app_state_bytes: buffer expected";
                if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                    if (!$util.isInteger(message.initial_height) && !(message.initial_height && $util.isInteger(message.initial_height.low) && $util.isInteger(message.initial_height.high)))
                        return "initial_height: integer|Long expected";
                return null;
            };

            /**
             * Creates a RequestInitChain message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestInitChain} RequestInitChain
             */
            RequestInitChain.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestInitChain)
                    return object;
                let message = new $root.tendermint.abci.RequestInitChain();
                if (object.time != null) {
                    if (typeof object.time !== "object")
                        throw TypeError(".tendermint.abci.RequestInitChain.time: object expected");
                    message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                if (object.consensus_params != null) {
                    if (typeof object.consensus_params !== "object")
                        throw TypeError(".tendermint.abci.RequestInitChain.consensus_params: object expected");
                    message.consensus_params = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_params);
                }
                if (object.validators) {
                    if (!Array.isArray(object.validators))
                        throw TypeError(".tendermint.abci.RequestInitChain.validators: array expected");
                    message.validators = [];
                    for (let i = 0; i < object.validators.length; ++i) {
                        if (typeof object.validators[i] !== "object")
                            throw TypeError(".tendermint.abci.RequestInitChain.validators: object expected");
                        message.validators[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validators[i]);
                    }
                }
                if (object.app_state_bytes != null)
                    if (typeof object.app_state_bytes === "string")
                        $util.base64.decode(object.app_state_bytes, message.app_state_bytes = $util.newBuffer($util.base64.length(object.app_state_bytes)), 0);
                    else if (object.app_state_bytes.length)
                        message.app_state_bytes = object.app_state_bytes;
                if (object.initial_height != null)
                    if ($util.Long)
                        (message.initial_height = $util.Long.fromValue(object.initial_height)).unsigned = false;
                    else if (typeof object.initial_height === "string")
                        message.initial_height = parseInt(object.initial_height, 10);
                    else if (typeof object.initial_height === "number")
                        message.initial_height = object.initial_height;
                    else if (typeof object.initial_height === "object")
                        message.initial_height = new $util.LongBits(object.initial_height.low >>> 0, object.initial_height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a RequestInitChain message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestInitChain
             * @static
             * @param {tendermint.abci.RequestInitChain} message RequestInitChain
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestInitChain.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.validators = [];
                if (options.defaults) {
                    object.time = null;
                    object.chain_id = "";
                    object.consensus_params = null;
                    if (options.bytes === String)
                        object.app_state_bytes = "";
                    else {
                        object.app_state_bytes = [];
                        if (options.bytes !== Array)
                            object.app_state_bytes = $util.newBuffer(object.app_state_bytes);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.initial_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.initial_height = options.longs === String ? "0" : 0;
                }
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params"))
                    object.consensus_params = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_params, options);
                if (message.validators && message.validators.length) {
                    object.validators = [];
                    for (let j = 0; j < message.validators.length; ++j)
                        object.validators[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validators[j], options);
                }
                if (message.app_state_bytes != null && message.hasOwnProperty("app_state_bytes"))
                    object.app_state_bytes = options.bytes === String ? $util.base64.encode(message.app_state_bytes, 0, message.app_state_bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_state_bytes) : message.app_state_bytes;
                if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                    if (typeof message.initial_height === "number")
                        object.initial_height = options.longs === String ? String(message.initial_height) : message.initial_height;
                    else
                        object.initial_height = options.longs === String ? $util.Long.prototype.toString.call(message.initial_height) : options.longs === Number ? new $util.LongBits(message.initial_height.low >>> 0, message.initial_height.high >>> 0).toNumber() : message.initial_height;
                return object;
            };

            /**
             * Converts this RequestInitChain to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestInitChain
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestInitChain.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestInitChain;
        })();

        abci.RequestQuery = (function() {

            /**
             * Properties of a RequestQuery.
             * @memberof tendermint.abci
             * @interface IRequestQuery
             * @property {Uint8Array|null} [data] RequestQuery data
             * @property {string|null} [path] RequestQuery path
             * @property {number|null} [height] RequestQuery height
             * @property {boolean|null} [prove] RequestQuery prove
             */

            /**
             * Constructs a new RequestQuery.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestQuery.
             * @implements IRequestQuery
             * @constructor
             * @param {tendermint.abci.IRequestQuery=} [properties] Properties to set
             */
            function RequestQuery(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestQuery data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.data = $util.newBuffer([]);

            /**
             * RequestQuery path.
             * @member {string} path
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.path = "";

            /**
             * RequestQuery height.
             * @member {number} height
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RequestQuery prove.
             * @member {boolean} prove
             * @memberof tendermint.abci.RequestQuery
             * @instance
             */
            RequestQuery.prototype.prove = false;

            /**
             * Encodes the specified RequestQuery message. Does not implicitly {@link tendermint.abci.RequestQuery.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {tendermint.abci.IRequestQuery} message RequestQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                if (message.prove != null && Object.hasOwnProperty.call(message, "prove"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.prove);
                return writer;
            };

            /**
             * Encodes the specified RequestQuery message, length delimited. Does not implicitly {@link tendermint.abci.RequestQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {tendermint.abci.IRequestQuery} message RequestQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestQuery message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestQuery} RequestQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestQuery();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.data = reader.bytes();
                        break;
                    case 2:
                        message.path = reader.string();
                        break;
                    case 3:
                        message.height = reader.int64();
                        break;
                    case 4:
                        message.prove = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestQuery} RequestQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestQuery message.
             * @function verify
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.prove != null && message.hasOwnProperty("prove"))
                    if (typeof message.prove !== "boolean")
                        return "prove: boolean expected";
                return null;
            };

            /**
             * Creates a RequestQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestQuery} RequestQuery
             */
            RequestQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestQuery)
                    return object;
                let message = new $root.tendermint.abci.RequestQuery();
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.path != null)
                    message.path = String(object.path);
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.prove != null)
                    message.prove = Boolean(object.prove);
                return message;
            };

            /**
             * Creates a plain object from a RequestQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestQuery
             * @static
             * @param {tendermint.abci.RequestQuery} message RequestQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.path = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.prove = false;
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.prove != null && message.hasOwnProperty("prove"))
                    object.prove = message.prove;
                return object;
            };

            /**
             * Converts this RequestQuery to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestQuery;
        })();

        abci.RequestBeginBlock = (function() {

            /**
             * Properties of a RequestBeginBlock.
             * @memberof tendermint.abci
             * @interface IRequestBeginBlock
             * @property {Uint8Array|null} [hash] RequestBeginBlock hash
             * @property {tendermint.types.IHeader|null} [header] RequestBeginBlock header
             * @property {tendermint.abci.ILastCommitInfo|null} [last_commit_info] RequestBeginBlock last_commit_info
             * @property {Array.<tendermint.abci.IEvidence>|null} [byzantine_validators] RequestBeginBlock byzantine_validators
             */

            /**
             * Constructs a new RequestBeginBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestBeginBlock.
             * @implements IRequestBeginBlock
             * @constructor
             * @param {tendermint.abci.IRequestBeginBlock=} [properties] Properties to set
             */
            function RequestBeginBlock(properties) {
                this.byzantine_validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestBeginBlock hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.hash = $util.newBuffer([]);

            /**
             * RequestBeginBlock header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.header = null;

            /**
             * RequestBeginBlock last_commit_info.
             * @member {tendermint.abci.ILastCommitInfo|null|undefined} last_commit_info
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.last_commit_info = null;

            /**
             * RequestBeginBlock byzantine_validators.
             * @member {Array.<tendermint.abci.IEvidence>} byzantine_validators
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             */
            RequestBeginBlock.prototype.byzantine_validators = $util.emptyArray;

            /**
             * Encodes the specified RequestBeginBlock message. Does not implicitly {@link tendermint.abci.RequestBeginBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {tendermint.abci.IRequestBeginBlock} message RequestBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestBeginBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.last_commit_info != null && Object.hasOwnProperty.call(message, "last_commit_info"))
                    $root.tendermint.abci.LastCommitInfo.encode(message.last_commit_info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.byzantine_validators != null && message.byzantine_validators.length)
                    for (let i = 0; i < message.byzantine_validators.length; ++i)
                        $root.tendermint.abci.Evidence.encode(message.byzantine_validators[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RequestBeginBlock message, length delimited. Does not implicitly {@link tendermint.abci.RequestBeginBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {tendermint.abci.IRequestBeginBlock} message RequestBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestBeginBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestBeginBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestBeginBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestBeginBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    case 2:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.last_commit_info = $root.tendermint.abci.LastCommitInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.byzantine_validators && message.byzantine_validators.length))
                            message.byzantine_validators = [];
                        message.byzantine_validators.push($root.tendermint.abci.Evidence.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestBeginBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestBeginBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestBeginBlock message.
             * @function verify
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestBeginBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.last_commit_info != null && message.hasOwnProperty("last_commit_info")) {
                    let error = $root.tendermint.abci.LastCommitInfo.verify(message.last_commit_info);
                    if (error)
                        return "last_commit_info." + error;
                }
                if (message.byzantine_validators != null && message.hasOwnProperty("byzantine_validators")) {
                    if (!Array.isArray(message.byzantine_validators))
                        return "byzantine_validators: array expected";
                    for (let i = 0; i < message.byzantine_validators.length; ++i) {
                        let error = $root.tendermint.abci.Evidence.verify(message.byzantine_validators[i]);
                        if (error)
                            return "byzantine_validators." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a RequestBeginBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
             */
            RequestBeginBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestBeginBlock)
                    return object;
                let message = new $root.tendermint.abci.RequestBeginBlock();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.abci.RequestBeginBlock.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.last_commit_info != null) {
                    if (typeof object.last_commit_info !== "object")
                        throw TypeError(".tendermint.abci.RequestBeginBlock.last_commit_info: object expected");
                    message.last_commit_info = $root.tendermint.abci.LastCommitInfo.fromObject(object.last_commit_info);
                }
                if (object.byzantine_validators) {
                    if (!Array.isArray(object.byzantine_validators))
                        throw TypeError(".tendermint.abci.RequestBeginBlock.byzantine_validators: array expected");
                    message.byzantine_validators = [];
                    for (let i = 0; i < object.byzantine_validators.length; ++i) {
                        if (typeof object.byzantine_validators[i] !== "object")
                            throw TypeError(".tendermint.abci.RequestBeginBlock.byzantine_validators: object expected");
                        message.byzantine_validators[i] = $root.tendermint.abci.Evidence.fromObject(object.byzantine_validators[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a RequestBeginBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestBeginBlock
             * @static
             * @param {tendermint.abci.RequestBeginBlock} message RequestBeginBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestBeginBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.byzantine_validators = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.header = null;
                    object.last_commit_info = null;
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.last_commit_info != null && message.hasOwnProperty("last_commit_info"))
                    object.last_commit_info = $root.tendermint.abci.LastCommitInfo.toObject(message.last_commit_info, options);
                if (message.byzantine_validators && message.byzantine_validators.length) {
                    object.byzantine_validators = [];
                    for (let j = 0; j < message.byzantine_validators.length; ++j)
                        object.byzantine_validators[j] = $root.tendermint.abci.Evidence.toObject(message.byzantine_validators[j], options);
                }
                return object;
            };

            /**
             * Converts this RequestBeginBlock to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestBeginBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestBeginBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestBeginBlock;
        })();

        /**
         * CheckTxType enum.
         * @name tendermint.abci.CheckTxType
         * @enum {number}
         * @property {number} NEW=0 NEW value
         * @property {number} RECHECK=1 RECHECK value
         */
        abci.CheckTxType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NEW"] = 0;
            values[valuesById[1] = "RECHECK"] = 1;
            return values;
        })();

        abci.RequestCheckTx = (function() {

            /**
             * Properties of a RequestCheckTx.
             * @memberof tendermint.abci
             * @interface IRequestCheckTx
             * @property {Uint8Array|null} [tx] RequestCheckTx tx
             * @property {tendermint.abci.CheckTxType|null} [type] RequestCheckTx type
             */

            /**
             * Constructs a new RequestCheckTx.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestCheckTx.
             * @implements IRequestCheckTx
             * @constructor
             * @param {tendermint.abci.IRequestCheckTx=} [properties] Properties to set
             */
            function RequestCheckTx(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestCheckTx tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.RequestCheckTx
             * @instance
             */
            RequestCheckTx.prototype.tx = $util.newBuffer([]);

            /**
             * RequestCheckTx type.
             * @member {tendermint.abci.CheckTxType} type
             * @memberof tendermint.abci.RequestCheckTx
             * @instance
             */
            RequestCheckTx.prototype.type = 0;

            /**
             * Encodes the specified RequestCheckTx message. Does not implicitly {@link tendermint.abci.RequestCheckTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {tendermint.abci.IRequestCheckTx} message RequestCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCheckTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.tx);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                return writer;
            };

            /**
             * Encodes the specified RequestCheckTx message, length delimited. Does not implicitly {@link tendermint.abci.RequestCheckTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {tendermint.abci.IRequestCheckTx} message RequestCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCheckTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestCheckTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCheckTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestCheckTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tx = reader.bytes();
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestCheckTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCheckTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestCheckTx message.
             * @function verify
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestCheckTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tx != null && message.hasOwnProperty("tx"))
                    if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                        return "tx: buffer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates a RequestCheckTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
             */
            RequestCheckTx.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestCheckTx)
                    return object;
                let message = new $root.tendermint.abci.RequestCheckTx();
                if (object.tx != null)
                    if (typeof object.tx === "string")
                        $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                    else if (object.tx.length)
                        message.tx = object.tx;
                switch (object.type) {
                case "NEW":
                case 0:
                    message.type = 0;
                    break;
                case "RECHECK":
                case 1:
                    message.type = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RequestCheckTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestCheckTx
             * @static
             * @param {tendermint.abci.RequestCheckTx} message RequestCheckTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestCheckTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.tx = "";
                    else {
                        object.tx = [];
                        if (options.bytes !== Array)
                            object.tx = $util.newBuffer(object.tx);
                    }
                    object.type = options.enums === String ? "NEW" : 0;
                }
                if (message.tx != null && message.hasOwnProperty("tx"))
                    object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.abci.CheckTxType[message.type] : message.type;
                return object;
            };

            /**
             * Converts this RequestCheckTx to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestCheckTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestCheckTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestCheckTx;
        })();

        abci.RequestDeliverTx = (function() {

            /**
             * Properties of a RequestDeliverTx.
             * @memberof tendermint.abci
             * @interface IRequestDeliverTx
             * @property {Uint8Array|null} [tx] RequestDeliverTx tx
             */

            /**
             * Constructs a new RequestDeliverTx.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestDeliverTx.
             * @implements IRequestDeliverTx
             * @constructor
             * @param {tendermint.abci.IRequestDeliverTx=} [properties] Properties to set
             */
            function RequestDeliverTx(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestDeliverTx tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.RequestDeliverTx
             * @instance
             */
            RequestDeliverTx.prototype.tx = $util.newBuffer([]);

            /**
             * Encodes the specified RequestDeliverTx message. Does not implicitly {@link tendermint.abci.RequestDeliverTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {tendermint.abci.IRequestDeliverTx} message RequestDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestDeliverTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.tx);
                return writer;
            };

            /**
             * Encodes the specified RequestDeliverTx message, length delimited. Does not implicitly {@link tendermint.abci.RequestDeliverTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {tendermint.abci.IRequestDeliverTx} message RequestDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestDeliverTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestDeliverTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestDeliverTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestDeliverTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tx = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestDeliverTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestDeliverTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestDeliverTx message.
             * @function verify
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestDeliverTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tx != null && message.hasOwnProperty("tx"))
                    if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                        return "tx: buffer expected";
                return null;
            };

            /**
             * Creates a RequestDeliverTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
             */
            RequestDeliverTx.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestDeliverTx)
                    return object;
                let message = new $root.tendermint.abci.RequestDeliverTx();
                if (object.tx != null)
                    if (typeof object.tx === "string")
                        $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                    else if (object.tx.length)
                        message.tx = object.tx;
                return message;
            };

            /**
             * Creates a plain object from a RequestDeliverTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestDeliverTx
             * @static
             * @param {tendermint.abci.RequestDeliverTx} message RequestDeliverTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestDeliverTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.tx = "";
                    else {
                        object.tx = [];
                        if (options.bytes !== Array)
                            object.tx = $util.newBuffer(object.tx);
                    }
                if (message.tx != null && message.hasOwnProperty("tx"))
                    object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                return object;
            };

            /**
             * Converts this RequestDeliverTx to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestDeliverTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestDeliverTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestDeliverTx;
        })();

        abci.RequestEndBlock = (function() {

            /**
             * Properties of a RequestEndBlock.
             * @memberof tendermint.abci
             * @interface IRequestEndBlock
             * @property {number|null} [height] RequestEndBlock height
             */

            /**
             * Constructs a new RequestEndBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestEndBlock.
             * @implements IRequestEndBlock
             * @constructor
             * @param {tendermint.abci.IRequestEndBlock=} [properties] Properties to set
             */
            function RequestEndBlock(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestEndBlock height.
             * @member {number} height
             * @memberof tendermint.abci.RequestEndBlock
             * @instance
             */
            RequestEndBlock.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified RequestEndBlock message. Does not implicitly {@link tendermint.abci.RequestEndBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {tendermint.abci.IRequestEndBlock} message RequestEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEndBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                return writer;
            };

            /**
             * Encodes the specified RequestEndBlock message, length delimited. Does not implicitly {@link tendermint.abci.RequestEndBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {tendermint.abci.IRequestEndBlock} message RequestEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestEndBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestEndBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEndBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestEndBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestEndBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestEndBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestEndBlock message.
             * @function verify
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestEndBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                return null;
            };

            /**
             * Creates a RequestEndBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
             */
            RequestEndBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestEndBlock)
                    return object;
                let message = new $root.tendermint.abci.RequestEndBlock();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a RequestEndBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestEndBlock
             * @static
             * @param {tendermint.abci.RequestEndBlock} message RequestEndBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestEndBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                return object;
            };

            /**
             * Converts this RequestEndBlock to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestEndBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestEndBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestEndBlock;
        })();

        abci.RequestCommit = (function() {

            /**
             * Properties of a RequestCommit.
             * @memberof tendermint.abci
             * @interface IRequestCommit
             */

            /**
             * Constructs a new RequestCommit.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestCommit.
             * @implements IRequestCommit
             * @constructor
             * @param {tendermint.abci.IRequestCommit=} [properties] Properties to set
             */
            function RequestCommit(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified RequestCommit message. Does not implicitly {@link tendermint.abci.RequestCommit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {tendermint.abci.IRequestCommit} message RequestCommit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCommit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified RequestCommit message, length delimited. Does not implicitly {@link tendermint.abci.RequestCommit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {tendermint.abci.IRequestCommit} message RequestCommit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestCommit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestCommit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestCommit} RequestCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCommit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestCommit();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestCommit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestCommit} RequestCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestCommit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestCommit message.
             * @function verify
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestCommit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a RequestCommit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestCommit} RequestCommit
             */
            RequestCommit.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestCommit)
                    return object;
                return new $root.tendermint.abci.RequestCommit();
            };

            /**
             * Creates a plain object from a RequestCommit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestCommit
             * @static
             * @param {tendermint.abci.RequestCommit} message RequestCommit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestCommit.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this RequestCommit to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestCommit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestCommit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestCommit;
        })();

        abci.RequestListSnapshots = (function() {

            /**
             * Properties of a RequestListSnapshots.
             * @memberof tendermint.abci
             * @interface IRequestListSnapshots
             */

            /**
             * Constructs a new RequestListSnapshots.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestListSnapshots.
             * @implements IRequestListSnapshots
             * @constructor
             * @param {tendermint.abci.IRequestListSnapshots=} [properties] Properties to set
             */
            function RequestListSnapshots(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified RequestListSnapshots message. Does not implicitly {@link tendermint.abci.RequestListSnapshots.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {tendermint.abci.IRequestListSnapshots} message RequestListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestListSnapshots.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified RequestListSnapshots message, length delimited. Does not implicitly {@link tendermint.abci.RequestListSnapshots.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {tendermint.abci.IRequestListSnapshots} message RequestListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestListSnapshots.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestListSnapshots message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestListSnapshots.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestListSnapshots();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestListSnapshots message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestListSnapshots.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestListSnapshots message.
             * @function verify
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestListSnapshots.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a RequestListSnapshots message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
             */
            RequestListSnapshots.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestListSnapshots)
                    return object;
                return new $root.tendermint.abci.RequestListSnapshots();
            };

            /**
             * Creates a plain object from a RequestListSnapshots message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestListSnapshots
             * @static
             * @param {tendermint.abci.RequestListSnapshots} message RequestListSnapshots
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestListSnapshots.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this RequestListSnapshots to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestListSnapshots
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestListSnapshots.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestListSnapshots;
        })();

        abci.RequestOfferSnapshot = (function() {

            /**
             * Properties of a RequestOfferSnapshot.
             * @memberof tendermint.abci
             * @interface IRequestOfferSnapshot
             * @property {tendermint.abci.ISnapshot|null} [snapshot] RequestOfferSnapshot snapshot
             * @property {Uint8Array|null} [app_hash] RequestOfferSnapshot app_hash
             */

            /**
             * Constructs a new RequestOfferSnapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestOfferSnapshot.
             * @implements IRequestOfferSnapshot
             * @constructor
             * @param {tendermint.abci.IRequestOfferSnapshot=} [properties] Properties to set
             */
            function RequestOfferSnapshot(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestOfferSnapshot snapshot.
             * @member {tendermint.abci.ISnapshot|null|undefined} snapshot
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @instance
             */
            RequestOfferSnapshot.prototype.snapshot = null;

            /**
             * RequestOfferSnapshot app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @instance
             */
            RequestOfferSnapshot.prototype.app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified RequestOfferSnapshot message. Does not implicitly {@link tendermint.abci.RequestOfferSnapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {tendermint.abci.IRequestOfferSnapshot} message RequestOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestOfferSnapshot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.snapshot != null && Object.hasOwnProperty.call(message, "snapshot"))
                    $root.tendermint.abci.Snapshot.encode(message.snapshot, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.app_hash);
                return writer;
            };

            /**
             * Encodes the specified RequestOfferSnapshot message, length delimited. Does not implicitly {@link tendermint.abci.RequestOfferSnapshot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {tendermint.abci.IRequestOfferSnapshot} message RequestOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestOfferSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestOfferSnapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestOfferSnapshot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestOfferSnapshot();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.snapshot = $root.tendermint.abci.Snapshot.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.app_hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestOfferSnapshot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestOfferSnapshot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestOfferSnapshot message.
             * @function verify
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestOfferSnapshot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                    let error = $root.tendermint.abci.Snapshot.verify(message.snapshot);
                    if (error)
                        return "snapshot." + error;
                }
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                        return "app_hash: buffer expected";
                return null;
            };

            /**
             * Creates a RequestOfferSnapshot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
             */
            RequestOfferSnapshot.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestOfferSnapshot)
                    return object;
                let message = new $root.tendermint.abci.RequestOfferSnapshot();
                if (object.snapshot != null) {
                    if (typeof object.snapshot !== "object")
                        throw TypeError(".tendermint.abci.RequestOfferSnapshot.snapshot: object expected");
                    message.snapshot = $root.tendermint.abci.Snapshot.fromObject(object.snapshot);
                }
                if (object.app_hash != null)
                    if (typeof object.app_hash === "string")
                        $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                    else if (object.app_hash.length)
                        message.app_hash = object.app_hash;
                return message;
            };

            /**
             * Creates a plain object from a RequestOfferSnapshot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @static
             * @param {tendermint.abci.RequestOfferSnapshot} message RequestOfferSnapshot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestOfferSnapshot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.snapshot = null;
                    if (options.bytes === String)
                        object.app_hash = "";
                    else {
                        object.app_hash = [];
                        if (options.bytes !== Array)
                            object.app_hash = $util.newBuffer(object.app_hash);
                    }
                }
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    object.snapshot = $root.tendermint.abci.Snapshot.toObject(message.snapshot, options);
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                return object;
            };

            /**
             * Converts this RequestOfferSnapshot to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestOfferSnapshot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestOfferSnapshot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestOfferSnapshot;
        })();

        abci.RequestLoadSnapshotChunk = (function() {

            /**
             * Properties of a RequestLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @interface IRequestLoadSnapshotChunk
             * @property {number|null} [height] RequestLoadSnapshotChunk height
             * @property {number|null} [format] RequestLoadSnapshotChunk format
             * @property {number|null} [chunk] RequestLoadSnapshotChunk chunk
             */

            /**
             * Constructs a new RequestLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestLoadSnapshotChunk.
             * @implements IRequestLoadSnapshotChunk
             * @constructor
             * @param {tendermint.abci.IRequestLoadSnapshotChunk=} [properties] Properties to set
             */
            function RequestLoadSnapshotChunk(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestLoadSnapshotChunk height.
             * @member {number} height
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * RequestLoadSnapshotChunk format.
             * @member {number} format
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.format = 0;

            /**
             * RequestLoadSnapshotChunk chunk.
             * @member {number} chunk
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             */
            RequestLoadSnapshotChunk.prototype.chunk = 0;

            /**
             * Encodes the specified RequestLoadSnapshotChunk message. Does not implicitly {@link tendermint.abci.RequestLoadSnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} message RequestLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestLoadSnapshotChunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.chunk);
                return writer;
            };

            /**
             * Encodes the specified RequestLoadSnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.RequestLoadSnapshotChunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} message RequestLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestLoadSnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestLoadSnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestLoadSnapshotChunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestLoadSnapshotChunk();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.uint64();
                        break;
                    case 2:
                        message.format = reader.uint32();
                        break;
                    case 3:
                        message.chunk = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestLoadSnapshotChunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestLoadSnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestLoadSnapshotChunk message.
             * @function verify
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestLoadSnapshotChunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.format != null && message.hasOwnProperty("format"))
                    if (!$util.isInteger(message.format))
                        return "format: integer expected";
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    if (!$util.isInteger(message.chunk))
                        return "chunk: integer expected";
                return null;
            };

            /**
             * Creates a RequestLoadSnapshotChunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
             */
            RequestLoadSnapshotChunk.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestLoadSnapshotChunk)
                    return object;
                let message = new $root.tendermint.abci.RequestLoadSnapshotChunk();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.format != null)
                    message.format = object.format >>> 0;
                if (object.chunk != null)
                    message.chunk = object.chunk >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a RequestLoadSnapshotChunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.RequestLoadSnapshotChunk} message RequestLoadSnapshotChunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestLoadSnapshotChunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.format = 0;
                    object.chunk = 0;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.format != null && message.hasOwnProperty("format"))
                    object.format = message.format;
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    object.chunk = message.chunk;
                return object;
            };

            /**
             * Converts this RequestLoadSnapshotChunk to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestLoadSnapshotChunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestLoadSnapshotChunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestLoadSnapshotChunk;
        })();

        abci.RequestApplySnapshotChunk = (function() {

            /**
             * Properties of a RequestApplySnapshotChunk.
             * @memberof tendermint.abci
             * @interface IRequestApplySnapshotChunk
             * @property {number|null} [index] RequestApplySnapshotChunk index
             * @property {Uint8Array|null} [chunk] RequestApplySnapshotChunk chunk
             * @property {string|null} [sender] RequestApplySnapshotChunk sender
             */

            /**
             * Constructs a new RequestApplySnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a RequestApplySnapshotChunk.
             * @implements IRequestApplySnapshotChunk
             * @constructor
             * @param {tendermint.abci.IRequestApplySnapshotChunk=} [properties] Properties to set
             */
            function RequestApplySnapshotChunk(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestApplySnapshotChunk index.
             * @member {number} index
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.index = 0;

            /**
             * RequestApplySnapshotChunk chunk.
             * @member {Uint8Array} chunk
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.chunk = $util.newBuffer([]);

            /**
             * RequestApplySnapshotChunk sender.
             * @member {string} sender
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             */
            RequestApplySnapshotChunk.prototype.sender = "";

            /**
             * Encodes the specified RequestApplySnapshotChunk message. Does not implicitly {@link tendermint.abci.RequestApplySnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestApplySnapshotChunk} message RequestApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestApplySnapshotChunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.chunk);
                if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.sender);
                return writer;
            };

            /**
             * Encodes the specified RequestApplySnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.RequestApplySnapshotChunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IRequestApplySnapshotChunk} message RequestApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestApplySnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestApplySnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestApplySnapshotChunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestApplySnapshotChunk();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.chunk = reader.bytes();
                        break;
                    case 3:
                        message.sender = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestApplySnapshotChunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestApplySnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestApplySnapshotChunk message.
             * @function verify
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestApplySnapshotChunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    if (!(message.chunk && typeof message.chunk.length === "number" || $util.isString(message.chunk)))
                        return "chunk: buffer expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                return null;
            };

            /**
             * Creates a RequestApplySnapshotChunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
             */
            RequestApplySnapshotChunk.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.RequestApplySnapshotChunk)
                    return object;
                let message = new $root.tendermint.abci.RequestApplySnapshotChunk();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.chunk != null)
                    if (typeof object.chunk === "string")
                        $util.base64.decode(object.chunk, message.chunk = $util.newBuffer($util.base64.length(object.chunk)), 0);
                    else if (object.chunk.length)
                        message.chunk = object.chunk;
                if (object.sender != null)
                    message.sender = String(object.sender);
                return message;
            };

            /**
             * Creates a plain object from a RequestApplySnapshotChunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @static
             * @param {tendermint.abci.RequestApplySnapshotChunk} message RequestApplySnapshotChunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestApplySnapshotChunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.index = 0;
                    if (options.bytes === String)
                        object.chunk = "";
                    else {
                        object.chunk = [];
                        if (options.bytes !== Array)
                            object.chunk = $util.newBuffer(object.chunk);
                    }
                    object.sender = "";
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    object.chunk = options.bytes === String ? $util.base64.encode(message.chunk, 0, message.chunk.length) : options.bytes === Array ? Array.prototype.slice.call(message.chunk) : message.chunk;
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                return object;
            };

            /**
             * Converts this RequestApplySnapshotChunk to JSON.
             * @function toJSON
             * @memberof tendermint.abci.RequestApplySnapshotChunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestApplySnapshotChunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RequestApplySnapshotChunk;
        })();

        abci.Response = (function() {

            /**
             * Properties of a Response.
             * @memberof tendermint.abci
             * @interface IResponse
             * @property {tendermint.abci.IResponseException|null} [exception] Response exception
             * @property {tendermint.abci.IResponseEcho|null} [echo] Response echo
             * @property {tendermint.abci.IResponseFlush|null} [flush] Response flush
             * @property {tendermint.abci.IResponseInfo|null} [info] Response info
             * @property {tendermint.abci.IResponseSetOption|null} [set_option] Response set_option
             * @property {tendermint.abci.IResponseInitChain|null} [init_chain] Response init_chain
             * @property {tendermint.abci.IResponseQuery|null} [query] Response query
             * @property {tendermint.abci.IResponseBeginBlock|null} [begin_block] Response begin_block
             * @property {tendermint.abci.IResponseCheckTx|null} [check_tx] Response check_tx
             * @property {tendermint.abci.IResponseDeliverTx|null} [deliver_tx] Response deliver_tx
             * @property {tendermint.abci.IResponseEndBlock|null} [end_block] Response end_block
             * @property {tendermint.abci.IResponseCommit|null} [commit] Response commit
             * @property {tendermint.abci.IResponseListSnapshots|null} [list_snapshots] Response list_snapshots
             * @property {tendermint.abci.IResponseOfferSnapshot|null} [offer_snapshot] Response offer_snapshot
             * @property {tendermint.abci.IResponseLoadSnapshotChunk|null} [load_snapshot_chunk] Response load_snapshot_chunk
             * @property {tendermint.abci.IResponseApplySnapshotChunk|null} [apply_snapshot_chunk] Response apply_snapshot_chunk
             */

            /**
             * Constructs a new Response.
             * @memberof tendermint.abci
             * @classdesc Represents a Response.
             * @implements IResponse
             * @constructor
             * @param {tendermint.abci.IResponse=} [properties] Properties to set
             */
            function Response(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Response exception.
             * @member {tendermint.abci.IResponseException|null|undefined} exception
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.exception = null;

            /**
             * Response echo.
             * @member {tendermint.abci.IResponseEcho|null|undefined} echo
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.echo = null;

            /**
             * Response flush.
             * @member {tendermint.abci.IResponseFlush|null|undefined} flush
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.flush = null;

            /**
             * Response info.
             * @member {tendermint.abci.IResponseInfo|null|undefined} info
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.info = null;

            /**
             * Response set_option.
             * @member {tendermint.abci.IResponseSetOption|null|undefined} set_option
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.set_option = null;

            /**
             * Response init_chain.
             * @member {tendermint.abci.IResponseInitChain|null|undefined} init_chain
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.init_chain = null;

            /**
             * Response query.
             * @member {tendermint.abci.IResponseQuery|null|undefined} query
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.query = null;

            /**
             * Response begin_block.
             * @member {tendermint.abci.IResponseBeginBlock|null|undefined} begin_block
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.begin_block = null;

            /**
             * Response check_tx.
             * @member {tendermint.abci.IResponseCheckTx|null|undefined} check_tx
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.check_tx = null;

            /**
             * Response deliver_tx.
             * @member {tendermint.abci.IResponseDeliverTx|null|undefined} deliver_tx
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.deliver_tx = null;

            /**
             * Response end_block.
             * @member {tendermint.abci.IResponseEndBlock|null|undefined} end_block
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.end_block = null;

            /**
             * Response commit.
             * @member {tendermint.abci.IResponseCommit|null|undefined} commit
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.commit = null;

            /**
             * Response list_snapshots.
             * @member {tendermint.abci.IResponseListSnapshots|null|undefined} list_snapshots
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.list_snapshots = null;

            /**
             * Response offer_snapshot.
             * @member {tendermint.abci.IResponseOfferSnapshot|null|undefined} offer_snapshot
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.offer_snapshot = null;

            /**
             * Response load_snapshot_chunk.
             * @member {tendermint.abci.IResponseLoadSnapshotChunk|null|undefined} load_snapshot_chunk
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.load_snapshot_chunk = null;

            /**
             * Response apply_snapshot_chunk.
             * @member {tendermint.abci.IResponseApplySnapshotChunk|null|undefined} apply_snapshot_chunk
             * @memberof tendermint.abci.Response
             * @instance
             */
            Response.prototype.apply_snapshot_chunk = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Response value.
             * @member {"exception"|"echo"|"flush"|"info"|"set_option"|"init_chain"|"query"|"begin_block"|"check_tx"|"deliver_tx"|"end_block"|"commit"|"list_snapshots"|"offer_snapshot"|"load_snapshot_chunk"|"apply_snapshot_chunk"|undefined} value
             * @memberof tendermint.abci.Response
             * @instance
             */
            Object.defineProperty(Response.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["exception", "echo", "flush", "info", "set_option", "init_chain", "query", "begin_block", "check_tx", "deliver_tx", "end_block", "commit", "list_snapshots", "offer_snapshot", "load_snapshot_chunk", "apply_snapshot_chunk"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Response message. Does not implicitly {@link tendermint.abci.Response.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Response
             * @static
             * @param {tendermint.abci.IResponse} message Response message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Response.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.exception != null && Object.hasOwnProperty.call(message, "exception"))
                    $root.tendermint.abci.ResponseException.encode(message.exception, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                    $root.tendermint.abci.ResponseEcho.encode(message.echo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.flush != null && Object.hasOwnProperty.call(message, "flush"))
                    $root.tendermint.abci.ResponseFlush.encode(message.flush, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    $root.tendermint.abci.ResponseInfo.encode(message.info, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.set_option != null && Object.hasOwnProperty.call(message, "set_option"))
                    $root.tendermint.abci.ResponseSetOption.encode(message.set_option, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.init_chain != null && Object.hasOwnProperty.call(message, "init_chain"))
                    $root.tendermint.abci.ResponseInitChain.encode(message.init_chain, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                    $root.tendermint.abci.ResponseQuery.encode(message.query, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.begin_block != null && Object.hasOwnProperty.call(message, "begin_block"))
                    $root.tendermint.abci.ResponseBeginBlock.encode(message.begin_block, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.check_tx != null && Object.hasOwnProperty.call(message, "check_tx"))
                    $root.tendermint.abci.ResponseCheckTx.encode(message.check_tx, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.deliver_tx != null && Object.hasOwnProperty.call(message, "deliver_tx"))
                    $root.tendermint.abci.ResponseDeliverTx.encode(message.deliver_tx, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.end_block != null && Object.hasOwnProperty.call(message, "end_block"))
                    $root.tendermint.abci.ResponseEndBlock.encode(message.end_block, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                    $root.tendermint.abci.ResponseCommit.encode(message.commit, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.list_snapshots != null && Object.hasOwnProperty.call(message, "list_snapshots"))
                    $root.tendermint.abci.ResponseListSnapshots.encode(message.list_snapshots, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.offer_snapshot != null && Object.hasOwnProperty.call(message, "offer_snapshot"))
                    $root.tendermint.abci.ResponseOfferSnapshot.encode(message.offer_snapshot, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.load_snapshot_chunk != null && Object.hasOwnProperty.call(message, "load_snapshot_chunk"))
                    $root.tendermint.abci.ResponseLoadSnapshotChunk.encode(message.load_snapshot_chunk, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                if (message.apply_snapshot_chunk != null && Object.hasOwnProperty.call(message, "apply_snapshot_chunk"))
                    $root.tendermint.abci.ResponseApplySnapshotChunk.encode(message.apply_snapshot_chunk, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Response message, length delimited. Does not implicitly {@link tendermint.abci.Response.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Response
             * @static
             * @param {tendermint.abci.IResponse} message Response message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Response.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Response message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Response
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Response} Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Response.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Response();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.exception = $root.tendermint.abci.ResponseException.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.echo = $root.tendermint.abci.ResponseEcho.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.flush = $root.tendermint.abci.ResponseFlush.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.info = $root.tendermint.abci.ResponseInfo.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.set_option = $root.tendermint.abci.ResponseSetOption.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.init_chain = $root.tendermint.abci.ResponseInitChain.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.query = $root.tendermint.abci.ResponseQuery.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.begin_block = $root.tendermint.abci.ResponseBeginBlock.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.check_tx = $root.tendermint.abci.ResponseCheckTx.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.end_block = $root.tendermint.abci.ResponseEndBlock.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.commit = $root.tendermint.abci.ResponseCommit.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.decode(reader, reader.uint32());
                        break;
                    case 16:
                        message.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Response message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Response
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Response} Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Response.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Response message.
             * @function verify
             * @memberof tendermint.abci.Response
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Response.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.exception != null && message.hasOwnProperty("exception")) {
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseException.verify(message.exception);
                        if (error)
                            return "exception." + error;
                    }
                }
                if (message.echo != null && message.hasOwnProperty("echo")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseEcho.verify(message.echo);
                        if (error)
                            return "echo." + error;
                    }
                }
                if (message.flush != null && message.hasOwnProperty("flush")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseFlush.verify(message.flush);
                        if (error)
                            return "flush." + error;
                    }
                }
                if (message.info != null && message.hasOwnProperty("info")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseInfo.verify(message.info);
                        if (error)
                            return "info." + error;
                    }
                }
                if (message.set_option != null && message.hasOwnProperty("set_option")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseSetOption.verify(message.set_option);
                        if (error)
                            return "set_option." + error;
                    }
                }
                if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseInitChain.verify(message.init_chain);
                        if (error)
                            return "init_chain." + error;
                    }
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseQuery.verify(message.query);
                        if (error)
                            return "query." + error;
                    }
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseBeginBlock.verify(message.begin_block);
                        if (error)
                            return "begin_block." + error;
                    }
                }
                if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseCheckTx.verify(message.check_tx);
                        if (error)
                            return "check_tx." + error;
                    }
                }
                if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseDeliverTx.verify(message.deliver_tx);
                        if (error)
                            return "deliver_tx." + error;
                    }
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseEndBlock.verify(message.end_block);
                        if (error)
                            return "end_block." + error;
                    }
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseCommit.verify(message.commit);
                        if (error)
                            return "commit." + error;
                    }
                }
                if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseListSnapshots.verify(message.list_snapshots);
                        if (error)
                            return "list_snapshots." + error;
                    }
                }
                if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseOfferSnapshot.verify(message.offer_snapshot);
                        if (error)
                            return "offer_snapshot." + error;
                    }
                }
                if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseLoadSnapshotChunk.verify(message.load_snapshot_chunk);
                        if (error)
                            return "load_snapshot_chunk." + error;
                    }
                }
                if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        let error = $root.tendermint.abci.ResponseApplySnapshotChunk.verify(message.apply_snapshot_chunk);
                        if (error)
                            return "apply_snapshot_chunk." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Response message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Response
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Response} Response
             */
            Response.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Response)
                    return object;
                let message = new $root.tendermint.abci.Response();
                if (object.exception != null) {
                    if (typeof object.exception !== "object")
                        throw TypeError(".tendermint.abci.Response.exception: object expected");
                    message.exception = $root.tendermint.abci.ResponseException.fromObject(object.exception);
                }
                if (object.echo != null) {
                    if (typeof object.echo !== "object")
                        throw TypeError(".tendermint.abci.Response.echo: object expected");
                    message.echo = $root.tendermint.abci.ResponseEcho.fromObject(object.echo);
                }
                if (object.flush != null) {
                    if (typeof object.flush !== "object")
                        throw TypeError(".tendermint.abci.Response.flush: object expected");
                    message.flush = $root.tendermint.abci.ResponseFlush.fromObject(object.flush);
                }
                if (object.info != null) {
                    if (typeof object.info !== "object")
                        throw TypeError(".tendermint.abci.Response.info: object expected");
                    message.info = $root.tendermint.abci.ResponseInfo.fromObject(object.info);
                }
                if (object.set_option != null) {
                    if (typeof object.set_option !== "object")
                        throw TypeError(".tendermint.abci.Response.set_option: object expected");
                    message.set_option = $root.tendermint.abci.ResponseSetOption.fromObject(object.set_option);
                }
                if (object.init_chain != null) {
                    if (typeof object.init_chain !== "object")
                        throw TypeError(".tendermint.abci.Response.init_chain: object expected");
                    message.init_chain = $root.tendermint.abci.ResponseInitChain.fromObject(object.init_chain);
                }
                if (object.query != null) {
                    if (typeof object.query !== "object")
                        throw TypeError(".tendermint.abci.Response.query: object expected");
                    message.query = $root.tendermint.abci.ResponseQuery.fromObject(object.query);
                }
                if (object.begin_block != null) {
                    if (typeof object.begin_block !== "object")
                        throw TypeError(".tendermint.abci.Response.begin_block: object expected");
                    message.begin_block = $root.tendermint.abci.ResponseBeginBlock.fromObject(object.begin_block);
                }
                if (object.check_tx != null) {
                    if (typeof object.check_tx !== "object")
                        throw TypeError(".tendermint.abci.Response.check_tx: object expected");
                    message.check_tx = $root.tendermint.abci.ResponseCheckTx.fromObject(object.check_tx);
                }
                if (object.deliver_tx != null) {
                    if (typeof object.deliver_tx !== "object")
                        throw TypeError(".tendermint.abci.Response.deliver_tx: object expected");
                    message.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.deliver_tx);
                }
                if (object.end_block != null) {
                    if (typeof object.end_block !== "object")
                        throw TypeError(".tendermint.abci.Response.end_block: object expected");
                    message.end_block = $root.tendermint.abci.ResponseEndBlock.fromObject(object.end_block);
                }
                if (object.commit != null) {
                    if (typeof object.commit !== "object")
                        throw TypeError(".tendermint.abci.Response.commit: object expected");
                    message.commit = $root.tendermint.abci.ResponseCommit.fromObject(object.commit);
                }
                if (object.list_snapshots != null) {
                    if (typeof object.list_snapshots !== "object")
                        throw TypeError(".tendermint.abci.Response.list_snapshots: object expected");
                    message.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.fromObject(object.list_snapshots);
                }
                if (object.offer_snapshot != null) {
                    if (typeof object.offer_snapshot !== "object")
                        throw TypeError(".tendermint.abci.Response.offer_snapshot: object expected");
                    message.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.fromObject(object.offer_snapshot);
                }
                if (object.load_snapshot_chunk != null) {
                    if (typeof object.load_snapshot_chunk !== "object")
                        throw TypeError(".tendermint.abci.Response.load_snapshot_chunk: object expected");
                    message.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.fromObject(object.load_snapshot_chunk);
                }
                if (object.apply_snapshot_chunk != null) {
                    if (typeof object.apply_snapshot_chunk !== "object")
                        throw TypeError(".tendermint.abci.Response.apply_snapshot_chunk: object expected");
                    message.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.fromObject(object.apply_snapshot_chunk);
                }
                return message;
            };

            /**
             * Creates a plain object from a Response message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Response
             * @static
             * @param {tendermint.abci.Response} message Response
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Response.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.exception != null && message.hasOwnProperty("exception")) {
                    object.exception = $root.tendermint.abci.ResponseException.toObject(message.exception, options);
                    if (options.oneofs)
                        object.value = "exception";
                }
                if (message.echo != null && message.hasOwnProperty("echo")) {
                    object.echo = $root.tendermint.abci.ResponseEcho.toObject(message.echo, options);
                    if (options.oneofs)
                        object.value = "echo";
                }
                if (message.flush != null && message.hasOwnProperty("flush")) {
                    object.flush = $root.tendermint.abci.ResponseFlush.toObject(message.flush, options);
                    if (options.oneofs)
                        object.value = "flush";
                }
                if (message.info != null && message.hasOwnProperty("info")) {
                    object.info = $root.tendermint.abci.ResponseInfo.toObject(message.info, options);
                    if (options.oneofs)
                        object.value = "info";
                }
                if (message.set_option != null && message.hasOwnProperty("set_option")) {
                    object.set_option = $root.tendermint.abci.ResponseSetOption.toObject(message.set_option, options);
                    if (options.oneofs)
                        object.value = "set_option";
                }
                if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                    object.init_chain = $root.tendermint.abci.ResponseInitChain.toObject(message.init_chain, options);
                    if (options.oneofs)
                        object.value = "init_chain";
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                    object.query = $root.tendermint.abci.ResponseQuery.toObject(message.query, options);
                    if (options.oneofs)
                        object.value = "query";
                }
                if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                    object.begin_block = $root.tendermint.abci.ResponseBeginBlock.toObject(message.begin_block, options);
                    if (options.oneofs)
                        object.value = "begin_block";
                }
                if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                    object.check_tx = $root.tendermint.abci.ResponseCheckTx.toObject(message.check_tx, options);
                    if (options.oneofs)
                        object.value = "check_tx";
                }
                if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                    object.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.toObject(message.deliver_tx, options);
                    if (options.oneofs)
                        object.value = "deliver_tx";
                }
                if (message.end_block != null && message.hasOwnProperty("end_block")) {
                    object.end_block = $root.tendermint.abci.ResponseEndBlock.toObject(message.end_block, options);
                    if (options.oneofs)
                        object.value = "end_block";
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    object.commit = $root.tendermint.abci.ResponseCommit.toObject(message.commit, options);
                    if (options.oneofs)
                        object.value = "commit";
                }
                if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                    object.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.toObject(message.list_snapshots, options);
                    if (options.oneofs)
                        object.value = "list_snapshots";
                }
                if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                    object.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.toObject(message.offer_snapshot, options);
                    if (options.oneofs)
                        object.value = "offer_snapshot";
                }
                if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                    object.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.toObject(message.load_snapshot_chunk, options);
                    if (options.oneofs)
                        object.value = "load_snapshot_chunk";
                }
                if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                    object.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.toObject(message.apply_snapshot_chunk, options);
                    if (options.oneofs)
                        object.value = "apply_snapshot_chunk";
                }
                return object;
            };

            /**
             * Converts this Response to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Response
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Response.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Response;
        })();

        abci.ResponseException = (function() {

            /**
             * Properties of a ResponseException.
             * @memberof tendermint.abci
             * @interface IResponseException
             * @property {string|null} [error] ResponseException error
             */

            /**
             * Constructs a new ResponseException.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseException.
             * @implements IResponseException
             * @constructor
             * @param {tendermint.abci.IResponseException=} [properties] Properties to set
             */
            function ResponseException(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseException error.
             * @member {string} error
             * @memberof tendermint.abci.ResponseException
             * @instance
             */
            ResponseException.prototype.error = "";

            /**
             * Encodes the specified ResponseException message. Does not implicitly {@link tendermint.abci.ResponseException.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {tendermint.abci.IResponseException} message ResponseException message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseException.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.error);
                return writer;
            };

            /**
             * Encodes the specified ResponseException message, length delimited. Does not implicitly {@link tendermint.abci.ResponseException.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {tendermint.abci.IResponseException} message ResponseException message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseException.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseException message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseException} ResponseException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseException.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseException();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.error = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseException message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseException} ResponseException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseException.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseException message.
             * @function verify
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseException.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.error != null && message.hasOwnProperty("error"))
                    if (!$util.isString(message.error))
                        return "error: string expected";
                return null;
            };

            /**
             * Creates a ResponseException message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseException} ResponseException
             */
            ResponseException.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseException)
                    return object;
                let message = new $root.tendermint.abci.ResponseException();
                if (object.error != null)
                    message.error = String(object.error);
                return message;
            };

            /**
             * Creates a plain object from a ResponseException message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseException
             * @static
             * @param {tendermint.abci.ResponseException} message ResponseException
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseException.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = "";
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = message.error;
                return object;
            };

            /**
             * Converts this ResponseException to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseException
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseException.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseException;
        })();

        abci.ResponseEcho = (function() {

            /**
             * Properties of a ResponseEcho.
             * @memberof tendermint.abci
             * @interface IResponseEcho
             * @property {string|null} [message] ResponseEcho message
             */

            /**
             * Constructs a new ResponseEcho.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseEcho.
             * @implements IResponseEcho
             * @constructor
             * @param {tendermint.abci.IResponseEcho=} [properties] Properties to set
             */
            function ResponseEcho(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseEcho message.
             * @member {string} message
             * @memberof tendermint.abci.ResponseEcho
             * @instance
             */
            ResponseEcho.prototype.message = "";

            /**
             * Encodes the specified ResponseEcho message. Does not implicitly {@link tendermint.abci.ResponseEcho.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {tendermint.abci.IResponseEcho} message ResponseEcho message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEcho.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                return writer;
            };

            /**
             * Encodes the specified ResponseEcho message, length delimited. Does not implicitly {@link tendermint.abci.ResponseEcho.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {tendermint.abci.IResponseEcho} message ResponseEcho message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEcho.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseEcho message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseEcho} ResponseEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEcho.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseEcho();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseEcho message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseEcho} ResponseEcho
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEcho.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseEcho message.
             * @function verify
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseEcho.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                return null;
            };

            /**
             * Creates a ResponseEcho message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseEcho} ResponseEcho
             */
            ResponseEcho.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseEcho)
                    return object;
                let message = new $root.tendermint.abci.ResponseEcho();
                if (object.message != null)
                    message.message = String(object.message);
                return message;
            };

            /**
             * Creates a plain object from a ResponseEcho message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseEcho
             * @static
             * @param {tendermint.abci.ResponseEcho} message ResponseEcho
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseEcho.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.message = "";
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                return object;
            };

            /**
             * Converts this ResponseEcho to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseEcho
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseEcho.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseEcho;
        })();

        abci.ResponseFlush = (function() {

            /**
             * Properties of a ResponseFlush.
             * @memberof tendermint.abci
             * @interface IResponseFlush
             */

            /**
             * Constructs a new ResponseFlush.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseFlush.
             * @implements IResponseFlush
             * @constructor
             * @param {tendermint.abci.IResponseFlush=} [properties] Properties to set
             */
            function ResponseFlush(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Encodes the specified ResponseFlush message. Does not implicitly {@link tendermint.abci.ResponseFlush.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {tendermint.abci.IResponseFlush} message ResponseFlush message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseFlush.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified ResponseFlush message, length delimited. Does not implicitly {@link tendermint.abci.ResponseFlush.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {tendermint.abci.IResponseFlush} message ResponseFlush message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseFlush.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseFlush message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseFlush} ResponseFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseFlush.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseFlush();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseFlush message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseFlush} ResponseFlush
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseFlush.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseFlush message.
             * @function verify
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseFlush.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a ResponseFlush message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseFlush} ResponseFlush
             */
            ResponseFlush.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseFlush)
                    return object;
                return new $root.tendermint.abci.ResponseFlush();
            };

            /**
             * Creates a plain object from a ResponseFlush message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseFlush
             * @static
             * @param {tendermint.abci.ResponseFlush} message ResponseFlush
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseFlush.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this ResponseFlush to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseFlush
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseFlush.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseFlush;
        })();

        abci.ResponseInfo = (function() {

            /**
             * Properties of a ResponseInfo.
             * @memberof tendermint.abci
             * @interface IResponseInfo
             * @property {string|null} [data] ResponseInfo data
             * @property {string|null} [version] ResponseInfo version
             * @property {number|null} [app_version] ResponseInfo app_version
             * @property {number|null} [last_block_height] ResponseInfo last_block_height
             * @property {Uint8Array|null} [last_block_app_hash] ResponseInfo last_block_app_hash
             */

            /**
             * Constructs a new ResponseInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseInfo.
             * @implements IResponseInfo
             * @constructor
             * @param {tendermint.abci.IResponseInfo=} [properties] Properties to set
             */
            function ResponseInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseInfo data.
             * @member {string} data
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.data = "";

            /**
             * ResponseInfo version.
             * @member {string} version
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.version = "";

            /**
             * ResponseInfo app_version.
             * @member {number} app_version
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.app_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ResponseInfo last_block_height.
             * @member {number} last_block_height
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.last_block_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseInfo last_block_app_hash.
             * @member {Uint8Array} last_block_app_hash
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             */
            ResponseInfo.prototype.last_block_app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseInfo message. Does not implicitly {@link tendermint.abci.ResponseInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {tendermint.abci.IResponseInfo} message ResponseInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.data);
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                if (message.app_version != null && Object.hasOwnProperty.call(message, "app_version"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.app_version);
                if (message.last_block_height != null && Object.hasOwnProperty.call(message, "last_block_height"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.last_block_height);
                if (message.last_block_app_hash != null && Object.hasOwnProperty.call(message, "last_block_app_hash"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.last_block_app_hash);
                return writer;
            };

            /**
             * Encodes the specified ResponseInfo message, length delimited. Does not implicitly {@link tendermint.abci.ResponseInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {tendermint.abci.IResponseInfo} message ResponseInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseInfo} ResponseInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.data = reader.string();
                        break;
                    case 2:
                        message.version = reader.string();
                        break;
                    case 3:
                        message.app_version = reader.uint64();
                        break;
                    case 4:
                        message.last_block_height = reader.int64();
                        break;
                    case 5:
                        message.last_block_app_hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseInfo} ResponseInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseInfo message.
             * @function verify
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!$util.isString(message.data))
                        return "data: string expected";
                if (message.version != null && message.hasOwnProperty("version"))
                    if (!$util.isString(message.version))
                        return "version: string expected";
                if (message.app_version != null && message.hasOwnProperty("app_version"))
                    if (!$util.isInteger(message.app_version) && !(message.app_version && $util.isInteger(message.app_version.low) && $util.isInteger(message.app_version.high)))
                        return "app_version: integer|Long expected";
                if (message.last_block_height != null && message.hasOwnProperty("last_block_height"))
                    if (!$util.isInteger(message.last_block_height) && !(message.last_block_height && $util.isInteger(message.last_block_height.low) && $util.isInteger(message.last_block_height.high)))
                        return "last_block_height: integer|Long expected";
                if (message.last_block_app_hash != null && message.hasOwnProperty("last_block_app_hash"))
                    if (!(message.last_block_app_hash && typeof message.last_block_app_hash.length === "number" || $util.isString(message.last_block_app_hash)))
                        return "last_block_app_hash: buffer expected";
                return null;
            };

            /**
             * Creates a ResponseInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseInfo} ResponseInfo
             */
            ResponseInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseInfo)
                    return object;
                let message = new $root.tendermint.abci.ResponseInfo();
                if (object.data != null)
                    message.data = String(object.data);
                if (object.version != null)
                    message.version = String(object.version);
                if (object.app_version != null)
                    if ($util.Long)
                        (message.app_version = $util.Long.fromValue(object.app_version)).unsigned = true;
                    else if (typeof object.app_version === "string")
                        message.app_version = parseInt(object.app_version, 10);
                    else if (typeof object.app_version === "number")
                        message.app_version = object.app_version;
                    else if (typeof object.app_version === "object")
                        message.app_version = new $util.LongBits(object.app_version.low >>> 0, object.app_version.high >>> 0).toNumber(true);
                if (object.last_block_height != null)
                    if ($util.Long)
                        (message.last_block_height = $util.Long.fromValue(object.last_block_height)).unsigned = false;
                    else if (typeof object.last_block_height === "string")
                        message.last_block_height = parseInt(object.last_block_height, 10);
                    else if (typeof object.last_block_height === "number")
                        message.last_block_height = object.last_block_height;
                    else if (typeof object.last_block_height === "object")
                        message.last_block_height = new $util.LongBits(object.last_block_height.low >>> 0, object.last_block_height.high >>> 0).toNumber();
                if (object.last_block_app_hash != null)
                    if (typeof object.last_block_app_hash === "string")
                        $util.base64.decode(object.last_block_app_hash, message.last_block_app_hash = $util.newBuffer($util.base64.length(object.last_block_app_hash)), 0);
                    else if (object.last_block_app_hash.length)
                        message.last_block_app_hash = object.last_block_app_hash;
                return message;
            };

            /**
             * Creates a plain object from a ResponseInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseInfo
             * @static
             * @param {tendermint.abci.ResponseInfo} message ResponseInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.data = "";
                    object.version = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.app_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.app_version = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.last_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.last_block_height = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.last_block_app_hash = "";
                    else {
                        object.last_block_app_hash = [];
                        if (options.bytes !== Array)
                            object.last_block_app_hash = $util.newBuffer(object.last_block_app_hash);
                    }
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = message.data;
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = message.version;
                if (message.app_version != null && message.hasOwnProperty("app_version"))
                    if (typeof message.app_version === "number")
                        object.app_version = options.longs === String ? String(message.app_version) : message.app_version;
                    else
                        object.app_version = options.longs === String ? $util.Long.prototype.toString.call(message.app_version) : options.longs === Number ? new $util.LongBits(message.app_version.low >>> 0, message.app_version.high >>> 0).toNumber(true) : message.app_version;
                if (message.last_block_height != null && message.hasOwnProperty("last_block_height"))
                    if (typeof message.last_block_height === "number")
                        object.last_block_height = options.longs === String ? String(message.last_block_height) : message.last_block_height;
                    else
                        object.last_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.last_block_height) : options.longs === Number ? new $util.LongBits(message.last_block_height.low >>> 0, message.last_block_height.high >>> 0).toNumber() : message.last_block_height;
                if (message.last_block_app_hash != null && message.hasOwnProperty("last_block_app_hash"))
                    object.last_block_app_hash = options.bytes === String ? $util.base64.encode(message.last_block_app_hash, 0, message.last_block_app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_block_app_hash) : message.last_block_app_hash;
                return object;
            };

            /**
             * Converts this ResponseInfo to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseInfo;
        })();

        abci.ResponseSetOption = (function() {

            /**
             * Properties of a ResponseSetOption.
             * @memberof tendermint.abci
             * @interface IResponseSetOption
             * @property {number|null} [code] ResponseSetOption code
             * @property {string|null} [log] ResponseSetOption log
             * @property {string|null} [info] ResponseSetOption info
             */

            /**
             * Constructs a new ResponseSetOption.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseSetOption.
             * @implements IResponseSetOption
             * @constructor
             * @param {tendermint.abci.IResponseSetOption=} [properties] Properties to set
             */
            function ResponseSetOption(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseSetOption code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.code = 0;

            /**
             * ResponseSetOption log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.log = "";

            /**
             * ResponseSetOption info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             */
            ResponseSetOption.prototype.info = "";

            /**
             * Encodes the specified ResponseSetOption message. Does not implicitly {@link tendermint.abci.ResponseSetOption.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {tendermint.abci.IResponseSetOption} message ResponseSetOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseSetOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                return writer;
            };

            /**
             * Encodes the specified ResponseSetOption message, length delimited. Does not implicitly {@link tendermint.abci.ResponseSetOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {tendermint.abci.IResponseSetOption} message ResponseSetOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseSetOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseSetOption message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseSetOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseSetOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.log = reader.string();
                        break;
                    case 4:
                        message.info = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseSetOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseSetOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseSetOption message.
             * @function verify
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseSetOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.log != null && message.hasOwnProperty("log"))
                    if (!$util.isString(message.log))
                        return "log: string expected";
                if (message.info != null && message.hasOwnProperty("info"))
                    if (!$util.isString(message.info))
                        return "info: string expected";
                return null;
            };

            /**
             * Creates a ResponseSetOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
             */
            ResponseSetOption.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseSetOption)
                    return object;
                let message = new $root.tendermint.abci.ResponseSetOption();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.log != null)
                    message.log = String(object.log);
                if (object.info != null)
                    message.info = String(object.info);
                return message;
            };

            /**
             * Creates a plain object from a ResponseSetOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseSetOption
             * @static
             * @param {tendermint.abci.ResponseSetOption} message ResponseSetOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseSetOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.log = "";
                    object.info = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.log != null && message.hasOwnProperty("log"))
                    object.log = message.log;
                if (message.info != null && message.hasOwnProperty("info"))
                    object.info = message.info;
                return object;
            };

            /**
             * Converts this ResponseSetOption to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseSetOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseSetOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseSetOption;
        })();

        abci.ResponseInitChain = (function() {

            /**
             * Properties of a ResponseInitChain.
             * @memberof tendermint.abci
             * @interface IResponseInitChain
             * @property {tendermint.abci.IConsensusParams|null} [consensus_params] ResponseInitChain consensus_params
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validators] ResponseInitChain validators
             * @property {Uint8Array|null} [app_hash] ResponseInitChain app_hash
             */

            /**
             * Constructs a new ResponseInitChain.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseInitChain.
             * @implements IResponseInitChain
             * @constructor
             * @param {tendermint.abci.IResponseInitChain=} [properties] Properties to set
             */
            function ResponseInitChain(properties) {
                this.validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseInitChain consensus_params.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_params
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.consensus_params = null;

            /**
             * ResponseInitChain validators.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validators
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.validators = $util.emptyArray;

            /**
             * ResponseInitChain app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             */
            ResponseInitChain.prototype.app_hash = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseInitChain message. Does not implicitly {@link tendermint.abci.ResponseInitChain.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {tendermint.abci.IResponseInitChain} message ResponseInitChain message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInitChain.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.consensus_params != null && Object.hasOwnProperty.call(message, "consensus_params"))
                    $root.tendermint.abci.ConsensusParams.encode(message.consensus_params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.validators != null && message.validators.length)
                    for (let i = 0; i < message.validators.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(message.validators[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.app_hash);
                return writer;
            };

            /**
             * Encodes the specified ResponseInitChain message, length delimited. Does not implicitly {@link tendermint.abci.ResponseInitChain.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {tendermint.abci.IResponseInitChain} message ResponseInitChain message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseInitChain.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseInitChain message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInitChain.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseInitChain();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.consensus_params = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.validators && message.validators.length))
                            message.validators = [];
                        message.validators.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.app_hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseInitChain message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseInitChain.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseInitChain message.
             * @function verify
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseInitChain.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params")) {
                    let error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_params);
                    if (error)
                        return "consensus_params." + error;
                }
                if (message.validators != null && message.hasOwnProperty("validators")) {
                    if (!Array.isArray(message.validators))
                        return "validators: array expected";
                    for (let i = 0; i < message.validators.length; ++i) {
                        let error = $root.tendermint.abci.ValidatorUpdate.verify(message.validators[i]);
                        if (error)
                            return "validators." + error;
                    }
                }
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                        return "app_hash: buffer expected";
                return null;
            };

            /**
             * Creates a ResponseInitChain message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
             */
            ResponseInitChain.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseInitChain)
                    return object;
                let message = new $root.tendermint.abci.ResponseInitChain();
                if (object.consensus_params != null) {
                    if (typeof object.consensus_params !== "object")
                        throw TypeError(".tendermint.abci.ResponseInitChain.consensus_params: object expected");
                    message.consensus_params = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_params);
                }
                if (object.validators) {
                    if (!Array.isArray(object.validators))
                        throw TypeError(".tendermint.abci.ResponseInitChain.validators: array expected");
                    message.validators = [];
                    for (let i = 0; i < object.validators.length; ++i) {
                        if (typeof object.validators[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseInitChain.validators: object expected");
                        message.validators[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validators[i]);
                    }
                }
                if (object.app_hash != null)
                    if (typeof object.app_hash === "string")
                        $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                    else if (object.app_hash.length)
                        message.app_hash = object.app_hash;
                return message;
            };

            /**
             * Creates a plain object from a ResponseInitChain message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseInitChain
             * @static
             * @param {tendermint.abci.ResponseInitChain} message ResponseInitChain
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseInitChain.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.validators = [];
                if (options.defaults) {
                    object.consensus_params = null;
                    if (options.bytes === String)
                        object.app_hash = "";
                    else {
                        object.app_hash = [];
                        if (options.bytes !== Array)
                            object.app_hash = $util.newBuffer(object.app_hash);
                    }
                }
                if (message.consensus_params != null && message.hasOwnProperty("consensus_params"))
                    object.consensus_params = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_params, options);
                if (message.validators && message.validators.length) {
                    object.validators = [];
                    for (let j = 0; j < message.validators.length; ++j)
                        object.validators[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validators[j], options);
                }
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                return object;
            };

            /**
             * Converts this ResponseInitChain to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseInitChain
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseInitChain.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseInitChain;
        })();

        abci.ResponseQuery = (function() {

            /**
             * Properties of a ResponseQuery.
             * @memberof tendermint.abci
             * @interface IResponseQuery
             * @property {number|null} [code] ResponseQuery code
             * @property {string|null} [log] ResponseQuery log
             * @property {string|null} [info] ResponseQuery info
             * @property {number|null} [index] ResponseQuery index
             * @property {Uint8Array|null} [key] ResponseQuery key
             * @property {Uint8Array|null} [value] ResponseQuery value
             * @property {tendermint.crypto.IProofOps|null} [proof_ops] ResponseQuery proof_ops
             * @property {number|null} [height] ResponseQuery height
             * @property {string|null} [codespace] ResponseQuery codespace
             */

            /**
             * Constructs a new ResponseQuery.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseQuery.
             * @implements IResponseQuery
             * @constructor
             * @param {tendermint.abci.IResponseQuery=} [properties] Properties to set
             */
            function ResponseQuery(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseQuery code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.code = 0;

            /**
             * ResponseQuery log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.log = "";

            /**
             * ResponseQuery info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.info = "";

            /**
             * ResponseQuery index.
             * @member {number} index
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.index = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseQuery key.
             * @member {Uint8Array} key
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.key = $util.newBuffer([]);

            /**
             * ResponseQuery value.
             * @member {Uint8Array} value
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.value = $util.newBuffer([]);

            /**
             * ResponseQuery proof_ops.
             * @member {tendermint.crypto.IProofOps|null|undefined} proof_ops
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.proof_ops = null;

            /**
             * ResponseQuery height.
             * @member {number} height
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseQuery codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             */
            ResponseQuery.prototype.codespace = "";

            /**
             * Encodes the specified ResponseQuery message. Does not implicitly {@link tendermint.abci.ResponseQuery.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {tendermint.abci.IResponseQuery} message ResponseQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.index);
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.key);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.value);
                if (message.proof_ops != null && Object.hasOwnProperty.call(message, "proof_ops"))
                    $root.tendermint.crypto.ProofOps.encode(message.proof_ops, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.height);
                if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.codespace);
                return writer;
            };

            /**
             * Encodes the specified ResponseQuery message, length delimited. Does not implicitly {@link tendermint.abci.ResponseQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {tendermint.abci.IResponseQuery} message ResponseQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseQuery message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseQuery} ResponseQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseQuery();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.log = reader.string();
                        break;
                    case 4:
                        message.info = reader.string();
                        break;
                    case 5:
                        message.index = reader.int64();
                        break;
                    case 6:
                        message.key = reader.bytes();
                        break;
                    case 7:
                        message.value = reader.bytes();
                        break;
                    case 8:
                        message.proof_ops = $root.tendermint.crypto.ProofOps.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.height = reader.int64();
                        break;
                    case 10:
                        message.codespace = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseQuery} ResponseQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseQuery message.
             * @function verify
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.log != null && message.hasOwnProperty("log"))
                    if (!$util.isString(message.log))
                        return "log: string expected";
                if (message.info != null && message.hasOwnProperty("info"))
                    if (!$util.isString(message.info))
                        return "info: string expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                        return "index: integer|Long expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                if (message.proof_ops != null && message.hasOwnProperty("proof_ops")) {
                    let error = $root.tendermint.crypto.ProofOps.verify(message.proof_ops);
                    if (error)
                        return "proof_ops." + error;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    if (!$util.isString(message.codespace))
                        return "codespace: string expected";
                return null;
            };

            /**
             * Creates a ResponseQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseQuery} ResponseQuery
             */
            ResponseQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseQuery)
                    return object;
                let message = new $root.tendermint.abci.ResponseQuery();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.log != null)
                    message.log = String(object.log);
                if (object.info != null)
                    message.info = String(object.info);
                if (object.index != null)
                    if ($util.Long)
                        (message.index = $util.Long.fromValue(object.index)).unsigned = false;
                    else if (typeof object.index === "string")
                        message.index = parseInt(object.index, 10);
                    else if (typeof object.index === "number")
                        message.index = object.index;
                    else if (typeof object.index === "object")
                        message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber();
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                if (object.proof_ops != null) {
                    if (typeof object.proof_ops !== "object")
                        throw TypeError(".tendermint.abci.ResponseQuery.proof_ops: object expected");
                    message.proof_ops = $root.tendermint.crypto.ProofOps.fromObject(object.proof_ops);
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.codespace != null)
                    message.codespace = String(object.codespace);
                return message;
            };

            /**
             * Creates a plain object from a ResponseQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseQuery
             * @static
             * @param {tendermint.abci.ResponseQuery} message ResponseQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.log = "";
                    object.info = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.index = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                    object.proof_ops = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.codespace = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.log != null && message.hasOwnProperty("log"))
                    object.log = message.log;
                if (message.info != null && message.hasOwnProperty("info"))
                    object.info = message.info;
                if (message.index != null && message.hasOwnProperty("index"))
                    if (typeof message.index === "number")
                        object.index = options.longs === String ? String(message.index) : message.index;
                    else
                        object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber() : message.index;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                if (message.proof_ops != null && message.hasOwnProperty("proof_ops"))
                    object.proof_ops = $root.tendermint.crypto.ProofOps.toObject(message.proof_ops, options);
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    object.codespace = message.codespace;
                return object;
            };

            /**
             * Converts this ResponseQuery to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseQuery;
        })();

        abci.ResponseBeginBlock = (function() {

            /**
             * Properties of a ResponseBeginBlock.
             * @memberof tendermint.abci
             * @interface IResponseBeginBlock
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseBeginBlock events
             */

            /**
             * Constructs a new ResponseBeginBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseBeginBlock.
             * @implements IResponseBeginBlock
             * @constructor
             * @param {tendermint.abci.IResponseBeginBlock=} [properties] Properties to set
             */
            function ResponseBeginBlock(properties) {
                this.events = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseBeginBlock events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseBeginBlock
             * @instance
             */
            ResponseBeginBlock.prototype.events = $util.emptyArray;

            /**
             * Encodes the specified ResponseBeginBlock message. Does not implicitly {@link tendermint.abci.ResponseBeginBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {tendermint.abci.IResponseBeginBlock} message ResponseBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseBeginBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.events != null && message.events.length)
                    for (let i = 0; i < message.events.length; ++i)
                        $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ResponseBeginBlock message, length delimited. Does not implicitly {@link tendermint.abci.ResponseBeginBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {tendermint.abci.IResponseBeginBlock} message ResponseBeginBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseBeginBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseBeginBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseBeginBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseBeginBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseBeginBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseBeginBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseBeginBlock message.
             * @function verify
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseBeginBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (let i = 0; i < message.events.length; ++i) {
                        let error = $root.tendermint.abci.Event.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ResponseBeginBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
             */
            ResponseBeginBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseBeginBlock)
                    return object;
                let message = new $root.tendermint.abci.ResponseBeginBlock();
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".tendermint.abci.ResponseBeginBlock.events: array expected");
                    message.events = [];
                    for (let i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseBeginBlock.events: object expected");
                        message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseBeginBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseBeginBlock
             * @static
             * @param {tendermint.abci.ResponseBeginBlock} message ResponseBeginBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseBeginBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.events = [];
                if (message.events && message.events.length) {
                    object.events = [];
                    for (let j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                }
                return object;
            };

            /**
             * Converts this ResponseBeginBlock to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseBeginBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseBeginBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseBeginBlock;
        })();

        abci.ResponseCheckTx = (function() {

            /**
             * Properties of a ResponseCheckTx.
             * @memberof tendermint.abci
             * @interface IResponseCheckTx
             * @property {number|null} [code] ResponseCheckTx code
             * @property {Uint8Array|null} [data] ResponseCheckTx data
             * @property {string|null} [log] ResponseCheckTx log
             * @property {string|null} [info] ResponseCheckTx info
             * @property {number|null} [gas_wanted] ResponseCheckTx gas_wanted
             * @property {number|null} [gas_used] ResponseCheckTx gas_used
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseCheckTx events
             * @property {string|null} [codespace] ResponseCheckTx codespace
             */

            /**
             * Constructs a new ResponseCheckTx.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseCheckTx.
             * @implements IResponseCheckTx
             * @constructor
             * @param {tendermint.abci.IResponseCheckTx=} [properties] Properties to set
             */
            function ResponseCheckTx(properties) {
                this.events = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseCheckTx code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.code = 0;

            /**
             * ResponseCheckTx data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.data = $util.newBuffer([]);

            /**
             * ResponseCheckTx log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.log = "";

            /**
             * ResponseCheckTx info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.info = "";

            /**
             * ResponseCheckTx gas_wanted.
             * @member {number} gas_wanted
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseCheckTx gas_used.
             * @member {number} gas_used
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseCheckTx events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.events = $util.emptyArray;

            /**
             * ResponseCheckTx codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             */
            ResponseCheckTx.prototype.codespace = "";

            /**
             * Encodes the specified ResponseCheckTx message. Does not implicitly {@link tendermint.abci.ResponseCheckTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {tendermint.abci.IResponseCheckTx} message ResponseCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCheckTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                if (message.gas_wanted != null && Object.hasOwnProperty.call(message, "gas_wanted"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.gas_wanted);
                if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.gas_used);
                if (message.events != null && message.events.length)
                    for (let i = 0; i < message.events.length; ++i)
                        $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.codespace);
                return writer;
            };

            /**
             * Encodes the specified ResponseCheckTx message, length delimited. Does not implicitly {@link tendermint.abci.ResponseCheckTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {tendermint.abci.IResponseCheckTx} message ResponseCheckTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCheckTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseCheckTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCheckTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseCheckTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.log = reader.string();
                        break;
                    case 4:
                        message.info = reader.string();
                        break;
                    case 5:
                        message.gas_wanted = reader.int64();
                        break;
                    case 6:
                        message.gas_used = reader.int64();
                        break;
                    case 7:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.codespace = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseCheckTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCheckTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseCheckTx message.
             * @function verify
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseCheckTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.log != null && message.hasOwnProperty("log"))
                    if (!$util.isString(message.log))
                        return "log: string expected";
                if (message.info != null && message.hasOwnProperty("info"))
                    if (!$util.isString(message.info))
                        return "info: string expected";
                if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                    if (!$util.isInteger(message.gas_wanted) && !(message.gas_wanted && $util.isInteger(message.gas_wanted.low) && $util.isInteger(message.gas_wanted.high)))
                        return "gas_wanted: integer|Long expected";
                if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                    if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                        return "gas_used: integer|Long expected";
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (let i = 0; i < message.events.length; ++i) {
                        let error = $root.tendermint.abci.Event.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    if (!$util.isString(message.codespace))
                        return "codespace: string expected";
                return null;
            };

            /**
             * Creates a ResponseCheckTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
             */
            ResponseCheckTx.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseCheckTx)
                    return object;
                let message = new $root.tendermint.abci.ResponseCheckTx();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.log != null)
                    message.log = String(object.log);
                if (object.info != null)
                    message.info = String(object.info);
                if (object.gas_wanted != null)
                    if ($util.Long)
                        (message.gas_wanted = $util.Long.fromValue(object.gas_wanted)).unsigned = false;
                    else if (typeof object.gas_wanted === "string")
                        message.gas_wanted = parseInt(object.gas_wanted, 10);
                    else if (typeof object.gas_wanted === "number")
                        message.gas_wanted = object.gas_wanted;
                    else if (typeof object.gas_wanted === "object")
                        message.gas_wanted = new $util.LongBits(object.gas_wanted.low >>> 0, object.gas_wanted.high >>> 0).toNumber();
                if (object.gas_used != null)
                    if ($util.Long)
                        (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = false;
                    else if (typeof object.gas_used === "string")
                        message.gas_used = parseInt(object.gas_used, 10);
                    else if (typeof object.gas_used === "number")
                        message.gas_used = object.gas_used;
                    else if (typeof object.gas_used === "object")
                        message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber();
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".tendermint.abci.ResponseCheckTx.events: array expected");
                    message.events = [];
                    for (let i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseCheckTx.events: object expected");
                        message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                    }
                }
                if (object.codespace != null)
                    message.codespace = String(object.codespace);
                return message;
            };

            /**
             * Creates a plain object from a ResponseCheckTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseCheckTx
             * @static
             * @param {tendermint.abci.ResponseCheckTx} message ResponseCheckTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseCheckTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.events = [];
                if (options.defaults) {
                    object.code = 0;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.log = "";
                    object.info = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.gas_wanted = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gas_wanted = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gas_used = options.longs === String ? "0" : 0;
                    object.codespace = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.log != null && message.hasOwnProperty("log"))
                    object.log = message.log;
                if (message.info != null && message.hasOwnProperty("info"))
                    object.info = message.info;
                if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                    if (typeof message.gas_wanted === "number")
                        object.gas_wanted = options.longs === String ? String(message.gas_wanted) : message.gas_wanted;
                    else
                        object.gas_wanted = options.longs === String ? $util.Long.prototype.toString.call(message.gas_wanted) : options.longs === Number ? new $util.LongBits(message.gas_wanted.low >>> 0, message.gas_wanted.high >>> 0).toNumber() : message.gas_wanted;
                if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                    if (typeof message.gas_used === "number")
                        object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                    else
                        object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber() : message.gas_used;
                if (message.events && message.events.length) {
                    object.events = [];
                    for (let j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                }
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    object.codespace = message.codespace;
                return object;
            };

            /**
             * Converts this ResponseCheckTx to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseCheckTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseCheckTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseCheckTx;
        })();

        abci.ResponseDeliverTx = (function() {

            /**
             * Properties of a ResponseDeliverTx.
             * @memberof tendermint.abci
             * @interface IResponseDeliverTx
             * @property {number|null} [code] ResponseDeliverTx code
             * @property {Uint8Array|null} [data] ResponseDeliverTx data
             * @property {string|null} [log] ResponseDeliverTx log
             * @property {string|null} [info] ResponseDeliverTx info
             * @property {number|null} [gas_wanted] ResponseDeliverTx gas_wanted
             * @property {number|null} [gas_used] ResponseDeliverTx gas_used
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseDeliverTx events
             * @property {string|null} [codespace] ResponseDeliverTx codespace
             */

            /**
             * Constructs a new ResponseDeliverTx.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseDeliverTx.
             * @implements IResponseDeliverTx
             * @constructor
             * @param {tendermint.abci.IResponseDeliverTx=} [properties] Properties to set
             */
            function ResponseDeliverTx(properties) {
                this.events = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseDeliverTx code.
             * @member {number} code
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.code = 0;

            /**
             * ResponseDeliverTx data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.data = $util.newBuffer([]);

            /**
             * ResponseDeliverTx log.
             * @member {string} log
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.log = "";

            /**
             * ResponseDeliverTx info.
             * @member {string} info
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.info = "";

            /**
             * ResponseDeliverTx gas_wanted.
             * @member {number} gas_wanted
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseDeliverTx gas_used.
             * @member {number} gas_used
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ResponseDeliverTx events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.events = $util.emptyArray;

            /**
             * ResponseDeliverTx codespace.
             * @member {string} codespace
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             */
            ResponseDeliverTx.prototype.codespace = "";

            /**
             * Encodes the specified ResponseDeliverTx message. Does not implicitly {@link tendermint.abci.ResponseDeliverTx.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {tendermint.abci.IResponseDeliverTx} message ResponseDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseDeliverTx.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                if (message.gas_wanted != null && Object.hasOwnProperty.call(message, "gas_wanted"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.gas_wanted);
                if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.gas_used);
                if (message.events != null && message.events.length)
                    for (let i = 0; i < message.events.length; ++i)
                        $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.codespace);
                return writer;
            };

            /**
             * Encodes the specified ResponseDeliverTx message, length delimited. Does not implicitly {@link tendermint.abci.ResponseDeliverTx.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {tendermint.abci.IResponseDeliverTx} message ResponseDeliverTx message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseDeliverTx.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseDeliverTx message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseDeliverTx.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseDeliverTx();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.log = reader.string();
                        break;
                    case 4:
                        message.info = reader.string();
                        break;
                    case 5:
                        message.gas_wanted = reader.int64();
                        break;
                    case 6:
                        message.gas_used = reader.int64();
                        break;
                    case 7:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.codespace = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseDeliverTx message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseDeliverTx.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseDeliverTx message.
             * @function verify
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseDeliverTx.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.log != null && message.hasOwnProperty("log"))
                    if (!$util.isString(message.log))
                        return "log: string expected";
                if (message.info != null && message.hasOwnProperty("info"))
                    if (!$util.isString(message.info))
                        return "info: string expected";
                if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                    if (!$util.isInteger(message.gas_wanted) && !(message.gas_wanted && $util.isInteger(message.gas_wanted.low) && $util.isInteger(message.gas_wanted.high)))
                        return "gas_wanted: integer|Long expected";
                if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                    if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                        return "gas_used: integer|Long expected";
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (let i = 0; i < message.events.length; ++i) {
                        let error = $root.tendermint.abci.Event.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    if (!$util.isString(message.codespace))
                        return "codespace: string expected";
                return null;
            };

            /**
             * Creates a ResponseDeliverTx message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
             */
            ResponseDeliverTx.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseDeliverTx)
                    return object;
                let message = new $root.tendermint.abci.ResponseDeliverTx();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.log != null)
                    message.log = String(object.log);
                if (object.info != null)
                    message.info = String(object.info);
                if (object.gas_wanted != null)
                    if ($util.Long)
                        (message.gas_wanted = $util.Long.fromValue(object.gas_wanted)).unsigned = false;
                    else if (typeof object.gas_wanted === "string")
                        message.gas_wanted = parseInt(object.gas_wanted, 10);
                    else if (typeof object.gas_wanted === "number")
                        message.gas_wanted = object.gas_wanted;
                    else if (typeof object.gas_wanted === "object")
                        message.gas_wanted = new $util.LongBits(object.gas_wanted.low >>> 0, object.gas_wanted.high >>> 0).toNumber();
                if (object.gas_used != null)
                    if ($util.Long)
                        (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = false;
                    else if (typeof object.gas_used === "string")
                        message.gas_used = parseInt(object.gas_used, 10);
                    else if (typeof object.gas_used === "number")
                        message.gas_used = object.gas_used;
                    else if (typeof object.gas_used === "object")
                        message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber();
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".tendermint.abci.ResponseDeliverTx.events: array expected");
                    message.events = [];
                    for (let i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseDeliverTx.events: object expected");
                        message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                    }
                }
                if (object.codespace != null)
                    message.codespace = String(object.codespace);
                return message;
            };

            /**
             * Creates a plain object from a ResponseDeliverTx message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseDeliverTx
             * @static
             * @param {tendermint.abci.ResponseDeliverTx} message ResponseDeliverTx
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseDeliverTx.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.events = [];
                if (options.defaults) {
                    object.code = 0;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.log = "";
                    object.info = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.gas_wanted = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gas_wanted = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gas_used = options.longs === String ? "0" : 0;
                    object.codespace = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.log != null && message.hasOwnProperty("log"))
                    object.log = message.log;
                if (message.info != null && message.hasOwnProperty("info"))
                    object.info = message.info;
                if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                    if (typeof message.gas_wanted === "number")
                        object.gas_wanted = options.longs === String ? String(message.gas_wanted) : message.gas_wanted;
                    else
                        object.gas_wanted = options.longs === String ? $util.Long.prototype.toString.call(message.gas_wanted) : options.longs === Number ? new $util.LongBits(message.gas_wanted.low >>> 0, message.gas_wanted.high >>> 0).toNumber() : message.gas_wanted;
                if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                    if (typeof message.gas_used === "number")
                        object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                    else
                        object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber() : message.gas_used;
                if (message.events && message.events.length) {
                    object.events = [];
                    for (let j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                }
                if (message.codespace != null && message.hasOwnProperty("codespace"))
                    object.codespace = message.codespace;
                return object;
            };

            /**
             * Converts this ResponseDeliverTx to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseDeliverTx
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseDeliverTx.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseDeliverTx;
        })();

        abci.ResponseEndBlock = (function() {

            /**
             * Properties of a ResponseEndBlock.
             * @memberof tendermint.abci
             * @interface IResponseEndBlock
             * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validator_updates] ResponseEndBlock validator_updates
             * @property {tendermint.abci.IConsensusParams|null} [consensus_param_updates] ResponseEndBlock consensus_param_updates
             * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseEndBlock events
             */

            /**
             * Constructs a new ResponseEndBlock.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseEndBlock.
             * @implements IResponseEndBlock
             * @constructor
             * @param {tendermint.abci.IResponseEndBlock=} [properties] Properties to set
             */
            function ResponseEndBlock(properties) {
                this.validator_updates = [];
                this.events = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseEndBlock validator_updates.
             * @member {Array.<tendermint.abci.IValidatorUpdate>} validator_updates
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.validator_updates = $util.emptyArray;

            /**
             * ResponseEndBlock consensus_param_updates.
             * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_param_updates
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.consensus_param_updates = null;

            /**
             * ResponseEndBlock events.
             * @member {Array.<tendermint.abci.IEvent>} events
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             */
            ResponseEndBlock.prototype.events = $util.emptyArray;

            /**
             * Encodes the specified ResponseEndBlock message. Does not implicitly {@link tendermint.abci.ResponseEndBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {tendermint.abci.IResponseEndBlock} message ResponseEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEndBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator_updates != null && message.validator_updates.length)
                    for (let i = 0; i < message.validator_updates.length; ++i)
                        $root.tendermint.abci.ValidatorUpdate.encode(message.validator_updates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.consensus_param_updates != null && Object.hasOwnProperty.call(message, "consensus_param_updates"))
                    $root.tendermint.abci.ConsensusParams.encode(message.consensus_param_updates, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.events != null && message.events.length)
                    for (let i = 0; i < message.events.length; ++i)
                        $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ResponseEndBlock message, length delimited. Does not implicitly {@link tendermint.abci.ResponseEndBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {tendermint.abci.IResponseEndBlock} message ResponseEndBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseEndBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseEndBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEndBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseEndBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.validator_updates && message.validator_updates.length))
                            message.validator_updates = [];
                        message.validator_updates.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.consensus_param_updates = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseEndBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseEndBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseEndBlock message.
             * @function verify
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseEndBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator_updates != null && message.hasOwnProperty("validator_updates")) {
                    if (!Array.isArray(message.validator_updates))
                        return "validator_updates: array expected";
                    for (let i = 0; i < message.validator_updates.length; ++i) {
                        let error = $root.tendermint.abci.ValidatorUpdate.verify(message.validator_updates[i]);
                        if (error)
                            return "validator_updates." + error;
                    }
                }
                if (message.consensus_param_updates != null && message.hasOwnProperty("consensus_param_updates")) {
                    let error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_param_updates);
                    if (error)
                        return "consensus_param_updates." + error;
                }
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (let i = 0; i < message.events.length; ++i) {
                        let error = $root.tendermint.abci.Event.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ResponseEndBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
             */
            ResponseEndBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseEndBlock)
                    return object;
                let message = new $root.tendermint.abci.ResponseEndBlock();
                if (object.validator_updates) {
                    if (!Array.isArray(object.validator_updates))
                        throw TypeError(".tendermint.abci.ResponseEndBlock.validator_updates: array expected");
                    message.validator_updates = [];
                    for (let i = 0; i < object.validator_updates.length; ++i) {
                        if (typeof object.validator_updates[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseEndBlock.validator_updates: object expected");
                        message.validator_updates[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validator_updates[i]);
                    }
                }
                if (object.consensus_param_updates != null) {
                    if (typeof object.consensus_param_updates !== "object")
                        throw TypeError(".tendermint.abci.ResponseEndBlock.consensus_param_updates: object expected");
                    message.consensus_param_updates = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_param_updates);
                }
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".tendermint.abci.ResponseEndBlock.events: array expected");
                    message.events = [];
                    for (let i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseEndBlock.events: object expected");
                        message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseEndBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseEndBlock
             * @static
             * @param {tendermint.abci.ResponseEndBlock} message ResponseEndBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseEndBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.validator_updates = [];
                    object.events = [];
                }
                if (options.defaults)
                    object.consensus_param_updates = null;
                if (message.validator_updates && message.validator_updates.length) {
                    object.validator_updates = [];
                    for (let j = 0; j < message.validator_updates.length; ++j)
                        object.validator_updates[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validator_updates[j], options);
                }
                if (message.consensus_param_updates != null && message.hasOwnProperty("consensus_param_updates"))
                    object.consensus_param_updates = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_param_updates, options);
                if (message.events && message.events.length) {
                    object.events = [];
                    for (let j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                }
                return object;
            };

            /**
             * Converts this ResponseEndBlock to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseEndBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseEndBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseEndBlock;
        })();

        abci.ResponseCommit = (function() {

            /**
             * Properties of a ResponseCommit.
             * @memberof tendermint.abci
             * @interface IResponseCommit
             * @property {Uint8Array|null} [data] ResponseCommit data
             * @property {number|null} [retain_height] ResponseCommit retain_height
             */

            /**
             * Constructs a new ResponseCommit.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseCommit.
             * @implements IResponseCommit
             * @constructor
             * @param {tendermint.abci.IResponseCommit=} [properties] Properties to set
             */
            function ResponseCommit(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseCommit data.
             * @member {Uint8Array} data
             * @memberof tendermint.abci.ResponseCommit
             * @instance
             */
            ResponseCommit.prototype.data = $util.newBuffer([]);

            /**
             * ResponseCommit retain_height.
             * @member {number} retain_height
             * @memberof tendermint.abci.ResponseCommit
             * @instance
             */
            ResponseCommit.prototype.retain_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ResponseCommit message. Does not implicitly {@link tendermint.abci.ResponseCommit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {tendermint.abci.IResponseCommit} message ResponseCommit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCommit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.retain_height != null && Object.hasOwnProperty.call(message, "retain_height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.retain_height);
                return writer;
            };

            /**
             * Encodes the specified ResponseCommit message, length delimited. Does not implicitly {@link tendermint.abci.ResponseCommit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {tendermint.abci.IResponseCommit} message ResponseCommit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseCommit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseCommit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseCommit} ResponseCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCommit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseCommit();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.retain_height = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseCommit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseCommit} ResponseCommit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseCommit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseCommit message.
             * @function verify
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseCommit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.retain_height != null && message.hasOwnProperty("retain_height"))
                    if (!$util.isInteger(message.retain_height) && !(message.retain_height && $util.isInteger(message.retain_height.low) && $util.isInteger(message.retain_height.high)))
                        return "retain_height: integer|Long expected";
                return null;
            };

            /**
             * Creates a ResponseCommit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseCommit} ResponseCommit
             */
            ResponseCommit.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseCommit)
                    return object;
                let message = new $root.tendermint.abci.ResponseCommit();
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.retain_height != null)
                    if ($util.Long)
                        (message.retain_height = $util.Long.fromValue(object.retain_height)).unsigned = false;
                    else if (typeof object.retain_height === "string")
                        message.retain_height = parseInt(object.retain_height, 10);
                    else if (typeof object.retain_height === "number")
                        message.retain_height = object.retain_height;
                    else if (typeof object.retain_height === "object")
                        message.retain_height = new $util.LongBits(object.retain_height.low >>> 0, object.retain_height.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ResponseCommit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseCommit
             * @static
             * @param {tendermint.abci.ResponseCommit} message ResponseCommit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseCommit.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.retain_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.retain_height = options.longs === String ? "0" : 0;
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.retain_height != null && message.hasOwnProperty("retain_height"))
                    if (typeof message.retain_height === "number")
                        object.retain_height = options.longs === String ? String(message.retain_height) : message.retain_height;
                    else
                        object.retain_height = options.longs === String ? $util.Long.prototype.toString.call(message.retain_height) : options.longs === Number ? new $util.LongBits(message.retain_height.low >>> 0, message.retain_height.high >>> 0).toNumber() : message.retain_height;
                return object;
            };

            /**
             * Converts this ResponseCommit to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseCommit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseCommit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseCommit;
        })();

        abci.ResponseListSnapshots = (function() {

            /**
             * Properties of a ResponseListSnapshots.
             * @memberof tendermint.abci
             * @interface IResponseListSnapshots
             * @property {Array.<tendermint.abci.ISnapshot>|null} [snapshots] ResponseListSnapshots snapshots
             */

            /**
             * Constructs a new ResponseListSnapshots.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseListSnapshots.
             * @implements IResponseListSnapshots
             * @constructor
             * @param {tendermint.abci.IResponseListSnapshots=} [properties] Properties to set
             */
            function ResponseListSnapshots(properties) {
                this.snapshots = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseListSnapshots snapshots.
             * @member {Array.<tendermint.abci.ISnapshot>} snapshots
             * @memberof tendermint.abci.ResponseListSnapshots
             * @instance
             */
            ResponseListSnapshots.prototype.snapshots = $util.emptyArray;

            /**
             * Encodes the specified ResponseListSnapshots message. Does not implicitly {@link tendermint.abci.ResponseListSnapshots.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {tendermint.abci.IResponseListSnapshots} message ResponseListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseListSnapshots.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.snapshots != null && message.snapshots.length)
                    for (let i = 0; i < message.snapshots.length; ++i)
                        $root.tendermint.abci.Snapshot.encode(message.snapshots[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ResponseListSnapshots message, length delimited. Does not implicitly {@link tendermint.abci.ResponseListSnapshots.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {tendermint.abci.IResponseListSnapshots} message ResponseListSnapshots message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseListSnapshots.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseListSnapshots message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseListSnapshots.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseListSnapshots();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.snapshots && message.snapshots.length))
                            message.snapshots = [];
                        message.snapshots.push($root.tendermint.abci.Snapshot.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseListSnapshots message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseListSnapshots.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseListSnapshots message.
             * @function verify
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseListSnapshots.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.snapshots != null && message.hasOwnProperty("snapshots")) {
                    if (!Array.isArray(message.snapshots))
                        return "snapshots: array expected";
                    for (let i = 0; i < message.snapshots.length; ++i) {
                        let error = $root.tendermint.abci.Snapshot.verify(message.snapshots[i]);
                        if (error)
                            return "snapshots." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ResponseListSnapshots message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
             */
            ResponseListSnapshots.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseListSnapshots)
                    return object;
                let message = new $root.tendermint.abci.ResponseListSnapshots();
                if (object.snapshots) {
                    if (!Array.isArray(object.snapshots))
                        throw TypeError(".tendermint.abci.ResponseListSnapshots.snapshots: array expected");
                    message.snapshots = [];
                    for (let i = 0; i < object.snapshots.length; ++i) {
                        if (typeof object.snapshots[i] !== "object")
                            throw TypeError(".tendermint.abci.ResponseListSnapshots.snapshots: object expected");
                        message.snapshots[i] = $root.tendermint.abci.Snapshot.fromObject(object.snapshots[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseListSnapshots message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseListSnapshots
             * @static
             * @param {tendermint.abci.ResponseListSnapshots} message ResponseListSnapshots
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseListSnapshots.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.snapshots = [];
                if (message.snapshots && message.snapshots.length) {
                    object.snapshots = [];
                    for (let j = 0; j < message.snapshots.length; ++j)
                        object.snapshots[j] = $root.tendermint.abci.Snapshot.toObject(message.snapshots[j], options);
                }
                return object;
            };

            /**
             * Converts this ResponseListSnapshots to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseListSnapshots
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseListSnapshots.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseListSnapshots;
        })();

        abci.ResponseOfferSnapshot = (function() {

            /**
             * Properties of a ResponseOfferSnapshot.
             * @memberof tendermint.abci
             * @interface IResponseOfferSnapshot
             * @property {tendermint.abci.ResponseOfferSnapshot.Result|null} [result] ResponseOfferSnapshot result
             */

            /**
             * Constructs a new ResponseOfferSnapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseOfferSnapshot.
             * @implements IResponseOfferSnapshot
             * @constructor
             * @param {tendermint.abci.IResponseOfferSnapshot=} [properties] Properties to set
             */
            function ResponseOfferSnapshot(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseOfferSnapshot result.
             * @member {tendermint.abci.ResponseOfferSnapshot.Result} result
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @instance
             */
            ResponseOfferSnapshot.prototype.result = 0;

            /**
             * Encodes the specified ResponseOfferSnapshot message. Does not implicitly {@link tendermint.abci.ResponseOfferSnapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {tendermint.abci.IResponseOfferSnapshot} message ResponseOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseOfferSnapshot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                return writer;
            };

            /**
             * Encodes the specified ResponseOfferSnapshot message, length delimited. Does not implicitly {@link tendermint.abci.ResponseOfferSnapshot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {tendermint.abci.IResponseOfferSnapshot} message ResponseOfferSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseOfferSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseOfferSnapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseOfferSnapshot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseOfferSnapshot();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseOfferSnapshot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseOfferSnapshot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseOfferSnapshot message.
             * @function verify
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseOfferSnapshot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result"))
                    switch (message.result) {
                    default:
                        return "result: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                return null;
            };

            /**
             * Creates a ResponseOfferSnapshot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
             */
            ResponseOfferSnapshot.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseOfferSnapshot)
                    return object;
                let message = new $root.tendermint.abci.ResponseOfferSnapshot();
                switch (object.result) {
                case "UNKNOWN":
                case 0:
                    message.result = 0;
                    break;
                case "ACCEPT":
                case 1:
                    message.result = 1;
                    break;
                case "ABORT":
                case 2:
                    message.result = 2;
                    break;
                case "REJECT":
                case 3:
                    message.result = 3;
                    break;
                case "REJECT_FORMAT":
                case 4:
                    message.result = 4;
                    break;
                case "REJECT_SENDER":
                case 5:
                    message.result = 5;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseOfferSnapshot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @static
             * @param {tendermint.abci.ResponseOfferSnapshot} message ResponseOfferSnapshot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseOfferSnapshot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.result = options.enums === String ? "UNKNOWN" : 0;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = options.enums === String ? $root.tendermint.abci.ResponseOfferSnapshot.Result[message.result] : message.result;
                return object;
            };

            /**
             * Converts this ResponseOfferSnapshot to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseOfferSnapshot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseOfferSnapshot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Result enum.
             * @name tendermint.abci.ResponseOfferSnapshot.Result
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} ACCEPT=1 ACCEPT value
             * @property {number} ABORT=2 ABORT value
             * @property {number} REJECT=3 REJECT value
             * @property {number} REJECT_FORMAT=4 REJECT_FORMAT value
             * @property {number} REJECT_SENDER=5 REJECT_SENDER value
             */
            ResponseOfferSnapshot.Result = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "ACCEPT"] = 1;
                values[valuesById[2] = "ABORT"] = 2;
                values[valuesById[3] = "REJECT"] = 3;
                values[valuesById[4] = "REJECT_FORMAT"] = 4;
                values[valuesById[5] = "REJECT_SENDER"] = 5;
                return values;
            })();

            return ResponseOfferSnapshot;
        })();

        abci.ResponseLoadSnapshotChunk = (function() {

            /**
             * Properties of a ResponseLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @interface IResponseLoadSnapshotChunk
             * @property {Uint8Array|null} [chunk] ResponseLoadSnapshotChunk chunk
             */

            /**
             * Constructs a new ResponseLoadSnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseLoadSnapshotChunk.
             * @implements IResponseLoadSnapshotChunk
             * @constructor
             * @param {tendermint.abci.IResponseLoadSnapshotChunk=} [properties] Properties to set
             */
            function ResponseLoadSnapshotChunk(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseLoadSnapshotChunk chunk.
             * @member {Uint8Array} chunk
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @instance
             */
            ResponseLoadSnapshotChunk.prototype.chunk = $util.newBuffer([]);

            /**
             * Encodes the specified ResponseLoadSnapshotChunk message. Does not implicitly {@link tendermint.abci.ResponseLoadSnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseLoadSnapshotChunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.chunk);
                return writer;
            };

            /**
             * Encodes the specified ResponseLoadSnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.ResponseLoadSnapshotChunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseLoadSnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseLoadSnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseLoadSnapshotChunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseLoadSnapshotChunk();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.chunk = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseLoadSnapshotChunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseLoadSnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseLoadSnapshotChunk message.
             * @function verify
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseLoadSnapshotChunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    if (!(message.chunk && typeof message.chunk.length === "number" || $util.isString(message.chunk)))
                        return "chunk: buffer expected";
                return null;
            };

            /**
             * Creates a ResponseLoadSnapshotChunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
             */
            ResponseLoadSnapshotChunk.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseLoadSnapshotChunk)
                    return object;
                let message = new $root.tendermint.abci.ResponseLoadSnapshotChunk();
                if (object.chunk != null)
                    if (typeof object.chunk === "string")
                        $util.base64.decode(object.chunk, message.chunk = $util.newBuffer($util.base64.length(object.chunk)), 0);
                    else if (object.chunk.length)
                        message.chunk = object.chunk;
                return message;
            };

            /**
             * Creates a plain object from a ResponseLoadSnapshotChunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @static
             * @param {tendermint.abci.ResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseLoadSnapshotChunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.chunk = "";
                    else {
                        object.chunk = [];
                        if (options.bytes !== Array)
                            object.chunk = $util.newBuffer(object.chunk);
                    }
                if (message.chunk != null && message.hasOwnProperty("chunk"))
                    object.chunk = options.bytes === String ? $util.base64.encode(message.chunk, 0, message.chunk.length) : options.bytes === Array ? Array.prototype.slice.call(message.chunk) : message.chunk;
                return object;
            };

            /**
             * Converts this ResponseLoadSnapshotChunk to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseLoadSnapshotChunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseLoadSnapshotChunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResponseLoadSnapshotChunk;
        })();

        abci.ResponseApplySnapshotChunk = (function() {

            /**
             * Properties of a ResponseApplySnapshotChunk.
             * @memberof tendermint.abci
             * @interface IResponseApplySnapshotChunk
             * @property {tendermint.abci.ResponseApplySnapshotChunk.Result|null} [result] ResponseApplySnapshotChunk result
             * @property {Array.<number>|null} [refetch_chunks] ResponseApplySnapshotChunk refetch_chunks
             * @property {Array.<string>|null} [reject_senders] ResponseApplySnapshotChunk reject_senders
             */

            /**
             * Constructs a new ResponseApplySnapshotChunk.
             * @memberof tendermint.abci
             * @classdesc Represents a ResponseApplySnapshotChunk.
             * @implements IResponseApplySnapshotChunk
             * @constructor
             * @param {tendermint.abci.IResponseApplySnapshotChunk=} [properties] Properties to set
             */
            function ResponseApplySnapshotChunk(properties) {
                this.refetch_chunks = [];
                this.reject_senders = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResponseApplySnapshotChunk result.
             * @member {tendermint.abci.ResponseApplySnapshotChunk.Result} result
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.result = 0;

            /**
             * ResponseApplySnapshotChunk refetch_chunks.
             * @member {Array.<number>} refetch_chunks
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.refetch_chunks = $util.emptyArray;

            /**
             * ResponseApplySnapshotChunk reject_senders.
             * @member {Array.<string>} reject_senders
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             */
            ResponseApplySnapshotChunk.prototype.reject_senders = $util.emptyArray;

            /**
             * Encodes the specified ResponseApplySnapshotChunk message. Does not implicitly {@link tendermint.abci.ResponseApplySnapshotChunk.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseApplySnapshotChunk} message ResponseApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseApplySnapshotChunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                if (message.refetch_chunks != null && message.refetch_chunks.length) {
                    writer.uint32(/* id 2, wireType 2 =*/18).fork();
                    for (let i = 0; i < message.refetch_chunks.length; ++i)
                        writer.uint32(message.refetch_chunks[i]);
                    writer.ldelim();
                }
                if (message.reject_senders != null && message.reject_senders.length)
                    for (let i = 0; i < message.reject_senders.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.reject_senders[i]);
                return writer;
            };

            /**
             * Encodes the specified ResponseApplySnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.ResponseApplySnapshotChunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {tendermint.abci.IResponseApplySnapshotChunk} message ResponseApplySnapshotChunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseApplySnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResponseApplySnapshotChunk message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseApplySnapshotChunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseApplySnapshotChunk();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = reader.int32();
                        break;
                    case 2:
                        if (!(message.refetch_chunks && message.refetch_chunks.length))
                            message.refetch_chunks = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.refetch_chunks.push(reader.uint32());
                        } else
                            message.refetch_chunks.push(reader.uint32());
                        break;
                    case 3:
                        if (!(message.reject_senders && message.reject_senders.length))
                            message.reject_senders = [];
                        message.reject_senders.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResponseApplySnapshotChunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseApplySnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResponseApplySnapshotChunk message.
             * @function verify
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseApplySnapshotChunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result"))
                    switch (message.result) {
                    default:
                        return "result: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.refetch_chunks != null && message.hasOwnProperty("refetch_chunks")) {
                    if (!Array.isArray(message.refetch_chunks))
                        return "refetch_chunks: array expected";
                    for (let i = 0; i < message.refetch_chunks.length; ++i)
                        if (!$util.isInteger(message.refetch_chunks[i]))
                            return "refetch_chunks: integer[] expected";
                }
                if (message.reject_senders != null && message.hasOwnProperty("reject_senders")) {
                    if (!Array.isArray(message.reject_senders))
                        return "reject_senders: array expected";
                    for (let i = 0; i < message.reject_senders.length; ++i)
                        if (!$util.isString(message.reject_senders[i]))
                            return "reject_senders: string[] expected";
                }
                return null;
            };

            /**
             * Creates a ResponseApplySnapshotChunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
             */
            ResponseApplySnapshotChunk.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ResponseApplySnapshotChunk)
                    return object;
                let message = new $root.tendermint.abci.ResponseApplySnapshotChunk();
                switch (object.result) {
                case "UNKNOWN":
                case 0:
                    message.result = 0;
                    break;
                case "ACCEPT":
                case 1:
                    message.result = 1;
                    break;
                case "ABORT":
                case 2:
                    message.result = 2;
                    break;
                case "RETRY":
                case 3:
                    message.result = 3;
                    break;
                case "RETRY_SNAPSHOT":
                case 4:
                    message.result = 4;
                    break;
                case "REJECT_SNAPSHOT":
                case 5:
                    message.result = 5;
                    break;
                }
                if (object.refetch_chunks) {
                    if (!Array.isArray(object.refetch_chunks))
                        throw TypeError(".tendermint.abci.ResponseApplySnapshotChunk.refetch_chunks: array expected");
                    message.refetch_chunks = [];
                    for (let i = 0; i < object.refetch_chunks.length; ++i)
                        message.refetch_chunks[i] = object.refetch_chunks[i] >>> 0;
                }
                if (object.reject_senders) {
                    if (!Array.isArray(object.reject_senders))
                        throw TypeError(".tendermint.abci.ResponseApplySnapshotChunk.reject_senders: array expected");
                    message.reject_senders = [];
                    for (let i = 0; i < object.reject_senders.length; ++i)
                        message.reject_senders[i] = String(object.reject_senders[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a ResponseApplySnapshotChunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @static
             * @param {tendermint.abci.ResponseApplySnapshotChunk} message ResponseApplySnapshotChunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseApplySnapshotChunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.refetch_chunks = [];
                    object.reject_senders = [];
                }
                if (options.defaults)
                    object.result = options.enums === String ? "UNKNOWN" : 0;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = options.enums === String ? $root.tendermint.abci.ResponseApplySnapshotChunk.Result[message.result] : message.result;
                if (message.refetch_chunks && message.refetch_chunks.length) {
                    object.refetch_chunks = [];
                    for (let j = 0; j < message.refetch_chunks.length; ++j)
                        object.refetch_chunks[j] = message.refetch_chunks[j];
                }
                if (message.reject_senders && message.reject_senders.length) {
                    object.reject_senders = [];
                    for (let j = 0; j < message.reject_senders.length; ++j)
                        object.reject_senders[j] = message.reject_senders[j];
                }
                return object;
            };

            /**
             * Converts this ResponseApplySnapshotChunk to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ResponseApplySnapshotChunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseApplySnapshotChunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Result enum.
             * @name tendermint.abci.ResponseApplySnapshotChunk.Result
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} ACCEPT=1 ACCEPT value
             * @property {number} ABORT=2 ABORT value
             * @property {number} RETRY=3 RETRY value
             * @property {number} RETRY_SNAPSHOT=4 RETRY_SNAPSHOT value
             * @property {number} REJECT_SNAPSHOT=5 REJECT_SNAPSHOT value
             */
            ResponseApplySnapshotChunk.Result = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "ACCEPT"] = 1;
                values[valuesById[2] = "ABORT"] = 2;
                values[valuesById[3] = "RETRY"] = 3;
                values[valuesById[4] = "RETRY_SNAPSHOT"] = 4;
                values[valuesById[5] = "REJECT_SNAPSHOT"] = 5;
                return values;
            })();

            return ResponseApplySnapshotChunk;
        })();

        abci.ConsensusParams = (function() {

            /**
             * Properties of a ConsensusParams.
             * @memberof tendermint.abci
             * @interface IConsensusParams
             * @property {tendermint.abci.IBlockParams|null} [block] ConsensusParams block
             * @property {tendermint.types.IEvidenceParams|null} [evidence] ConsensusParams evidence
             * @property {tendermint.types.IValidatorParams|null} [validator] ConsensusParams validator
             * @property {tendermint.types.IVersionParams|null} [version] ConsensusParams version
             */

            /**
             * Constructs a new ConsensusParams.
             * @memberof tendermint.abci
             * @classdesc Represents a ConsensusParams.
             * @implements IConsensusParams
             * @constructor
             * @param {tendermint.abci.IConsensusParams=} [properties] Properties to set
             */
            function ConsensusParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsensusParams block.
             * @member {tendermint.abci.IBlockParams|null|undefined} block
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.block = null;

            /**
             * ConsensusParams evidence.
             * @member {tendermint.types.IEvidenceParams|null|undefined} evidence
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.evidence = null;

            /**
             * ConsensusParams validator.
             * @member {tendermint.types.IValidatorParams|null|undefined} validator
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.validator = null;

            /**
             * ConsensusParams version.
             * @member {tendermint.types.IVersionParams|null|undefined} version
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.version = null;

            /**
             * Encodes the specified ConsensusParams message. Does not implicitly {@link tendermint.abci.ConsensusParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {tendermint.abci.IConsensusParams} message ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    $root.tendermint.abci.BlockParams.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.evidence != null && Object.hasOwnProperty.call(message, "evidence"))
                    $root.tendermint.types.EvidenceParams.encode(message.evidence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    $root.tendermint.types.ValidatorParams.encode(message.validator, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    $root.tendermint.types.VersionParams.encode(message.version, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConsensusParams message, length delimited. Does not implicitly {@link tendermint.abci.ConsensusParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {tendermint.abci.IConsensusParams} message ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ConsensusParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = $root.tendermint.abci.BlockParams.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.evidence = $root.tendermint.types.EvidenceParams.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.validator = $root.tendermint.types.ValidatorParams.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.version = $root.tendermint.types.VersionParams.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsensusParams message.
             * @function verify
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsensusParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block")) {
                    let error = $root.tendermint.abci.BlockParams.verify(message.block);
                    if (error)
                        return "block." + error;
                }
                if (message.evidence != null && message.hasOwnProperty("evidence")) {
                    let error = $root.tendermint.types.EvidenceParams.verify(message.evidence);
                    if (error)
                        return "evidence." + error;
                }
                if (message.validator != null && message.hasOwnProperty("validator")) {
                    let error = $root.tendermint.types.ValidatorParams.verify(message.validator);
                    if (error)
                        return "validator." + error;
                }
                if (message.version != null && message.hasOwnProperty("version")) {
                    let error = $root.tendermint.types.VersionParams.verify(message.version);
                    if (error)
                        return "version." + error;
                }
                return null;
            };

            /**
             * Creates a ConsensusParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ConsensusParams} ConsensusParams
             */
            ConsensusParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ConsensusParams)
                    return object;
                let message = new $root.tendermint.abci.ConsensusParams();
                if (object.block != null) {
                    if (typeof object.block !== "object")
                        throw TypeError(".tendermint.abci.ConsensusParams.block: object expected");
                    message.block = $root.tendermint.abci.BlockParams.fromObject(object.block);
                }
                if (object.evidence != null) {
                    if (typeof object.evidence !== "object")
                        throw TypeError(".tendermint.abci.ConsensusParams.evidence: object expected");
                    message.evidence = $root.tendermint.types.EvidenceParams.fromObject(object.evidence);
                }
                if (object.validator != null) {
                    if (typeof object.validator !== "object")
                        throw TypeError(".tendermint.abci.ConsensusParams.validator: object expected");
                    message.validator = $root.tendermint.types.ValidatorParams.fromObject(object.validator);
                }
                if (object.version != null) {
                    if (typeof object.version !== "object")
                        throw TypeError(".tendermint.abci.ConsensusParams.version: object expected");
                    message.version = $root.tendermint.types.VersionParams.fromObject(object.version);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConsensusParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ConsensusParams
             * @static
             * @param {tendermint.abci.ConsensusParams} message ConsensusParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsensusParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block = null;
                    object.evidence = null;
                    object.validator = null;
                    object.version = null;
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    object.block = $root.tendermint.abci.BlockParams.toObject(message.block, options);
                if (message.evidence != null && message.hasOwnProperty("evidence"))
                    object.evidence = $root.tendermint.types.EvidenceParams.toObject(message.evidence, options);
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = $root.tendermint.types.ValidatorParams.toObject(message.validator, options);
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = $root.tendermint.types.VersionParams.toObject(message.version, options);
                return object;
            };

            /**
             * Converts this ConsensusParams to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ConsensusParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsensusParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConsensusParams;
        })();

        abci.BlockParams = (function() {

            /**
             * Properties of a BlockParams.
             * @memberof tendermint.abci
             * @interface IBlockParams
             * @property {number|null} [max_bytes] BlockParams max_bytes
             * @property {number|null} [max_gas] BlockParams max_gas
             */

            /**
             * Constructs a new BlockParams.
             * @memberof tendermint.abci
             * @classdesc Represents a BlockParams.
             * @implements IBlockParams
             * @constructor
             * @param {tendermint.abci.IBlockParams=} [properties] Properties to set
             */
            function BlockParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockParams max_bytes.
             * @member {number} max_bytes
             * @memberof tendermint.abci.BlockParams
             * @instance
             */
            BlockParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockParams max_gas.
             * @member {number} max_gas
             * @memberof tendermint.abci.BlockParams
             * @instance
             */
            BlockParams.prototype.max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockParams message. Does not implicitly {@link tendermint.abci.BlockParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {tendermint.abci.IBlockParams} message BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.max_bytes != null && Object.hasOwnProperty.call(message, "max_bytes"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_bytes);
                if (message.max_gas != null && Object.hasOwnProperty.call(message, "max_gas"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.max_gas);
                return writer;
            };

            /**
             * Encodes the specified BlockParams message, length delimited. Does not implicitly {@link tendermint.abci.BlockParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {tendermint.abci.IBlockParams} message BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.BlockParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.max_bytes = reader.int64();
                        break;
                    case 2:
                        message.max_gas = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockParams message.
             * @function verify
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (!$util.isInteger(message.max_bytes) && !(message.max_bytes && $util.isInteger(message.max_bytes.low) && $util.isInteger(message.max_bytes.high)))
                        return "max_bytes: integer|Long expected";
                if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                    if (!$util.isInteger(message.max_gas) && !(message.max_gas && $util.isInteger(message.max_gas.low) && $util.isInteger(message.max_gas.high)))
                        return "max_gas: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.BlockParams} BlockParams
             */
            BlockParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.BlockParams)
                    return object;
                let message = new $root.tendermint.abci.BlockParams();
                if (object.max_bytes != null)
                    if ($util.Long)
                        (message.max_bytes = $util.Long.fromValue(object.max_bytes)).unsigned = false;
                    else if (typeof object.max_bytes === "string")
                        message.max_bytes = parseInt(object.max_bytes, 10);
                    else if (typeof object.max_bytes === "number")
                        message.max_bytes = object.max_bytes;
                    else if (typeof object.max_bytes === "object")
                        message.max_bytes = new $util.LongBits(object.max_bytes.low >>> 0, object.max_bytes.high >>> 0).toNumber();
                if (object.max_gas != null)
                    if ($util.Long)
                        (message.max_gas = $util.Long.fromValue(object.max_gas)).unsigned = false;
                    else if (typeof object.max_gas === "string")
                        message.max_gas = parseInt(object.max_gas, 10);
                    else if (typeof object.max_gas === "number")
                        message.max_gas = object.max_gas;
                    else if (typeof object.max_gas === "object")
                        message.max_gas = new $util.LongBits(object.max_gas.low >>> 0, object.max_gas.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.BlockParams
             * @static
             * @param {tendermint.abci.BlockParams} message BlockParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_bytes = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_gas = options.longs === String ? "0" : 0;
                }
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (typeof message.max_bytes === "number")
                        object.max_bytes = options.longs === String ? String(message.max_bytes) : message.max_bytes;
                    else
                        object.max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.max_bytes) : options.longs === Number ? new $util.LongBits(message.max_bytes.low >>> 0, message.max_bytes.high >>> 0).toNumber() : message.max_bytes;
                if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                    if (typeof message.max_gas === "number")
                        object.max_gas = options.longs === String ? String(message.max_gas) : message.max_gas;
                    else
                        object.max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.max_gas) : options.longs === Number ? new $util.LongBits(message.max_gas.low >>> 0, message.max_gas.high >>> 0).toNumber() : message.max_gas;
                return object;
            };

            /**
             * Converts this BlockParams to JSON.
             * @function toJSON
             * @memberof tendermint.abci.BlockParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockParams;
        })();

        abci.LastCommitInfo = (function() {

            /**
             * Properties of a LastCommitInfo.
             * @memberof tendermint.abci
             * @interface ILastCommitInfo
             * @property {number|null} [round] LastCommitInfo round
             * @property {Array.<tendermint.abci.IVoteInfo>|null} [votes] LastCommitInfo votes
             */

            /**
             * Constructs a new LastCommitInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a LastCommitInfo.
             * @implements ILastCommitInfo
             * @constructor
             * @param {tendermint.abci.ILastCommitInfo=} [properties] Properties to set
             */
            function LastCommitInfo(properties) {
                this.votes = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LastCommitInfo round.
             * @member {number} round
             * @memberof tendermint.abci.LastCommitInfo
             * @instance
             */
            LastCommitInfo.prototype.round = 0;

            /**
             * LastCommitInfo votes.
             * @member {Array.<tendermint.abci.IVoteInfo>} votes
             * @memberof tendermint.abci.LastCommitInfo
             * @instance
             */
            LastCommitInfo.prototype.votes = $util.emptyArray;

            /**
             * Encodes the specified LastCommitInfo message. Does not implicitly {@link tendermint.abci.LastCommitInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {tendermint.abci.ILastCommitInfo} message LastCommitInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastCommitInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.round);
                if (message.votes != null && message.votes.length)
                    for (let i = 0; i < message.votes.length; ++i)
                        $root.tendermint.abci.VoteInfo.encode(message.votes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LastCommitInfo message, length delimited. Does not implicitly {@link tendermint.abci.LastCommitInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {tendermint.abci.ILastCommitInfo} message LastCommitInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastCommitInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LastCommitInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastCommitInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.LastCommitInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.round = reader.int32();
                        break;
                    case 2:
                        if (!(message.votes && message.votes.length))
                            message.votes = [];
                        message.votes.push($root.tendermint.abci.VoteInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LastCommitInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastCommitInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LastCommitInfo message.
             * @function verify
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LastCommitInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.votes != null && message.hasOwnProperty("votes")) {
                    if (!Array.isArray(message.votes))
                        return "votes: array expected";
                    for (let i = 0; i < message.votes.length; ++i) {
                        let error = $root.tendermint.abci.VoteInfo.verify(message.votes[i]);
                        if (error)
                            return "votes." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LastCommitInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
             */
            LastCommitInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.LastCommitInfo)
                    return object;
                let message = new $root.tendermint.abci.LastCommitInfo();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.votes) {
                    if (!Array.isArray(object.votes))
                        throw TypeError(".tendermint.abci.LastCommitInfo.votes: array expected");
                    message.votes = [];
                    for (let i = 0; i < object.votes.length; ++i) {
                        if (typeof object.votes[i] !== "object")
                            throw TypeError(".tendermint.abci.LastCommitInfo.votes: object expected");
                        message.votes[i] = $root.tendermint.abci.VoteInfo.fromObject(object.votes[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LastCommitInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.LastCommitInfo
             * @static
             * @param {tendermint.abci.LastCommitInfo} message LastCommitInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LastCommitInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.votes = [];
                if (options.defaults)
                    object.round = 0;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.votes && message.votes.length) {
                    object.votes = [];
                    for (let j = 0; j < message.votes.length; ++j)
                        object.votes[j] = $root.tendermint.abci.VoteInfo.toObject(message.votes[j], options);
                }
                return object;
            };

            /**
             * Converts this LastCommitInfo to JSON.
             * @function toJSON
             * @memberof tendermint.abci.LastCommitInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LastCommitInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LastCommitInfo;
        })();

        abci.Event = (function() {

            /**
             * Properties of an Event.
             * @memberof tendermint.abci
             * @interface IEvent
             * @property {string|null} [type] Event type
             * @property {Array.<tendermint.abci.IEventAttribute>|null} [attributes] Event attributes
             */

            /**
             * Constructs a new Event.
             * @memberof tendermint.abci
             * @classdesc Represents an Event.
             * @implements IEvent
             * @constructor
             * @param {tendermint.abci.IEvent=} [properties] Properties to set
             */
            function Event(properties) {
                this.attributes = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Event type.
             * @member {string} type
             * @memberof tendermint.abci.Event
             * @instance
             */
            Event.prototype.type = "";

            /**
             * Event attributes.
             * @member {Array.<tendermint.abci.IEventAttribute>} attributes
             * @memberof tendermint.abci.Event
             * @instance
             */
            Event.prototype.attributes = $util.emptyArray;

            /**
             * Encodes the specified Event message. Does not implicitly {@link tendermint.abci.Event.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Event
             * @static
             * @param {tendermint.abci.IEvent} message Event message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Event.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.attributes != null && message.attributes.length)
                    for (let i = 0; i < message.attributes.length; ++i)
                        $root.tendermint.abci.EventAttribute.encode(message.attributes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Event message, length delimited. Does not implicitly {@link tendermint.abci.Event.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Event
             * @static
             * @param {tendermint.abci.IEvent} message Event message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Event.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Event message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Event
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Event} Event
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Event.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Event();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        if (!(message.attributes && message.attributes.length))
                            message.attributes = [];
                        message.attributes.push($root.tendermint.abci.EventAttribute.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Event message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Event
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Event} Event
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Event.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Event message.
             * @function verify
             * @memberof tendermint.abci.Event
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Event.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.attributes != null && message.hasOwnProperty("attributes")) {
                    if (!Array.isArray(message.attributes))
                        return "attributes: array expected";
                    for (let i = 0; i < message.attributes.length; ++i) {
                        let error = $root.tendermint.abci.EventAttribute.verify(message.attributes[i]);
                        if (error)
                            return "attributes." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an Event message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Event
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Event} Event
             */
            Event.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Event)
                    return object;
                let message = new $root.tendermint.abci.Event();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.attributes) {
                    if (!Array.isArray(object.attributes))
                        throw TypeError(".tendermint.abci.Event.attributes: array expected");
                    message.attributes = [];
                    for (let i = 0; i < object.attributes.length; ++i) {
                        if (typeof object.attributes[i] !== "object")
                            throw TypeError(".tendermint.abci.Event.attributes: object expected");
                        message.attributes[i] = $root.tendermint.abci.EventAttribute.fromObject(object.attributes[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an Event message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Event
             * @static
             * @param {tendermint.abci.Event} message Event
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Event.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.attributes = [];
                if (options.defaults)
                    object.type = "";
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.attributes && message.attributes.length) {
                    object.attributes = [];
                    for (let j = 0; j < message.attributes.length; ++j)
                        object.attributes[j] = $root.tendermint.abci.EventAttribute.toObject(message.attributes[j], options);
                }
                return object;
            };

            /**
             * Converts this Event to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Event
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Event.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Event;
        })();

        abci.EventAttribute = (function() {

            /**
             * Properties of an EventAttribute.
             * @memberof tendermint.abci
             * @interface IEventAttribute
             * @property {Uint8Array|null} [key] EventAttribute key
             * @property {Uint8Array|null} [value] EventAttribute value
             * @property {boolean|null} [index] EventAttribute index
             */

            /**
             * Constructs a new EventAttribute.
             * @memberof tendermint.abci
             * @classdesc Represents an EventAttribute.
             * @implements IEventAttribute
             * @constructor
             * @param {tendermint.abci.IEventAttribute=} [properties] Properties to set
             */
            function EventAttribute(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventAttribute key.
             * @member {Uint8Array} key
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.key = $util.newBuffer([]);

            /**
             * EventAttribute value.
             * @member {Uint8Array} value
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.value = $util.newBuffer([]);

            /**
             * EventAttribute index.
             * @member {boolean} index
             * @memberof tendermint.abci.EventAttribute
             * @instance
             */
            EventAttribute.prototype.index = false;

            /**
             * Encodes the specified EventAttribute message. Does not implicitly {@link tendermint.abci.EventAttribute.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {tendermint.abci.IEventAttribute} message EventAttribute message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAttribute.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.index);
                return writer;
            };

            /**
             * Encodes the specified EventAttribute message, length delimited. Does not implicitly {@link tendermint.abci.EventAttribute.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {tendermint.abci.IEventAttribute} message EventAttribute message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAttribute.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventAttribute message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.EventAttribute} EventAttribute
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAttribute.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.EventAttribute();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.bytes();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    case 3:
                        message.index = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventAttribute message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.EventAttribute} EventAttribute
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAttribute.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventAttribute message.
             * @function verify
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventAttribute.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (typeof message.index !== "boolean")
                        return "index: boolean expected";
                return null;
            };

            /**
             * Creates an EventAttribute message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.EventAttribute} EventAttribute
             */
            EventAttribute.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.EventAttribute)
                    return object;
                let message = new $root.tendermint.abci.EventAttribute();
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                if (object.index != null)
                    message.index = Boolean(object.index);
                return message;
            };

            /**
             * Creates a plain object from an EventAttribute message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.EventAttribute
             * @static
             * @param {tendermint.abci.EventAttribute} message EventAttribute
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventAttribute.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                    object.index = false;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                return object;
            };

            /**
             * Converts this EventAttribute to JSON.
             * @function toJSON
             * @memberof tendermint.abci.EventAttribute
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventAttribute.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventAttribute;
        })();

        abci.TxResult = (function() {

            /**
             * Properties of a TxResult.
             * @memberof tendermint.abci
             * @interface ITxResult
             * @property {number|null} [height] TxResult height
             * @property {number|null} [index] TxResult index
             * @property {Uint8Array|null} [tx] TxResult tx
             * @property {tendermint.abci.IResponseDeliverTx|null} [result] TxResult result
             */

            /**
             * Constructs a new TxResult.
             * @memberof tendermint.abci
             * @classdesc Represents a TxResult.
             * @implements ITxResult
             * @constructor
             * @param {tendermint.abci.ITxResult=} [properties] Properties to set
             */
            function TxResult(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TxResult height.
             * @member {number} height
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TxResult index.
             * @member {number} index
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.index = 0;

            /**
             * TxResult tx.
             * @member {Uint8Array} tx
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.tx = $util.newBuffer([]);

            /**
             * TxResult result.
             * @member {tendermint.abci.IResponseDeliverTx|null|undefined} result
             * @memberof tendermint.abci.TxResult
             * @instance
             */
            TxResult.prototype.result = null;

            /**
             * Encodes the specified TxResult message. Does not implicitly {@link tendermint.abci.TxResult.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {tendermint.abci.ITxResult} message TxResult message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxResult.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
                if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.tx);
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    $root.tendermint.abci.ResponseDeliverTx.encode(message.result, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TxResult message, length delimited. Does not implicitly {@link tendermint.abci.TxResult.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {tendermint.abci.ITxResult} message TxResult message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxResult.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TxResult message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.TxResult} TxResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxResult.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.TxResult();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.index = reader.uint32();
                        break;
                    case 3:
                        message.tx = reader.bytes();
                        break;
                    case 4:
                        message.result = $root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TxResult message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.TxResult} TxResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxResult.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TxResult message.
             * @function verify
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TxResult.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.tx != null && message.hasOwnProperty("tx"))
                    if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                        return "tx: buffer expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    let error = $root.tendermint.abci.ResponseDeliverTx.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };

            /**
             * Creates a TxResult message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.TxResult} TxResult
             */
            TxResult.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.TxResult)
                    return object;
                let message = new $root.tendermint.abci.TxResult();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.tx != null)
                    if (typeof object.tx === "string")
                        $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                    else if (object.tx.length)
                        message.tx = object.tx;
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".tendermint.abci.TxResult.result: object expected");
                    message.result = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.result);
                }
                return message;
            };

            /**
             * Creates a plain object from a TxResult message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.TxResult
             * @static
             * @param {tendermint.abci.TxResult} message TxResult
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TxResult.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.index = 0;
                    if (options.bytes === String)
                        object.tx = "";
                    else {
                        object.tx = [];
                        if (options.bytes !== Array)
                            object.tx = $util.newBuffer(object.tx);
                    }
                    object.result = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.tx != null && message.hasOwnProperty("tx"))
                    object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.tendermint.abci.ResponseDeliverTx.toObject(message.result, options);
                return object;
            };

            /**
             * Converts this TxResult to JSON.
             * @function toJSON
             * @memberof tendermint.abci.TxResult
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TxResult.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TxResult;
        })();

        abci.Validator = (function() {

            /**
             * Properties of a Validator.
             * @memberof tendermint.abci
             * @interface IValidator
             * @property {Uint8Array|null} [address] Validator address
             * @property {number|null} [power] Validator power
             */

            /**
             * Constructs a new Validator.
             * @memberof tendermint.abci
             * @classdesc Represents a Validator.
             * @implements IValidator
             * @constructor
             * @param {tendermint.abci.IValidator=} [properties] Properties to set
             */
            function Validator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Validator address.
             * @member {Uint8Array} address
             * @memberof tendermint.abci.Validator
             * @instance
             */
            Validator.prototype.address = $util.newBuffer([]);

            /**
             * Validator power.
             * @member {number} power
             * @memberof tendermint.abci.Validator
             * @instance
             */
            Validator.prototype.power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified Validator message. Does not implicitly {@link tendermint.abci.Validator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Validator
             * @static
             * @param {tendermint.abci.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.address);
                if (message.power != null && Object.hasOwnProperty.call(message, "power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.power);
                return writer;
            };

            /**
             * Encodes the specified Validator message, length delimited. Does not implicitly {@link tendermint.abci.Validator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Validator
             * @static
             * @param {tendermint.abci.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Validator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Validator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.bytes();
                        break;
                    case 3:
                        message.power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Validator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Validator message.
             * @function verify
             * @memberof tendermint.abci.Validator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Validator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!(message.address && typeof message.address.length === "number" || $util.isString(message.address)))
                        return "address: buffer expected";
                if (message.power != null && message.hasOwnProperty("power"))
                    if (!$util.isInteger(message.power) && !(message.power && $util.isInteger(message.power.low) && $util.isInteger(message.power.high)))
                        return "power: integer|Long expected";
                return null;
            };

            /**
             * Creates a Validator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Validator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Validator} Validator
             */
            Validator.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Validator)
                    return object;
                let message = new $root.tendermint.abci.Validator();
                if (object.address != null)
                    if (typeof object.address === "string")
                        $util.base64.decode(object.address, message.address = $util.newBuffer($util.base64.length(object.address)), 0);
                    else if (object.address.length)
                        message.address = object.address;
                if (object.power != null)
                    if ($util.Long)
                        (message.power = $util.Long.fromValue(object.power)).unsigned = false;
                    else if (typeof object.power === "string")
                        message.power = parseInt(object.power, 10);
                    else if (typeof object.power === "number")
                        message.power = object.power;
                    else if (typeof object.power === "object")
                        message.power = new $util.LongBits(object.power.low >>> 0, object.power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a Validator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Validator
             * @static
             * @param {tendermint.abci.Validator} message Validator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Validator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.address = "";
                    else {
                        object.address = [];
                        if (options.bytes !== Array)
                            object.address = $util.newBuffer(object.address);
                    }
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.power = options.longs === String ? "0" : 0;
                }
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = options.bytes === String ? $util.base64.encode(message.address, 0, message.address.length) : options.bytes === Array ? Array.prototype.slice.call(message.address) : message.address;
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power === "number")
                        object.power = options.longs === String ? String(message.power) : message.power;
                    else
                        object.power = options.longs === String ? $util.Long.prototype.toString.call(message.power) : options.longs === Number ? new $util.LongBits(message.power.low >>> 0, message.power.high >>> 0).toNumber() : message.power;
                return object;
            };

            /**
             * Converts this Validator to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Validator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Validator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Validator;
        })();

        abci.ValidatorUpdate = (function() {

            /**
             * Properties of a ValidatorUpdate.
             * @memberof tendermint.abci
             * @interface IValidatorUpdate
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] ValidatorUpdate pub_key
             * @property {number|null} [power] ValidatorUpdate power
             */

            /**
             * Constructs a new ValidatorUpdate.
             * @memberof tendermint.abci
             * @classdesc Represents a ValidatorUpdate.
             * @implements IValidatorUpdate
             * @constructor
             * @param {tendermint.abci.IValidatorUpdate=} [properties] Properties to set
             */
            function ValidatorUpdate(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValidatorUpdate pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.abci.ValidatorUpdate
             * @instance
             */
            ValidatorUpdate.prototype.pub_key = null;

            /**
             * ValidatorUpdate power.
             * @member {number} power
             * @memberof tendermint.abci.ValidatorUpdate
             * @instance
             */
            ValidatorUpdate.prototype.power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ValidatorUpdate message. Does not implicitly {@link tendermint.abci.ValidatorUpdate.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {tendermint.abci.IValidatorUpdate} message ValidatorUpdate message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorUpdate.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.power != null && Object.hasOwnProperty.call(message, "power"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.power);
                return writer;
            };

            /**
             * Encodes the specified ValidatorUpdate message, length delimited. Does not implicitly {@link tendermint.abci.ValidatorUpdate.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {tendermint.abci.IValidatorUpdate} message ValidatorUpdate message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValidatorUpdate message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorUpdate.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ValidatorUpdate();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValidatorUpdate message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorUpdate.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValidatorUpdate message.
             * @function verify
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValidatorUpdate.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.power != null && message.hasOwnProperty("power"))
                    if (!$util.isInteger(message.power) && !(message.power && $util.isInteger(message.power.low) && $util.isInteger(message.power.high)))
                        return "power: integer|Long expected";
                return null;
            };

            /**
             * Creates a ValidatorUpdate message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
             */
            ValidatorUpdate.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.ValidatorUpdate)
                    return object;
                let message = new $root.tendermint.abci.ValidatorUpdate();
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.abci.ValidatorUpdate.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.power != null)
                    if ($util.Long)
                        (message.power = $util.Long.fromValue(object.power)).unsigned = false;
                    else if (typeof object.power === "string")
                        message.power = parseInt(object.power, 10);
                    else if (typeof object.power === "number")
                        message.power = object.power;
                    else if (typeof object.power === "object")
                        message.power = new $util.LongBits(object.power.low >>> 0, object.power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ValidatorUpdate message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.ValidatorUpdate
             * @static
             * @param {tendermint.abci.ValidatorUpdate} message ValidatorUpdate
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValidatorUpdate.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pub_key = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.power = options.longs === String ? "0" : 0;
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power === "number")
                        object.power = options.longs === String ? String(message.power) : message.power;
                    else
                        object.power = options.longs === String ? $util.Long.prototype.toString.call(message.power) : options.longs === Number ? new $util.LongBits(message.power.low >>> 0, message.power.high >>> 0).toNumber() : message.power;
                return object;
            };

            /**
             * Converts this ValidatorUpdate to JSON.
             * @function toJSON
             * @memberof tendermint.abci.ValidatorUpdate
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValidatorUpdate.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValidatorUpdate;
        })();

        abci.VoteInfo = (function() {

            /**
             * Properties of a VoteInfo.
             * @memberof tendermint.abci
             * @interface IVoteInfo
             * @property {tendermint.abci.IValidator|null} [validator] VoteInfo validator
             * @property {boolean|null} [signed_last_block] VoteInfo signed_last_block
             */

            /**
             * Constructs a new VoteInfo.
             * @memberof tendermint.abci
             * @classdesc Represents a VoteInfo.
             * @implements IVoteInfo
             * @constructor
             * @param {tendermint.abci.IVoteInfo=} [properties] Properties to set
             */
            function VoteInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VoteInfo validator.
             * @member {tendermint.abci.IValidator|null|undefined} validator
             * @memberof tendermint.abci.VoteInfo
             * @instance
             */
            VoteInfo.prototype.validator = null;

            /**
             * VoteInfo signed_last_block.
             * @member {boolean} signed_last_block
             * @memberof tendermint.abci.VoteInfo
             * @instance
             */
            VoteInfo.prototype.signed_last_block = false;

            /**
             * Encodes the specified VoteInfo message. Does not implicitly {@link tendermint.abci.VoteInfo.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {tendermint.abci.IVoteInfo} message VoteInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    $root.tendermint.abci.Validator.encode(message.validator, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.signed_last_block != null && Object.hasOwnProperty.call(message, "signed_last_block"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.signed_last_block);
                return writer;
            };

            /**
             * Encodes the specified VoteInfo message, length delimited. Does not implicitly {@link tendermint.abci.VoteInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {tendermint.abci.IVoteInfo} message VoteInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VoteInfo message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.VoteInfo} VoteInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.VoteInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator = $root.tendermint.abci.Validator.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.signed_last_block = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VoteInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.VoteInfo} VoteInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VoteInfo message.
             * @function verify
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator != null && message.hasOwnProperty("validator")) {
                    let error = $root.tendermint.abci.Validator.verify(message.validator);
                    if (error)
                        return "validator." + error;
                }
                if (message.signed_last_block != null && message.hasOwnProperty("signed_last_block"))
                    if (typeof message.signed_last_block !== "boolean")
                        return "signed_last_block: boolean expected";
                return null;
            };

            /**
             * Creates a VoteInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.VoteInfo} VoteInfo
             */
            VoteInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.VoteInfo)
                    return object;
                let message = new $root.tendermint.abci.VoteInfo();
                if (object.validator != null) {
                    if (typeof object.validator !== "object")
                        throw TypeError(".tendermint.abci.VoteInfo.validator: object expected");
                    message.validator = $root.tendermint.abci.Validator.fromObject(object.validator);
                }
                if (object.signed_last_block != null)
                    message.signed_last_block = Boolean(object.signed_last_block);
                return message;
            };

            /**
             * Creates a plain object from a VoteInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.VoteInfo
             * @static
             * @param {tendermint.abci.VoteInfo} message VoteInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.validator = null;
                    object.signed_last_block = false;
                }
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = $root.tendermint.abci.Validator.toObject(message.validator, options);
                if (message.signed_last_block != null && message.hasOwnProperty("signed_last_block"))
                    object.signed_last_block = message.signed_last_block;
                return object;
            };

            /**
             * Converts this VoteInfo to JSON.
             * @function toJSON
             * @memberof tendermint.abci.VoteInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VoteInfo;
        })();

        abci.Evidence = (function() {

            /**
             * Properties of an Evidence.
             * @memberof tendermint.abci
             * @interface IEvidence
             * @property {string|null} [type] Evidence type
             * @property {tendermint.abci.IValidator|null} [validator] Evidence validator
             * @property {number|null} [height] Evidence height
             * @property {google.protobuf.ITimestamp|null} [time] Evidence time
             * @property {number|null} [total_voting_power] Evidence total_voting_power
             */

            /**
             * Constructs a new Evidence.
             * @memberof tendermint.abci
             * @classdesc Represents an Evidence.
             * @implements IEvidence
             * @constructor
             * @param {tendermint.abci.IEvidence=} [properties] Properties to set
             */
            function Evidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Evidence type.
             * @member {string} type
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.type = "";

            /**
             * Evidence validator.
             * @member {tendermint.abci.IValidator|null|undefined} validator
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.validator = null;

            /**
             * Evidence height.
             * @member {number} height
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Evidence time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.time = null;

            /**
             * Evidence total_voting_power.
             * @member {number} total_voting_power
             * @memberof tendermint.abci.Evidence
             * @instance
             */
            Evidence.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified Evidence message. Does not implicitly {@link tendermint.abci.Evidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {tendermint.abci.IEvidence} message Evidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    $root.tendermint.abci.Validator.encode(message.validator, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.total_voting_power);
                return writer;
            };

            /**
             * Encodes the specified Evidence message, length delimited. Does not implicitly {@link tendermint.abci.Evidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {tendermint.abci.IEvidence} message Evidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Evidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        message.validator = $root.tendermint.abci.Validator.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.height = reader.int64();
                        break;
                    case 4:
                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.total_voting_power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Evidence message.
             * @function verify
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Evidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.validator != null && message.hasOwnProperty("validator")) {
                    let error = $root.tendermint.abci.Validator.verify(message.validator);
                    if (error)
                        return "validator." + error;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.time != null && message.hasOwnProperty("time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.time);
                    if (error)
                        return "time." + error;
                }
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                        return "total_voting_power: integer|Long expected";
                return null;
            };

            /**
             * Creates an Evidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Evidence} Evidence
             */
            Evidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Evidence)
                    return object;
                let message = new $root.tendermint.abci.Evidence();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.validator != null) {
                    if (typeof object.validator !== "object")
                        throw TypeError(".tendermint.abci.Evidence.validator: object expected");
                    message.validator = $root.tendermint.abci.Validator.fromObject(object.validator);
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.time != null) {
                    if (typeof object.time !== "object")
                        throw TypeError(".tendermint.abci.Evidence.time: object expected");
                    message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                }
                if (object.total_voting_power != null)
                    if ($util.Long)
                        (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                    else if (typeof object.total_voting_power === "string")
                        message.total_voting_power = parseInt(object.total_voting_power, 10);
                    else if (typeof object.total_voting_power === "number")
                        message.total_voting_power = object.total_voting_power;
                    else if (typeof object.total_voting_power === "object")
                        message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an Evidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Evidence
             * @static
             * @param {tendermint.abci.Evidence} message Evidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Evidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = "";
                    object.validator = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.time = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total_voting_power = options.longs === String ? "0" : 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = $root.tendermint.abci.Validator.toObject(message.validator, options);
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (typeof message.total_voting_power === "number")
                        object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                    else
                        object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                return object;
            };

            /**
             * Converts this Evidence to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Evidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Evidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Evidence;
        })();

        abci.Snapshot = (function() {

            /**
             * Properties of a Snapshot.
             * @memberof tendermint.abci
             * @interface ISnapshot
             * @property {number|null} [height] Snapshot height
             * @property {number|null} [format] Snapshot format
             * @property {number|null} [chunks] Snapshot chunks
             * @property {Uint8Array|null} [hash] Snapshot hash
             * @property {Uint8Array|null} [metadata] Snapshot metadata
             */

            /**
             * Constructs a new Snapshot.
             * @memberof tendermint.abci
             * @classdesc Represents a Snapshot.
             * @implements ISnapshot
             * @constructor
             * @param {tendermint.abci.ISnapshot=} [properties] Properties to set
             */
            function Snapshot(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Snapshot height.
             * @member {number} height
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Snapshot format.
             * @member {number} format
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.format = 0;

            /**
             * Snapshot chunks.
             * @member {number} chunks
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.chunks = 0;

            /**
             * Snapshot hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.hash = $util.newBuffer([]);

            /**
             * Snapshot metadata.
             * @member {Uint8Array} metadata
             * @memberof tendermint.abci.Snapshot
             * @instance
             */
            Snapshot.prototype.metadata = $util.newBuffer([]);

            /**
             * Encodes the specified Snapshot message. Does not implicitly {@link tendermint.abci.Snapshot.verify|verify} messages.
             * @function encode
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {tendermint.abci.ISnapshot} message Snapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Snapshot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                if (message.chunks != null && Object.hasOwnProperty.call(message, "chunks"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.chunks);
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.hash);
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.metadata);
                return writer;
            };

            /**
             * Encodes the specified Snapshot message, length delimited. Does not implicitly {@link tendermint.abci.Snapshot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {tendermint.abci.ISnapshot} message Snapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Snapshot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Snapshot message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.abci.Snapshot} Snapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Snapshot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Snapshot();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.uint64();
                        break;
                    case 2:
                        message.format = reader.uint32();
                        break;
                    case 3:
                        message.chunks = reader.uint32();
                        break;
                    case 4:
                        message.hash = reader.bytes();
                        break;
                    case 5:
                        message.metadata = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Snapshot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.abci.Snapshot} Snapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Snapshot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Snapshot message.
             * @function verify
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Snapshot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.format != null && message.hasOwnProperty("format"))
                    if (!$util.isInteger(message.format))
                        return "format: integer expected";
                if (message.chunks != null && message.hasOwnProperty("chunks"))
                    if (!$util.isInteger(message.chunks))
                        return "chunks: integer expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    if (!(message.metadata && typeof message.metadata.length === "number" || $util.isString(message.metadata)))
                        return "metadata: buffer expected";
                return null;
            };

            /**
             * Creates a Snapshot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.abci.Snapshot} Snapshot
             */
            Snapshot.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.abci.Snapshot)
                    return object;
                let message = new $root.tendermint.abci.Snapshot();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                if (object.format != null)
                    message.format = object.format >>> 0;
                if (object.chunks != null)
                    message.chunks = object.chunks >>> 0;
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.metadata != null)
                    if (typeof object.metadata === "string")
                        $util.base64.decode(object.metadata, message.metadata = $util.newBuffer($util.base64.length(object.metadata)), 0);
                    else if (object.metadata.length)
                        message.metadata = object.metadata;
                return message;
            };

            /**
             * Creates a plain object from a Snapshot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.abci.Snapshot
             * @static
             * @param {tendermint.abci.Snapshot} message Snapshot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Snapshot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.format = 0;
                    object.chunks = 0;
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    if (options.bytes === String)
                        object.metadata = "";
                    else {
                        object.metadata = [];
                        if (options.bytes !== Array)
                            object.metadata = $util.newBuffer(object.metadata);
                    }
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                if (message.format != null && message.hasOwnProperty("format"))
                    object.format = message.format;
                if (message.chunks != null && message.hasOwnProperty("chunks"))
                    object.chunks = message.chunks;
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = options.bytes === String ? $util.base64.encode(message.metadata, 0, message.metadata.length) : options.bytes === Array ? Array.prototype.slice.call(message.metadata) : message.metadata;
                return object;
            };

            /**
             * Converts this Snapshot to JSON.
             * @function toJSON
             * @memberof tendermint.abci.Snapshot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Snapshot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Snapshot;
        })();

        abci.ABCIApplication = (function() {

            /**
             * Constructs a new ABCIApplication service.
             * @memberof tendermint.abci
             * @classdesc Represents a ABCIApplication
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function ABCIApplication(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (ABCIApplication.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ABCIApplication;

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#echo}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef EchoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseEcho} [response] ResponseEcho
             */

            /**
             * Calls Echo.
             * @function echo
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestEcho} request RequestEcho message or plain object
             * @param {tendermint.abci.ABCIApplication.EchoCallback} callback Node-style callback called with the error, if any, and ResponseEcho
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.echo = function echo(request, callback) {
                return this.rpcCall(echo, $root.tendermint.abci.RequestEcho, $root.tendermint.abci.ResponseEcho, request, callback);
            }, "name", { value: "Echo" });

            /**
             * Calls Echo.
             * @function echo
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestEcho} request RequestEcho message or plain object
             * @returns {Promise<tendermint.abci.ResponseEcho>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#flush}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef FlushCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseFlush} [response] ResponseFlush
             */

            /**
             * Calls Flush.
             * @function flush
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestFlush} request RequestFlush message or plain object
             * @param {tendermint.abci.ABCIApplication.FlushCallback} callback Node-style callback called with the error, if any, and ResponseFlush
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.flush = function flush(request, callback) {
                return this.rpcCall(flush, $root.tendermint.abci.RequestFlush, $root.tendermint.abci.ResponseFlush, request, callback);
            }, "name", { value: "Flush" });

            /**
             * Calls Flush.
             * @function flush
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestFlush} request RequestFlush message or plain object
             * @returns {Promise<tendermint.abci.ResponseFlush>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#info}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef InfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseInfo} [response] ResponseInfo
             */

            /**
             * Calls Info.
             * @function info
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestInfo} request RequestInfo message or plain object
             * @param {tendermint.abci.ABCIApplication.InfoCallback} callback Node-style callback called with the error, if any, and ResponseInfo
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.info = function info(request, callback) {
                return this.rpcCall(info, $root.tendermint.abci.RequestInfo, $root.tendermint.abci.ResponseInfo, request, callback);
            }, "name", { value: "Info" });

            /**
             * Calls Info.
             * @function info
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestInfo} request RequestInfo message or plain object
             * @returns {Promise<tendermint.abci.ResponseInfo>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#setOption}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef SetOptionCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseSetOption} [response] ResponseSetOption
             */

            /**
             * Calls SetOption.
             * @function setOption
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestSetOption} request RequestSetOption message or plain object
             * @param {tendermint.abci.ABCIApplication.SetOptionCallback} callback Node-style callback called with the error, if any, and ResponseSetOption
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.setOption = function setOption(request, callback) {
                return this.rpcCall(setOption, $root.tendermint.abci.RequestSetOption, $root.tendermint.abci.ResponseSetOption, request, callback);
            }, "name", { value: "SetOption" });

            /**
             * Calls SetOption.
             * @function setOption
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestSetOption} request RequestSetOption message or plain object
             * @returns {Promise<tendermint.abci.ResponseSetOption>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#deliverTx}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef DeliverTxCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseDeliverTx} [response] ResponseDeliverTx
             */

            /**
             * Calls DeliverTx.
             * @function deliverTx
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestDeliverTx} request RequestDeliverTx message or plain object
             * @param {tendermint.abci.ABCIApplication.DeliverTxCallback} callback Node-style callback called with the error, if any, and ResponseDeliverTx
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.deliverTx = function deliverTx(request, callback) {
                return this.rpcCall(deliverTx, $root.tendermint.abci.RequestDeliverTx, $root.tendermint.abci.ResponseDeliverTx, request, callback);
            }, "name", { value: "DeliverTx" });

            /**
             * Calls DeliverTx.
             * @function deliverTx
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestDeliverTx} request RequestDeliverTx message or plain object
             * @returns {Promise<tendermint.abci.ResponseDeliverTx>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#checkTx}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef CheckTxCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseCheckTx} [response] ResponseCheckTx
             */

            /**
             * Calls CheckTx.
             * @function checkTx
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestCheckTx} request RequestCheckTx message or plain object
             * @param {tendermint.abci.ABCIApplication.CheckTxCallback} callback Node-style callback called with the error, if any, and ResponseCheckTx
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.checkTx = function checkTx(request, callback) {
                return this.rpcCall(checkTx, $root.tendermint.abci.RequestCheckTx, $root.tendermint.abci.ResponseCheckTx, request, callback);
            }, "name", { value: "CheckTx" });

            /**
             * Calls CheckTx.
             * @function checkTx
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestCheckTx} request RequestCheckTx message or plain object
             * @returns {Promise<tendermint.abci.ResponseCheckTx>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#query}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef QueryCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseQuery} [response] ResponseQuery
             */

            /**
             * Calls Query.
             * @function query
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestQuery} request RequestQuery message or plain object
             * @param {tendermint.abci.ABCIApplication.QueryCallback} callback Node-style callback called with the error, if any, and ResponseQuery
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.query = function query(request, callback) {
                return this.rpcCall(query, $root.tendermint.abci.RequestQuery, $root.tendermint.abci.ResponseQuery, request, callback);
            }, "name", { value: "Query" });

            /**
             * Calls Query.
             * @function query
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestQuery} request RequestQuery message or plain object
             * @returns {Promise<tendermint.abci.ResponseQuery>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#commit}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef CommitCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseCommit} [response] ResponseCommit
             */

            /**
             * Calls Commit.
             * @function commit
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestCommit} request RequestCommit message or plain object
             * @param {tendermint.abci.ABCIApplication.CommitCallback} callback Node-style callback called with the error, if any, and ResponseCommit
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.commit = function commit(request, callback) {
                return this.rpcCall(commit, $root.tendermint.abci.RequestCommit, $root.tendermint.abci.ResponseCommit, request, callback);
            }, "name", { value: "Commit" });

            /**
             * Calls Commit.
             * @function commit
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestCommit} request RequestCommit message or plain object
             * @returns {Promise<tendermint.abci.ResponseCommit>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#initChain}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef InitChainCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseInitChain} [response] ResponseInitChain
             */

            /**
             * Calls InitChain.
             * @function initChain
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestInitChain} request RequestInitChain message or plain object
             * @param {tendermint.abci.ABCIApplication.InitChainCallback} callback Node-style callback called with the error, if any, and ResponseInitChain
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.initChain = function initChain(request, callback) {
                return this.rpcCall(initChain, $root.tendermint.abci.RequestInitChain, $root.tendermint.abci.ResponseInitChain, request, callback);
            }, "name", { value: "InitChain" });

            /**
             * Calls InitChain.
             * @function initChain
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestInitChain} request RequestInitChain message or plain object
             * @returns {Promise<tendermint.abci.ResponseInitChain>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#beginBlock}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef BeginBlockCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseBeginBlock} [response] ResponseBeginBlock
             */

            /**
             * Calls BeginBlock.
             * @function beginBlock
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestBeginBlock} request RequestBeginBlock message or plain object
             * @param {tendermint.abci.ABCIApplication.BeginBlockCallback} callback Node-style callback called with the error, if any, and ResponseBeginBlock
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.beginBlock = function beginBlock(request, callback) {
                return this.rpcCall(beginBlock, $root.tendermint.abci.RequestBeginBlock, $root.tendermint.abci.ResponseBeginBlock, request, callback);
            }, "name", { value: "BeginBlock" });

            /**
             * Calls BeginBlock.
             * @function beginBlock
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestBeginBlock} request RequestBeginBlock message or plain object
             * @returns {Promise<tendermint.abci.ResponseBeginBlock>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#endBlock}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef EndBlockCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseEndBlock} [response] ResponseEndBlock
             */

            /**
             * Calls EndBlock.
             * @function endBlock
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestEndBlock} request RequestEndBlock message or plain object
             * @param {tendermint.abci.ABCIApplication.EndBlockCallback} callback Node-style callback called with the error, if any, and ResponseEndBlock
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.endBlock = function endBlock(request, callback) {
                return this.rpcCall(endBlock, $root.tendermint.abci.RequestEndBlock, $root.tendermint.abci.ResponseEndBlock, request, callback);
            }, "name", { value: "EndBlock" });

            /**
             * Calls EndBlock.
             * @function endBlock
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestEndBlock} request RequestEndBlock message or plain object
             * @returns {Promise<tendermint.abci.ResponseEndBlock>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#listSnapshots}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef ListSnapshotsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseListSnapshots} [response] ResponseListSnapshots
             */

            /**
             * Calls ListSnapshots.
             * @function listSnapshots
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestListSnapshots} request RequestListSnapshots message or plain object
             * @param {tendermint.abci.ABCIApplication.ListSnapshotsCallback} callback Node-style callback called with the error, if any, and ResponseListSnapshots
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.listSnapshots = function listSnapshots(request, callback) {
                return this.rpcCall(listSnapshots, $root.tendermint.abci.RequestListSnapshots, $root.tendermint.abci.ResponseListSnapshots, request, callback);
            }, "name", { value: "ListSnapshots" });

            /**
             * Calls ListSnapshots.
             * @function listSnapshots
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestListSnapshots} request RequestListSnapshots message or plain object
             * @returns {Promise<tendermint.abci.ResponseListSnapshots>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#offerSnapshot}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef OfferSnapshotCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseOfferSnapshot} [response] ResponseOfferSnapshot
             */

            /**
             * Calls OfferSnapshot.
             * @function offerSnapshot
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestOfferSnapshot} request RequestOfferSnapshot message or plain object
             * @param {tendermint.abci.ABCIApplication.OfferSnapshotCallback} callback Node-style callback called with the error, if any, and ResponseOfferSnapshot
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.offerSnapshot = function offerSnapshot(request, callback) {
                return this.rpcCall(offerSnapshot, $root.tendermint.abci.RequestOfferSnapshot, $root.tendermint.abci.ResponseOfferSnapshot, request, callback);
            }, "name", { value: "OfferSnapshot" });

            /**
             * Calls OfferSnapshot.
             * @function offerSnapshot
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestOfferSnapshot} request RequestOfferSnapshot message or plain object
             * @returns {Promise<tendermint.abci.ResponseOfferSnapshot>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#loadSnapshotChunk}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef LoadSnapshotChunkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseLoadSnapshotChunk} [response] ResponseLoadSnapshotChunk
             */

            /**
             * Calls LoadSnapshotChunk.
             * @function loadSnapshotChunk
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} request RequestLoadSnapshotChunk message or plain object
             * @param {tendermint.abci.ABCIApplication.LoadSnapshotChunkCallback} callback Node-style callback called with the error, if any, and ResponseLoadSnapshotChunk
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.loadSnapshotChunk = function loadSnapshotChunk(request, callback) {
                return this.rpcCall(loadSnapshotChunk, $root.tendermint.abci.RequestLoadSnapshotChunk, $root.tendermint.abci.ResponseLoadSnapshotChunk, request, callback);
            }, "name", { value: "LoadSnapshotChunk" });

            /**
             * Calls LoadSnapshotChunk.
             * @function loadSnapshotChunk
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestLoadSnapshotChunk} request RequestLoadSnapshotChunk message or plain object
             * @returns {Promise<tendermint.abci.ResponseLoadSnapshotChunk>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link tendermint.abci.ABCIApplication#applySnapshotChunk}.
             * @memberof tendermint.abci.ABCIApplication
             * @typedef ApplySnapshotChunkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {tendermint.abci.ResponseApplySnapshotChunk} [response] ResponseApplySnapshotChunk
             */

            /**
             * Calls ApplySnapshotChunk.
             * @function applySnapshotChunk
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestApplySnapshotChunk} request RequestApplySnapshotChunk message or plain object
             * @param {tendermint.abci.ABCIApplication.ApplySnapshotChunkCallback} callback Node-style callback called with the error, if any, and ResponseApplySnapshotChunk
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(ABCIApplication.prototype.applySnapshotChunk = function applySnapshotChunk(request, callback) {
                return this.rpcCall(applySnapshotChunk, $root.tendermint.abci.RequestApplySnapshotChunk, $root.tendermint.abci.ResponseApplySnapshotChunk, request, callback);
            }, "name", { value: "ApplySnapshotChunk" });

            /**
             * Calls ApplySnapshotChunk.
             * @function applySnapshotChunk
             * @memberof tendermint.abci.ABCIApplication
             * @instance
             * @param {tendermint.abci.IRequestApplySnapshotChunk} request RequestApplySnapshotChunk message or plain object
             * @returns {Promise<tendermint.abci.ResponseApplySnapshotChunk>} Promise
             * @variation 2
             */

            return ABCIApplication;
        })();

        return abci;
    })();

    tendermint.crypto = (function() {

        /**
         * Namespace crypto.
         * @memberof tendermint
         * @namespace
         */
        const crypto = {};

        crypto.Proof = (function() {

            /**
             * Properties of a Proof.
             * @memberof tendermint.crypto
             * @interface IProof
             * @property {number|null} [total] Proof total
             * @property {number|null} [index] Proof index
             * @property {Uint8Array|null} [leaf_hash] Proof leaf_hash
             * @property {Array.<Uint8Array>|null} [aunts] Proof aunts
             */

            /**
             * Constructs a new Proof.
             * @memberof tendermint.crypto
             * @classdesc Represents a Proof.
             * @implements IProof
             * @constructor
             * @param {tendermint.crypto.IProof=} [properties] Properties to set
             */
            function Proof(properties) {
                this.aunts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Proof total.
             * @member {number} total
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.total = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proof index.
             * @member {number} index
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.index = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proof leaf_hash.
             * @member {Uint8Array} leaf_hash
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.leaf_hash = $util.newBuffer([]);

            /**
             * Proof aunts.
             * @member {Array.<Uint8Array>} aunts
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.aunts = $util.emptyArray;

            /**
             * Encodes the specified Proof message. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.IProof} message Proof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proof.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.total);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.index);
                if (message.leaf_hash != null && Object.hasOwnProperty.call(message, "leaf_hash"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.leaf_hash);
                if (message.aunts != null && message.aunts.length)
                    for (let i = 0; i < message.aunts.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.aunts[i]);
                return writer;
            };

            /**
             * Encodes the specified Proof message, length delimited. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.IProof} message Proof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proof.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Proof message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.Proof} Proof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proof.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.Proof();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.int64();
                        break;
                    case 2:
                        message.index = reader.int64();
                        break;
                    case 3:
                        message.leaf_hash = reader.bytes();
                        break;
                    case 4:
                        if (!(message.aunts && message.aunts.length))
                            message.aunts = [];
                        message.aunts.push(reader.bytes());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Proof message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.Proof} Proof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proof.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Proof message.
             * @function verify
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Proof.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                        return "total: integer|Long expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                        return "index: integer|Long expected";
                if (message.leaf_hash != null && message.hasOwnProperty("leaf_hash"))
                    if (!(message.leaf_hash && typeof message.leaf_hash.length === "number" || $util.isString(message.leaf_hash)))
                        return "leaf_hash: buffer expected";
                if (message.aunts != null && message.hasOwnProperty("aunts")) {
                    if (!Array.isArray(message.aunts))
                        return "aunts: array expected";
                    for (let i = 0; i < message.aunts.length; ++i)
                        if (!(message.aunts[i] && typeof message.aunts[i].length === "number" || $util.isString(message.aunts[i])))
                            return "aunts: buffer[] expected";
                }
                return null;
            };

            /**
             * Creates a Proof message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.Proof} Proof
             */
            Proof.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.Proof)
                    return object;
                let message = new $root.tendermint.crypto.Proof();
                if (object.total != null)
                    if ($util.Long)
                        (message.total = $util.Long.fromValue(object.total)).unsigned = false;
                    else if (typeof object.total === "string")
                        message.total = parseInt(object.total, 10);
                    else if (typeof object.total === "number")
                        message.total = object.total;
                    else if (typeof object.total === "object")
                        message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber();
                if (object.index != null)
                    if ($util.Long)
                        (message.index = $util.Long.fromValue(object.index)).unsigned = false;
                    else if (typeof object.index === "string")
                        message.index = parseInt(object.index, 10);
                    else if (typeof object.index === "number")
                        message.index = object.index;
                    else if (typeof object.index === "object")
                        message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber();
                if (object.leaf_hash != null)
                    if (typeof object.leaf_hash === "string")
                        $util.base64.decode(object.leaf_hash, message.leaf_hash = $util.newBuffer($util.base64.length(object.leaf_hash)), 0);
                    else if (object.leaf_hash.length)
                        message.leaf_hash = object.leaf_hash;
                if (object.aunts) {
                    if (!Array.isArray(object.aunts))
                        throw TypeError(".tendermint.crypto.Proof.aunts: array expected");
                    message.aunts = [];
                    for (let i = 0; i < object.aunts.length; ++i)
                        if (typeof object.aunts[i] === "string")
                            $util.base64.decode(object.aunts[i], message.aunts[i] = $util.newBuffer($util.base64.length(object.aunts[i])), 0);
                        else if (object.aunts[i].length)
                            message.aunts[i] = object.aunts[i];
                }
                return message;
            };

            /**
             * Creates a plain object from a Proof message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.Proof} message Proof
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Proof.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.aunts = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.index = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.leaf_hash = "";
                    else {
                        object.leaf_hash = [];
                        if (options.bytes !== Array)
                            object.leaf_hash = $util.newBuffer(object.leaf_hash);
                    }
                }
                if (message.total != null && message.hasOwnProperty("total"))
                    if (typeof message.total === "number")
                        object.total = options.longs === String ? String(message.total) : message.total;
                    else
                        object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber() : message.total;
                if (message.index != null && message.hasOwnProperty("index"))
                    if (typeof message.index === "number")
                        object.index = options.longs === String ? String(message.index) : message.index;
                    else
                        object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber() : message.index;
                if (message.leaf_hash != null && message.hasOwnProperty("leaf_hash"))
                    object.leaf_hash = options.bytes === String ? $util.base64.encode(message.leaf_hash, 0, message.leaf_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.leaf_hash) : message.leaf_hash;
                if (message.aunts && message.aunts.length) {
                    object.aunts = [];
                    for (let j = 0; j < message.aunts.length; ++j)
                        object.aunts[j] = options.bytes === String ? $util.base64.encode(message.aunts[j], 0, message.aunts[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.aunts[j]) : message.aunts[j];
                }
                return object;
            };

            /**
             * Converts this Proof to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.Proof
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Proof.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Proof;
        })();

        crypto.ValueOp = (function() {

            /**
             * Properties of a ValueOp.
             * @memberof tendermint.crypto
             * @interface IValueOp
             * @property {Uint8Array|null} [key] ValueOp key
             * @property {tendermint.crypto.IProof|null} [proof] ValueOp proof
             */

            /**
             * Constructs a new ValueOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a ValueOp.
             * @implements IValueOp
             * @constructor
             * @param {tendermint.crypto.IValueOp=} [properties] Properties to set
             */
            function ValueOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValueOp key.
             * @member {Uint8Array} key
             * @memberof tendermint.crypto.ValueOp
             * @instance
             */
            ValueOp.prototype.key = $util.newBuffer([]);

            /**
             * ValueOp proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.crypto.ValueOp
             * @instance
             */
            ValueOp.prototype.proof = null;

            /**
             * Encodes the specified ValueOp message. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.IValueOp} message ValueOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ValueOp message, length delimited. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.IValueOp} message ValueOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValueOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ValueOp} ValueOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ValueOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.bytes();
                        break;
                    case 2:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValueOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ValueOp} ValueOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValueOp message.
             * @function verify
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValueOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a ValueOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ValueOp} ValueOp
             */
            ValueOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ValueOp)
                    return object;
                let message = new $root.tendermint.crypto.ValueOp();
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.crypto.ValueOp.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a ValueOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.ValueOp} message ValueOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValueOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    object.proof = null;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this ValueOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ValueOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValueOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValueOp;
        })();

        crypto.DominoOp = (function() {

            /**
             * Properties of a DominoOp.
             * @memberof tendermint.crypto
             * @interface IDominoOp
             * @property {string|null} [key] DominoOp key
             * @property {string|null} [input] DominoOp input
             * @property {string|null} [output] DominoOp output
             */

            /**
             * Constructs a new DominoOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a DominoOp.
             * @implements IDominoOp
             * @constructor
             * @param {tendermint.crypto.IDominoOp=} [properties] Properties to set
             */
            function DominoOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DominoOp key.
             * @member {string} key
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.key = "";

            /**
             * DominoOp input.
             * @member {string} input
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.input = "";

            /**
             * DominoOp output.
             * @member {string} output
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.output = "";

            /**
             * Encodes the specified DominoOp message. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.IDominoOp} message DominoOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DominoOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input);
                if (message.output != null && Object.hasOwnProperty.call(message, "output"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output);
                return writer;
            };

            /**
             * Encodes the specified DominoOp message, length delimited. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.IDominoOp} message DominoOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DominoOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DominoOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.DominoOp} DominoOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DominoOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.DominoOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.string();
                        break;
                    case 2:
                        message.input = reader.string();
                        break;
                    case 3:
                        message.output = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DominoOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.DominoOp} DominoOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DominoOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DominoOp message.
             * @function verify
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DominoOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                if (message.input != null && message.hasOwnProperty("input"))
                    if (!$util.isString(message.input))
                        return "input: string expected";
                if (message.output != null && message.hasOwnProperty("output"))
                    if (!$util.isString(message.output))
                        return "output: string expected";
                return null;
            };

            /**
             * Creates a DominoOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.DominoOp} DominoOp
             */
            DominoOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.DominoOp)
                    return object;
                let message = new $root.tendermint.crypto.DominoOp();
                if (object.key != null)
                    message.key = String(object.key);
                if (object.input != null)
                    message.input = String(object.input);
                if (object.output != null)
                    message.output = String(object.output);
                return message;
            };

            /**
             * Creates a plain object from a DominoOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.DominoOp} message DominoOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DominoOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.key = "";
                    object.input = "";
                    object.output = "";
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                if (message.input != null && message.hasOwnProperty("input"))
                    object.input = message.input;
                if (message.output != null && message.hasOwnProperty("output"))
                    object.output = message.output;
                return object;
            };

            /**
             * Converts this DominoOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.DominoOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DominoOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DominoOp;
        })();

        crypto.ProofOp = (function() {

            /**
             * Properties of a ProofOp.
             * @memberof tendermint.crypto
             * @interface IProofOp
             * @property {string|null} [type] ProofOp type
             * @property {Uint8Array|null} [key] ProofOp key
             * @property {Uint8Array|null} [data] ProofOp data
             */

            /**
             * Constructs a new ProofOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a ProofOp.
             * @implements IProofOp
             * @constructor
             * @param {tendermint.crypto.IProofOp=} [properties] Properties to set
             */
            function ProofOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProofOp type.
             * @member {string} type
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.type = "";

            /**
             * ProofOp key.
             * @member {Uint8Array} key
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.key = $util.newBuffer([]);

            /**
             * ProofOp data.
             * @member {Uint8Array} data
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.data = $util.newBuffer([]);

            /**
             * Encodes the specified ProofOp message. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.IProofOp} message ProofOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.key);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                return writer;
            };

            /**
             * Encodes the specified ProofOp message, length delimited. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.IProofOp} message ProofOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProofOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ProofOp} ProofOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ProofOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        message.key = reader.bytes();
                        break;
                    case 3:
                        message.data = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProofOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ProofOp} ProofOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProofOp message.
             * @function verify
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProofOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                return null;
            };

            /**
             * Creates a ProofOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ProofOp} ProofOp
             */
            ProofOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ProofOp)
                    return object;
                let message = new $root.tendermint.crypto.ProofOp();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                return message;
            };

            /**
             * Creates a plain object from a ProofOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.ProofOp} message ProofOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProofOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = "";
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                return object;
            };

            /**
             * Converts this ProofOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ProofOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProofOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProofOp;
        })();

        crypto.ProofOps = (function() {

            /**
             * Properties of a ProofOps.
             * @memberof tendermint.crypto
             * @interface IProofOps
             * @property {Array.<tendermint.crypto.IProofOp>|null} [ops] ProofOps ops
             */

            /**
             * Constructs a new ProofOps.
             * @memberof tendermint.crypto
             * @classdesc Represents a ProofOps.
             * @implements IProofOps
             * @constructor
             * @param {tendermint.crypto.IProofOps=} [properties] Properties to set
             */
            function ProofOps(properties) {
                this.ops = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProofOps ops.
             * @member {Array.<tendermint.crypto.IProofOp>} ops
             * @memberof tendermint.crypto.ProofOps
             * @instance
             */
            ProofOps.prototype.ops = $util.emptyArray;

            /**
             * Encodes the specified ProofOps message. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.IProofOps} message ProofOps message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOps.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ops != null && message.ops.length)
                    for (let i = 0; i < message.ops.length; ++i)
                        $root.tendermint.crypto.ProofOp.encode(message.ops[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ProofOps message, length delimited. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.IProofOps} message ProofOps message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOps.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProofOps message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ProofOps} ProofOps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOps.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ProofOps();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.ops && message.ops.length))
                            message.ops = [];
                        message.ops.push($root.tendermint.crypto.ProofOp.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProofOps message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ProofOps} ProofOps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOps.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProofOps message.
             * @function verify
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProofOps.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ops != null && message.hasOwnProperty("ops")) {
                    if (!Array.isArray(message.ops))
                        return "ops: array expected";
                    for (let i = 0; i < message.ops.length; ++i) {
                        let error = $root.tendermint.crypto.ProofOp.verify(message.ops[i]);
                        if (error)
                            return "ops." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ProofOps message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ProofOps} ProofOps
             */
            ProofOps.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ProofOps)
                    return object;
                let message = new $root.tendermint.crypto.ProofOps();
                if (object.ops) {
                    if (!Array.isArray(object.ops))
                        throw TypeError(".tendermint.crypto.ProofOps.ops: array expected");
                    message.ops = [];
                    for (let i = 0; i < object.ops.length; ++i) {
                        if (typeof object.ops[i] !== "object")
                            throw TypeError(".tendermint.crypto.ProofOps.ops: object expected");
                        message.ops[i] = $root.tendermint.crypto.ProofOp.fromObject(object.ops[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ProofOps message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.ProofOps} message ProofOps
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProofOps.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ops = [];
                if (message.ops && message.ops.length) {
                    object.ops = [];
                    for (let j = 0; j < message.ops.length; ++j)
                        object.ops[j] = $root.tendermint.crypto.ProofOp.toObject(message.ops[j], options);
                }
                return object;
            };

            /**
             * Converts this ProofOps to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ProofOps
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProofOps.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProofOps;
        })();

        crypto.PublicKey = (function() {

            /**
             * Properties of a PublicKey.
             * @memberof tendermint.crypto
             * @interface IPublicKey
             * @property {Uint8Array|null} [ed25519] PublicKey ed25519
             */

            /**
             * Constructs a new PublicKey.
             * @memberof tendermint.crypto
             * @classdesc Represents a PublicKey.
             * @implements IPublicKey
             * @constructor
             * @param {tendermint.crypto.IPublicKey=} [properties] Properties to set
             */
            function PublicKey(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PublicKey ed25519.
             * @member {Uint8Array|null|undefined} ed25519
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            PublicKey.prototype.ed25519 = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * PublicKey sum.
             * @member {"ed25519"|undefined} sum
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            Object.defineProperty(PublicKey.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["ed25519"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified PublicKey message. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.IPublicKey} message PublicKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PublicKey.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ed25519 != null && Object.hasOwnProperty.call(message, "ed25519"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ed25519);
                return writer;
            };

            /**
             * Encodes the specified PublicKey message, length delimited. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.IPublicKey} message PublicKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PublicKey.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PublicKey message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.PublicKey} PublicKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PublicKey.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.PublicKey();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ed25519 = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PublicKey message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.PublicKey} PublicKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PublicKey.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PublicKey message.
             * @function verify
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PublicKey.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                    properties.sum = 1;
                    if (!(message.ed25519 && typeof message.ed25519.length === "number" || $util.isString(message.ed25519)))
                        return "ed25519: buffer expected";
                }
                return null;
            };

            /**
             * Creates a PublicKey message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.PublicKey} PublicKey
             */
            PublicKey.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.PublicKey)
                    return object;
                let message = new $root.tendermint.crypto.PublicKey();
                if (object.ed25519 != null)
                    if (typeof object.ed25519 === "string")
                        $util.base64.decode(object.ed25519, message.ed25519 = $util.newBuffer($util.base64.length(object.ed25519)), 0);
                    else if (object.ed25519.length)
                        message.ed25519 = object.ed25519;
                return message;
            };

            /**
             * Creates a plain object from a PublicKey message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.PublicKey} message PublicKey
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PublicKey.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                    object.ed25519 = options.bytes === String ? $util.base64.encode(message.ed25519, 0, message.ed25519.length) : options.bytes === Array ? Array.prototype.slice.call(message.ed25519) : message.ed25519;
                    if (options.oneofs)
                        object.sum = "ed25519";
                }
                return object;
            };

            /**
             * Converts this PublicKey to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.PublicKey
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PublicKey.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PublicKey;
        })();

        crypto.PrivateKey = (function() {

            /**
             * Properties of a PrivateKey.
             * @memberof tendermint.crypto
             * @interface IPrivateKey
             * @property {Uint8Array|null} [ed25519] PrivateKey ed25519
             */

            /**
             * Constructs a new PrivateKey.
             * @memberof tendermint.crypto
             * @classdesc Represents a PrivateKey.
             * @implements IPrivateKey
             * @constructor
             * @param {tendermint.crypto.IPrivateKey=} [properties] Properties to set
             */
            function PrivateKey(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PrivateKey ed25519.
             * @member {Uint8Array|null|undefined} ed25519
             * @memberof tendermint.crypto.PrivateKey
             * @instance
             */
            PrivateKey.prototype.ed25519 = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * PrivateKey sum.
             * @member {"ed25519"|undefined} sum
             * @memberof tendermint.crypto.PrivateKey
             * @instance
             */
            Object.defineProperty(PrivateKey.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["ed25519"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified PrivateKey message. Does not implicitly {@link tendermint.crypto.PrivateKey.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.PrivateKey
             * @static
             * @param {tendermint.crypto.IPrivateKey} message PrivateKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrivateKey.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ed25519 != null && Object.hasOwnProperty.call(message, "ed25519"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ed25519);
                return writer;
            };

            /**
             * Encodes the specified PrivateKey message, length delimited. Does not implicitly {@link tendermint.crypto.PrivateKey.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.PrivateKey
             * @static
             * @param {tendermint.crypto.IPrivateKey} message PrivateKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrivateKey.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrivateKey message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.PrivateKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.PrivateKey} PrivateKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrivateKey.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.PrivateKey();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ed25519 = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PrivateKey message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.PrivateKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.PrivateKey} PrivateKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrivateKey.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrivateKey message.
             * @function verify
             * @memberof tendermint.crypto.PrivateKey
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrivateKey.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                    properties.sum = 1;
                    if (!(message.ed25519 && typeof message.ed25519.length === "number" || $util.isString(message.ed25519)))
                        return "ed25519: buffer expected";
                }
                return null;
            };

            /**
             * Creates a PrivateKey message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.PrivateKey
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.PrivateKey} PrivateKey
             */
            PrivateKey.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.PrivateKey)
                    return object;
                let message = new $root.tendermint.crypto.PrivateKey();
                if (object.ed25519 != null)
                    if (typeof object.ed25519 === "string")
                        $util.base64.decode(object.ed25519, message.ed25519 = $util.newBuffer($util.base64.length(object.ed25519)), 0);
                    else if (object.ed25519.length)
                        message.ed25519 = object.ed25519;
                return message;
            };

            /**
             * Creates a plain object from a PrivateKey message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.PrivateKey
             * @static
             * @param {tendermint.crypto.PrivateKey} message PrivateKey
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrivateKey.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                    object.ed25519 = options.bytes === String ? $util.base64.encode(message.ed25519, 0, message.ed25519.length) : options.bytes === Array ? Array.prototype.slice.call(message.ed25519) : message.ed25519;
                    if (options.oneofs)
                        object.sum = "ed25519";
                }
                return object;
            };

            /**
             * Converts this PrivateKey to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.PrivateKey
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrivateKey.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PrivateKey;
        })();

        return crypto;
    })();

    tendermint.types = (function() {

        /**
         * Namespace types.
         * @memberof tendermint
         * @namespace
         */
        const types = {};

        /**
         * BlockIDFlag enum.
         * @name tendermint.types.BlockIDFlag
         * @enum {number}
         * @property {number} BLOCK_ID_FLAG_UNKNOWN=0 BLOCK_ID_FLAG_UNKNOWN value
         * @property {number} BLOCK_ID_FLAG_ABSENT=1 BLOCK_ID_FLAG_ABSENT value
         * @property {number} BLOCK_ID_FLAG_COMMIT=2 BLOCK_ID_FLAG_COMMIT value
         * @property {number} BLOCK_ID_FLAG_NIL=3 BLOCK_ID_FLAG_NIL value
         */
        types.BlockIDFlag = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "BLOCK_ID_FLAG_UNKNOWN"] = 0;
            values[valuesById[1] = "BLOCK_ID_FLAG_ABSENT"] = 1;
            values[valuesById[2] = "BLOCK_ID_FLAG_COMMIT"] = 2;
            values[valuesById[3] = "BLOCK_ID_FLAG_NIL"] = 3;
            return values;
        })();

        /**
         * SignedMsgType enum.
         * @name tendermint.types.SignedMsgType
         * @enum {number}
         * @property {number} SIGNED_MSG_TYPE_UNKNOWN=0 SIGNED_MSG_TYPE_UNKNOWN value
         * @property {number} SIGNED_MSG_TYPE_PREVOTE=1 SIGNED_MSG_TYPE_PREVOTE value
         * @property {number} SIGNED_MSG_TYPE_PRECOMMIT=2 SIGNED_MSG_TYPE_PRECOMMIT value
         * @property {number} SIGNED_MSG_TYPE_PROPOSAL=32 SIGNED_MSG_TYPE_PROPOSAL value
         */
        types.SignedMsgType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SIGNED_MSG_TYPE_UNKNOWN"] = 0;
            values[valuesById[1] = "SIGNED_MSG_TYPE_PREVOTE"] = 1;
            values[valuesById[2] = "SIGNED_MSG_TYPE_PRECOMMIT"] = 2;
            values[valuesById[32] = "SIGNED_MSG_TYPE_PROPOSAL"] = 32;
            return values;
        })();

        types.PartSetHeader = (function() {

            /**
             * Properties of a PartSetHeader.
             * @memberof tendermint.types
             * @interface IPartSetHeader
             * @property {number|null} [total] PartSetHeader total
             * @property {Uint8Array|null} [hash] PartSetHeader hash
             */

            /**
             * Constructs a new PartSetHeader.
             * @memberof tendermint.types
             * @classdesc Represents a PartSetHeader.
             * @implements IPartSetHeader
             * @constructor
             * @param {tendermint.types.IPartSetHeader=} [properties] Properties to set
             */
            function PartSetHeader(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PartSetHeader total.
             * @member {number} total
             * @memberof tendermint.types.PartSetHeader
             * @instance
             */
            PartSetHeader.prototype.total = 0;

            /**
             * PartSetHeader hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.PartSetHeader
             * @instance
             */
            PartSetHeader.prototype.hash = $util.newBuffer([]);

            /**
             * Encodes the specified PartSetHeader message. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.IPartSetHeader} message PartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartSetHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.total);
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified PartSetHeader message, length delimited. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.IPartSetHeader} message PartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartSetHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PartSetHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartSetHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.PartSetHeader();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.uint32();
                        break;
                    case 2:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PartSetHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartSetHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PartSetHeader message.
             * @function verify
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PartSetHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total))
                        return "total: integer expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates a PartSetHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             */
            PartSetHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.PartSetHeader)
                    return object;
                let message = new $root.tendermint.types.PartSetHeader();
                if (object.total != null)
                    message.total = object.total >>> 0;
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from a PartSetHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.PartSetHeader} message PartSetHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PartSetHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.total = 0;
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                }
                if (message.total != null && message.hasOwnProperty("total"))
                    object.total = message.total;
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this PartSetHeader to JSON.
             * @function toJSON
             * @memberof tendermint.types.PartSetHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PartSetHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PartSetHeader;
        })();

        types.Part = (function() {

            /**
             * Properties of a Part.
             * @memberof tendermint.types
             * @interface IPart
             * @property {number|null} [index] Part index
             * @property {Uint8Array|null} [bytes] Part bytes
             * @property {tendermint.crypto.IProof|null} [proof] Part proof
             */

            /**
             * Constructs a new Part.
             * @memberof tendermint.types
             * @classdesc Represents a Part.
             * @implements IPart
             * @constructor
             * @param {tendermint.types.IPart=} [properties] Properties to set
             */
            function Part(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Part index.
             * @member {number} index
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.index = 0;

            /**
             * Part bytes.
             * @member {Uint8Array} bytes
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.bytes = $util.newBuffer([]);

            /**
             * Part proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.proof = null;

            /**
             * Encodes the specified Part message. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.IPart} message Part message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Part.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.bytes != null && Object.hasOwnProperty.call(message, "bytes"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.bytes);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Part message, length delimited. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.IPart} message Part message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Part.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Part message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Part
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Part} Part
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Part.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Part();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.bytes = reader.bytes();
                        break;
                    case 3:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Part message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Part
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Part} Part
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Part.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Part message.
             * @function verify
             * @memberof tendermint.types.Part
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Part.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.bytes != null && message.hasOwnProperty("bytes"))
                    if (!(message.bytes && typeof message.bytes.length === "number" || $util.isString(message.bytes)))
                        return "bytes: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a Part message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Part
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Part} Part
             */
            Part.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Part)
                    return object;
                let message = new $root.tendermint.types.Part();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.bytes != null)
                    if (typeof object.bytes === "string")
                        $util.base64.decode(object.bytes, message.bytes = $util.newBuffer($util.base64.length(object.bytes)), 0);
                    else if (object.bytes.length)
                        message.bytes = object.bytes;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.types.Part.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a Part message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.Part} message Part
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Part.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.index = 0;
                    if (options.bytes === String)
                        object.bytes = "";
                    else {
                        object.bytes = [];
                        if (options.bytes !== Array)
                            object.bytes = $util.newBuffer(object.bytes);
                    }
                    object.proof = null;
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.bytes != null && message.hasOwnProperty("bytes"))
                    object.bytes = options.bytes === String ? $util.base64.encode(message.bytes, 0, message.bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytes) : message.bytes;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this Part to JSON.
             * @function toJSON
             * @memberof tendermint.types.Part
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Part.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Part;
        })();

        types.BlockID = (function() {

            /**
             * Properties of a BlockID.
             * @memberof tendermint.types
             * @interface IBlockID
             * @property {Uint8Array|null} [hash] BlockID hash
             * @property {tendermint.types.IPartSetHeader|null} [part_set_header] BlockID part_set_header
             */

            /**
             * Constructs a new BlockID.
             * @memberof tendermint.types
             * @classdesc Represents a BlockID.
             * @implements IBlockID
             * @constructor
             * @param {tendermint.types.IBlockID=} [properties] Properties to set
             */
            function BlockID(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockID hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.BlockID
             * @instance
             */
            BlockID.prototype.hash = $util.newBuffer([]);

            /**
             * BlockID part_set_header.
             * @member {tendermint.types.IPartSetHeader|null|undefined} part_set_header
             * @memberof tendermint.types.BlockID
             * @instance
             */
            BlockID.prototype.part_set_header = null;

            /**
             * Encodes the specified BlockID message. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.IBlockID} message BlockID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockID.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                if (message.part_set_header != null && Object.hasOwnProperty.call(message, "part_set_header"))
                    $root.tendermint.types.PartSetHeader.encode(message.part_set_header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BlockID message, length delimited. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.IBlockID} message BlockID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockID.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockID message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.BlockID} BlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockID.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockID();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    case 2:
                        message.part_set_header = $root.tendermint.types.PartSetHeader.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockID message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.BlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.BlockID} BlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockID.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockID message.
             * @function verify
             * @memberof tendermint.types.BlockID
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockID.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.part_set_header != null && message.hasOwnProperty("part_set_header")) {
                    let error = $root.tendermint.types.PartSetHeader.verify(message.part_set_header);
                    if (error)
                        return "part_set_header." + error;
                }
                return null;
            };

            /**
             * Creates a BlockID message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.BlockID
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.BlockID} BlockID
             */
            BlockID.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.BlockID)
                    return object;
                let message = new $root.tendermint.types.BlockID();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.part_set_header != null) {
                    if (typeof object.part_set_header !== "object")
                        throw TypeError(".tendermint.types.BlockID.part_set_header: object expected");
                    message.part_set_header = $root.tendermint.types.PartSetHeader.fromObject(object.part_set_header);
                }
                return message;
            };

            /**
             * Creates a plain object from a BlockID message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.BlockID} message BlockID
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockID.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.part_set_header = null;
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.part_set_header != null && message.hasOwnProperty("part_set_header"))
                    object.part_set_header = $root.tendermint.types.PartSetHeader.toObject(message.part_set_header, options);
                return object;
            };

            /**
             * Converts this BlockID to JSON.
             * @function toJSON
             * @memberof tendermint.types.BlockID
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockID.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockID;
        })();

        types.Header = (function() {

            /**
             * Properties of a Header.
             * @memberof tendermint.types
             * @interface IHeader
             * @property {tendermint.version.IConsensus|null} [version] Header version
             * @property {string|null} [chain_id] Header chain_id
             * @property {number|null} [height] Header height
             * @property {google.protobuf.ITimestamp|null} [time] Header time
             * @property {tendermint.types.IBlockID|null} [last_block_id] Header last_block_id
             * @property {Uint8Array|null} [last_commit_hash] Header last_commit_hash
             * @property {Uint8Array|null} [data_hash] Header data_hash
             * @property {Uint8Array|null} [validators_hash] Header validators_hash
             * @property {Uint8Array|null} [next_validators_hash] Header next_validators_hash
             * @property {Uint8Array|null} [consensus_hash] Header consensus_hash
             * @property {Uint8Array|null} [app_hash] Header app_hash
             * @property {Uint8Array|null} [last_results_hash] Header last_results_hash
             * @property {Uint8Array|null} [evidence_hash] Header evidence_hash
             * @property {Uint8Array|null} [proposer_address] Header proposer_address
             */

            /**
             * Constructs a new Header.
             * @memberof tendermint.types
             * @classdesc Represents a Header.
             * @implements IHeader
             * @constructor
             * @param {tendermint.types.IHeader=} [properties] Properties to set
             */
            function Header(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Header version.
             * @member {tendermint.version.IConsensus|null|undefined} version
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.version = null;

            /**
             * Header chain_id.
             * @member {string} chain_id
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.chain_id = "";

            /**
             * Header height.
             * @member {number} height
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Header time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.time = null;

            /**
             * Header last_block_id.
             * @member {tendermint.types.IBlockID|null|undefined} last_block_id
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_block_id = null;

            /**
             * Header last_commit_hash.
             * @member {Uint8Array} last_commit_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_commit_hash = $util.newBuffer([]);

            /**
             * Header data_hash.
             * @member {Uint8Array} data_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.data_hash = $util.newBuffer([]);

            /**
             * Header validators_hash.
             * @member {Uint8Array} validators_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.validators_hash = $util.newBuffer([]);

            /**
             * Header next_validators_hash.
             * @member {Uint8Array} next_validators_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.next_validators_hash = $util.newBuffer([]);

            /**
             * Header consensus_hash.
             * @member {Uint8Array} consensus_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.consensus_hash = $util.newBuffer([]);

            /**
             * Header app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.app_hash = $util.newBuffer([]);

            /**
             * Header last_results_hash.
             * @member {Uint8Array} last_results_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_results_hash = $util.newBuffer([]);

            /**
             * Header evidence_hash.
             * @member {Uint8Array} evidence_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.evidence_hash = $util.newBuffer([]);

            /**
             * Header proposer_address.
             * @member {Uint8Array} proposer_address
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.proposer_address = $util.newBuffer([]);

            /**
             * Encodes the specified Header message. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.IHeader} message Header message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    $root.tendermint.version.Consensus.encode(message.version, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.last_block_id != null && Object.hasOwnProperty.call(message, "last_block_id"))
                    $root.tendermint.types.BlockID.encode(message.last_block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.last_commit_hash != null && Object.hasOwnProperty.call(message, "last_commit_hash"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.last_commit_hash);
                if (message.data_hash != null && Object.hasOwnProperty.call(message, "data_hash"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.data_hash);
                if (message.validators_hash != null && Object.hasOwnProperty.call(message, "validators_hash"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.validators_hash);
                if (message.next_validators_hash != null && Object.hasOwnProperty.call(message, "next_validators_hash"))
                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.next_validators_hash);
                if (message.consensus_hash != null && Object.hasOwnProperty.call(message, "consensus_hash"))
                    writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.consensus_hash);
                if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                    writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.app_hash);
                if (message.last_results_hash != null && Object.hasOwnProperty.call(message, "last_results_hash"))
                    writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.last_results_hash);
                if (message.evidence_hash != null && Object.hasOwnProperty.call(message, "evidence_hash"))
                    writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.evidence_hash);
                if (message.proposer_address != null && Object.hasOwnProperty.call(message, "proposer_address"))
                    writer.uint32(/* id 14, wireType 2 =*/114).bytes(message.proposer_address);
                return writer;
            };

            /**
             * Encodes the specified Header message, length delimited. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.IHeader} message Header message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Header message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Header();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.version = $root.tendermint.version.Consensus.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.chain_id = reader.string();
                        break;
                    case 3:
                        message.height = reader.int64();
                        break;
                    case 4:
                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.last_block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.last_commit_hash = reader.bytes();
                        break;
                    case 7:
                        message.data_hash = reader.bytes();
                        break;
                    case 8:
                        message.validators_hash = reader.bytes();
                        break;
                    case 9:
                        message.next_validators_hash = reader.bytes();
                        break;
                    case 10:
                        message.consensus_hash = reader.bytes();
                        break;
                    case 11:
                        message.app_hash = reader.bytes();
                        break;
                    case 12:
                        message.last_results_hash = reader.bytes();
                        break;
                    case 13:
                        message.evidence_hash = reader.bytes();
                        break;
                    case 14:
                        message.proposer_address = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Header message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Header message.
             * @function verify
             * @memberof tendermint.types.Header
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Header.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.version != null && message.hasOwnProperty("version")) {
                    let error = $root.tendermint.version.Consensus.verify(message.version);
                    if (error)
                        return "version." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.time != null && message.hasOwnProperty("time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.time);
                    if (error)
                        return "time." + error;
                }
                if (message.last_block_id != null && message.hasOwnProperty("last_block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.last_block_id);
                    if (error)
                        return "last_block_id." + error;
                }
                if (message.last_commit_hash != null && message.hasOwnProperty("last_commit_hash"))
                    if (!(message.last_commit_hash && typeof message.last_commit_hash.length === "number" || $util.isString(message.last_commit_hash)))
                        return "last_commit_hash: buffer expected";
                if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                    if (!(message.data_hash && typeof message.data_hash.length === "number" || $util.isString(message.data_hash)))
                        return "data_hash: buffer expected";
                if (message.validators_hash != null && message.hasOwnProperty("validators_hash"))
                    if (!(message.validators_hash && typeof message.validators_hash.length === "number" || $util.isString(message.validators_hash)))
                        return "validators_hash: buffer expected";
                if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                    if (!(message.next_validators_hash && typeof message.next_validators_hash.length === "number" || $util.isString(message.next_validators_hash)))
                        return "next_validators_hash: buffer expected";
                if (message.consensus_hash != null && message.hasOwnProperty("consensus_hash"))
                    if (!(message.consensus_hash && typeof message.consensus_hash.length === "number" || $util.isString(message.consensus_hash)))
                        return "consensus_hash: buffer expected";
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                        return "app_hash: buffer expected";
                if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                    if (!(message.last_results_hash && typeof message.last_results_hash.length === "number" || $util.isString(message.last_results_hash)))
                        return "last_results_hash: buffer expected";
                if (message.evidence_hash != null && message.hasOwnProperty("evidence_hash"))
                    if (!(message.evidence_hash && typeof message.evidence_hash.length === "number" || $util.isString(message.evidence_hash)))
                        return "evidence_hash: buffer expected";
                if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                    if (!(message.proposer_address && typeof message.proposer_address.length === "number" || $util.isString(message.proposer_address)))
                        return "proposer_address: buffer expected";
                return null;
            };

            /**
             * Creates a Header message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Header
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Header} Header
             */
            Header.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Header)
                    return object;
                let message = new $root.tendermint.types.Header();
                if (object.version != null) {
                    if (typeof object.version !== "object")
                        throw TypeError(".tendermint.types.Header.version: object expected");
                    message.version = $root.tendermint.version.Consensus.fromObject(object.version);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.time != null) {
                    if (typeof object.time !== "object")
                        throw TypeError(".tendermint.types.Header.time: object expected");
                    message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                }
                if (object.last_block_id != null) {
                    if (typeof object.last_block_id !== "object")
                        throw TypeError(".tendermint.types.Header.last_block_id: object expected");
                    message.last_block_id = $root.tendermint.types.BlockID.fromObject(object.last_block_id);
                }
                if (object.last_commit_hash != null)
                    if (typeof object.last_commit_hash === "string")
                        $util.base64.decode(object.last_commit_hash, message.last_commit_hash = $util.newBuffer($util.base64.length(object.last_commit_hash)), 0);
                    else if (object.last_commit_hash.length)
                        message.last_commit_hash = object.last_commit_hash;
                if (object.data_hash != null)
                    if (typeof object.data_hash === "string")
                        $util.base64.decode(object.data_hash, message.data_hash = $util.newBuffer($util.base64.length(object.data_hash)), 0);
                    else if (object.data_hash.length)
                        message.data_hash = object.data_hash;
                if (object.validators_hash != null)
                    if (typeof object.validators_hash === "string")
                        $util.base64.decode(object.validators_hash, message.validators_hash = $util.newBuffer($util.base64.length(object.validators_hash)), 0);
                    else if (object.validators_hash.length)
                        message.validators_hash = object.validators_hash;
                if (object.next_validators_hash != null)
                    if (typeof object.next_validators_hash === "string")
                        $util.base64.decode(object.next_validators_hash, message.next_validators_hash = $util.newBuffer($util.base64.length(object.next_validators_hash)), 0);
                    else if (object.next_validators_hash.length)
                        message.next_validators_hash = object.next_validators_hash;
                if (object.consensus_hash != null)
                    if (typeof object.consensus_hash === "string")
                        $util.base64.decode(object.consensus_hash, message.consensus_hash = $util.newBuffer($util.base64.length(object.consensus_hash)), 0);
                    else if (object.consensus_hash.length)
                        message.consensus_hash = object.consensus_hash;
                if (object.app_hash != null)
                    if (typeof object.app_hash === "string")
                        $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                    else if (object.app_hash.length)
                        message.app_hash = object.app_hash;
                if (object.last_results_hash != null)
                    if (typeof object.last_results_hash === "string")
                        $util.base64.decode(object.last_results_hash, message.last_results_hash = $util.newBuffer($util.base64.length(object.last_results_hash)), 0);
                    else if (object.last_results_hash.length)
                        message.last_results_hash = object.last_results_hash;
                if (object.evidence_hash != null)
                    if (typeof object.evidence_hash === "string")
                        $util.base64.decode(object.evidence_hash, message.evidence_hash = $util.newBuffer($util.base64.length(object.evidence_hash)), 0);
                    else if (object.evidence_hash.length)
                        message.evidence_hash = object.evidence_hash;
                if (object.proposer_address != null)
                    if (typeof object.proposer_address === "string")
                        $util.base64.decode(object.proposer_address, message.proposer_address = $util.newBuffer($util.base64.length(object.proposer_address)), 0);
                    else if (object.proposer_address.length)
                        message.proposer_address = object.proposer_address;
                return message;
            };

            /**
             * Creates a plain object from a Header message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.Header} message Header
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Header.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.version = null;
                    object.chain_id = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.time = null;
                    object.last_block_id = null;
                    if (options.bytes === String)
                        object.last_commit_hash = "";
                    else {
                        object.last_commit_hash = [];
                        if (options.bytes !== Array)
                            object.last_commit_hash = $util.newBuffer(object.last_commit_hash);
                    }
                    if (options.bytes === String)
                        object.data_hash = "";
                    else {
                        object.data_hash = [];
                        if (options.bytes !== Array)
                            object.data_hash = $util.newBuffer(object.data_hash);
                    }
                    if (options.bytes === String)
                        object.validators_hash = "";
                    else {
                        object.validators_hash = [];
                        if (options.bytes !== Array)
                            object.validators_hash = $util.newBuffer(object.validators_hash);
                    }
                    if (options.bytes === String)
                        object.next_validators_hash = "";
                    else {
                        object.next_validators_hash = [];
                        if (options.bytes !== Array)
                            object.next_validators_hash = $util.newBuffer(object.next_validators_hash);
                    }
                    if (options.bytes === String)
                        object.consensus_hash = "";
                    else {
                        object.consensus_hash = [];
                        if (options.bytes !== Array)
                            object.consensus_hash = $util.newBuffer(object.consensus_hash);
                    }
                    if (options.bytes === String)
                        object.app_hash = "";
                    else {
                        object.app_hash = [];
                        if (options.bytes !== Array)
                            object.app_hash = $util.newBuffer(object.app_hash);
                    }
                    if (options.bytes === String)
                        object.last_results_hash = "";
                    else {
                        object.last_results_hash = [];
                        if (options.bytes !== Array)
                            object.last_results_hash = $util.newBuffer(object.last_results_hash);
                    }
                    if (options.bytes === String)
                        object.evidence_hash = "";
                    else {
                        object.evidence_hash = [];
                        if (options.bytes !== Array)
                            object.evidence_hash = $util.newBuffer(object.evidence_hash);
                    }
                    if (options.bytes === String)
                        object.proposer_address = "";
                    else {
                        object.proposer_address = [];
                        if (options.bytes !== Array)
                            object.proposer_address = $util.newBuffer(object.proposer_address);
                    }
                }
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = $root.tendermint.version.Consensus.toObject(message.version, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                if (message.last_block_id != null && message.hasOwnProperty("last_block_id"))
                    object.last_block_id = $root.tendermint.types.BlockID.toObject(message.last_block_id, options);
                if (message.last_commit_hash != null && message.hasOwnProperty("last_commit_hash"))
                    object.last_commit_hash = options.bytes === String ? $util.base64.encode(message.last_commit_hash, 0, message.last_commit_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_commit_hash) : message.last_commit_hash;
                if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                    object.data_hash = options.bytes === String ? $util.base64.encode(message.data_hash, 0, message.data_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.data_hash) : message.data_hash;
                if (message.validators_hash != null && message.hasOwnProperty("validators_hash"))
                    object.validators_hash = options.bytes === String ? $util.base64.encode(message.validators_hash, 0, message.validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.validators_hash) : message.validators_hash;
                if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                    object.next_validators_hash = options.bytes === String ? $util.base64.encode(message.next_validators_hash, 0, message.next_validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_validators_hash) : message.next_validators_hash;
                if (message.consensus_hash != null && message.hasOwnProperty("consensus_hash"))
                    object.consensus_hash = options.bytes === String ? $util.base64.encode(message.consensus_hash, 0, message.consensus_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.consensus_hash) : message.consensus_hash;
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                    object.last_results_hash = options.bytes === String ? $util.base64.encode(message.last_results_hash, 0, message.last_results_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_results_hash) : message.last_results_hash;
                if (message.evidence_hash != null && message.hasOwnProperty("evidence_hash"))
                    object.evidence_hash = options.bytes === String ? $util.base64.encode(message.evidence_hash, 0, message.evidence_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.evidence_hash) : message.evidence_hash;
                if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                    object.proposer_address = options.bytes === String ? $util.base64.encode(message.proposer_address, 0, message.proposer_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.proposer_address) : message.proposer_address;
                return object;
            };

            /**
             * Converts this Header to JSON.
             * @function toJSON
             * @memberof tendermint.types.Header
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Header.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Header;
        })();

        types.Data = (function() {

            /**
             * Properties of a Data.
             * @memberof tendermint.types
             * @interface IData
             * @property {Array.<Uint8Array>|null} [txs] Data txs
             * @property {Uint8Array|null} [hash] Data hash
             */

            /**
             * Constructs a new Data.
             * @memberof tendermint.types
             * @classdesc Represents a Data.
             * @implements IData
             * @constructor
             * @param {tendermint.types.IData=} [properties] Properties to set
             */
            function Data(properties) {
                this.txs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Data txs.
             * @member {Array.<Uint8Array>} txs
             * @memberof tendermint.types.Data
             * @instance
             */
            Data.prototype.txs = $util.emptyArray;

            /**
             * Data hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.Data
             * @instance
             */
            Data.prototype.hash = $util.newBuffer([]);

            /**
             * Encodes the specified Data message. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.IData} message Data message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Data.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.txs != null && message.txs.length)
                    for (let i = 0; i < message.txs.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.txs[i]);
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified Data message, length delimited. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.IData} message Data message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Data.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Data message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Data
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Data} Data
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Data.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Data();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.txs && message.txs.length))
                            message.txs = [];
                        message.txs.push(reader.bytes());
                        break;
                    case 2:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Data message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Data
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Data} Data
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Data.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Data message.
             * @function verify
             * @memberof tendermint.types.Data
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Data.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.txs != null && message.hasOwnProperty("txs")) {
                    if (!Array.isArray(message.txs))
                        return "txs: array expected";
                    for (let i = 0; i < message.txs.length; ++i)
                        if (!(message.txs[i] && typeof message.txs[i].length === "number" || $util.isString(message.txs[i])))
                            return "txs: buffer[] expected";
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates a Data message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Data
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Data} Data
             */
            Data.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Data)
                    return object;
                let message = new $root.tendermint.types.Data();
                if (object.txs) {
                    if (!Array.isArray(object.txs))
                        throw TypeError(".tendermint.types.Data.txs: array expected");
                    message.txs = [];
                    for (let i = 0; i < object.txs.length; ++i)
                        if (typeof object.txs[i] === "string")
                            $util.base64.decode(object.txs[i], message.txs[i] = $util.newBuffer($util.base64.length(object.txs[i])), 0);
                        else if (object.txs[i].length)
                            message.txs[i] = object.txs[i];
                }
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from a Data message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.Data} message Data
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Data.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.txs = [];
                if (options.defaults)
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                if (message.txs && message.txs.length) {
                    object.txs = [];
                    for (let j = 0; j < message.txs.length; ++j)
                        object.txs[j] = options.bytes === String ? $util.base64.encode(message.txs[j], 0, message.txs[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.txs[j]) : message.txs[j];
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this Data to JSON.
             * @function toJSON
             * @memberof tendermint.types.Data
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Data.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Data;
        })();

        types.Vote = (function() {

            /**
             * Properties of a Vote.
             * @memberof tendermint.types
             * @interface IVote
             * @property {tendermint.types.SignedMsgType|null} [type] Vote type
             * @property {number|null} [height] Vote height
             * @property {number|null} [round] Vote round
             * @property {tendermint.types.IBlockID|null} [block_id] Vote block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] Vote timestamp
             * @property {Uint8Array|null} [validator_address] Vote validator_address
             * @property {number|null} [validator_index] Vote validator_index
             * @property {Uint8Array|null} [signature] Vote signature
             */

            /**
             * Constructs a new Vote.
             * @memberof tendermint.types
             * @classdesc Represents a Vote.
             * @implements IVote
             * @constructor
             * @param {tendermint.types.IVote=} [properties] Properties to set
             */
            function Vote(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Vote type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.type = 0;

            /**
             * Vote height.
             * @member {number} height
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Vote round.
             * @member {number} round
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.round = 0;

            /**
             * Vote block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.block_id = null;

            /**
             * Vote timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.timestamp = null;

            /**
             * Vote validator_address.
             * @member {Uint8Array} validator_address
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.validator_address = $util.newBuffer([]);

            /**
             * Vote validator_index.
             * @member {number} validator_index
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.validator_index = 0;

            /**
             * Vote signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified Vote message. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.IVote} message Vote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.validator_address);
                if (message.validator_index != null && Object.hasOwnProperty.call(message, "validator_index"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.validator_index);
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified Vote message, length delimited. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.IVote} message Vote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Vote message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Vote();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.height = reader.int64();
                        break;
                    case 3:
                        message.round = reader.int32();
                        break;
                    case 4:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.validator_address = reader.bytes();
                        break;
                    case 7:
                        message.validator_index = reader.int32();
                        break;
                    case 8:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Vote message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Vote message.
             * @function verify
             * @memberof tendermint.types.Vote
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Vote.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!(message.validator_address && typeof message.validator_address.length === "number" || $util.isString(message.validator_address)))
                        return "validator_address: buffer expected";
                if (message.validator_index != null && message.hasOwnProperty("validator_index"))
                    if (!$util.isInteger(message.validator_index))
                        return "validator_index: integer expected";
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a Vote message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Vote
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Vote} Vote
             */
            Vote.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Vote)
                    return object;
                let message = new $root.tendermint.types.Vote();
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Vote.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.Vote.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.validator_address != null)
                    if (typeof object.validator_address === "string")
                        $util.base64.decode(object.validator_address, message.validator_address = $util.newBuffer($util.base64.length(object.validator_address)), 0);
                    else if (object.validator_address.length)
                        message.validator_address = object.validator_address;
                if (object.validator_index != null)
                    message.validator_index = object.validator_index | 0;
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a Vote message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.Vote} message Vote
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Vote.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.block_id = null;
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.validator_address = "";
                    else {
                        object.validator_address = [];
                        if (options.bytes !== Array)
                            object.validator_address = $util.newBuffer(object.validator_address);
                    }
                    object.validator_index = 0;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = options.bytes === String ? $util.base64.encode(message.validator_address, 0, message.validator_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator_address) : message.validator_address;
                if (message.validator_index != null && message.hasOwnProperty("validator_index"))
                    object.validator_index = message.validator_index;
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this Vote to JSON.
             * @function toJSON
             * @memberof tendermint.types.Vote
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Vote.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Vote;
        })();

        types.Commit = (function() {

            /**
             * Properties of a Commit.
             * @memberof tendermint.types
             * @interface ICommit
             * @property {number|null} [height] Commit height
             * @property {number|null} [round] Commit round
             * @property {tendermint.types.IBlockID|null} [block_id] Commit block_id
             * @property {Array.<tendermint.types.ICommitSig>|null} [signatures] Commit signatures
             * @property {Uint8Array|null} [hash] Commit hash
             * @property {tendermint.libs.bits.IBitArray|null} [bit_array] Commit bit_array
             */

            /**
             * Constructs a new Commit.
             * @memberof tendermint.types
             * @classdesc Represents a Commit.
             * @implements ICommit
             * @constructor
             * @param {tendermint.types.ICommit=} [properties] Properties to set
             */
            function Commit(properties) {
                this.signatures = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Commit height.
             * @member {number} height
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Commit round.
             * @member {number} round
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.round = 0;

            /**
             * Commit block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.block_id = null;

            /**
             * Commit signatures.
             * @member {Array.<tendermint.types.ICommitSig>} signatures
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.signatures = $util.emptyArray;

            /**
             * Commit hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.hash = $util.newBuffer([]);

            /**
             * Commit bit_array.
             * @member {tendermint.libs.bits.IBitArray|null|undefined} bit_array
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.bit_array = null;

            /**
             * Encodes the specified Commit message. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.ICommit} message Commit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Commit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.signatures != null && message.signatures.length)
                    for (let i = 0; i < message.signatures.length; ++i)
                        $root.tendermint.types.CommitSig.encode(message.signatures[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.hash);
                if (message.bit_array != null && Object.hasOwnProperty.call(message, "bit_array"))
                    $root.tendermint.libs.bits.BitArray.encode(message.bit_array, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Commit message, length delimited. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.ICommit} message Commit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Commit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Commit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Commit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Commit} Commit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Commit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Commit();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.signatures && message.signatures.length))
                            message.signatures = [];
                        message.signatures.push($root.tendermint.types.CommitSig.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.hash = reader.bytes();
                        break;
                    case 6:
                        message.bit_array = $root.tendermint.libs.bits.BitArray.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Commit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Commit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Commit} Commit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Commit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Commit message.
             * @function verify
             * @memberof tendermint.types.Commit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Commit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.signatures != null && message.hasOwnProperty("signatures")) {
                    if (!Array.isArray(message.signatures))
                        return "signatures: array expected";
                    for (let i = 0; i < message.signatures.length; ++i) {
                        let error = $root.tendermint.types.CommitSig.verify(message.signatures[i]);
                        if (error)
                            return "signatures." + error;
                    }
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.bit_array != null && message.hasOwnProperty("bit_array")) {
                    let error = $root.tendermint.libs.bits.BitArray.verify(message.bit_array);
                    if (error)
                        return "bit_array." + error;
                }
                return null;
            };

            /**
             * Creates a Commit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Commit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Commit} Commit
             */
            Commit.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Commit)
                    return object;
                let message = new $root.tendermint.types.Commit();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Commit.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.signatures) {
                    if (!Array.isArray(object.signatures))
                        throw TypeError(".tendermint.types.Commit.signatures: array expected");
                    message.signatures = [];
                    for (let i = 0; i < object.signatures.length; ++i) {
                        if (typeof object.signatures[i] !== "object")
                            throw TypeError(".tendermint.types.Commit.signatures: object expected");
                        message.signatures[i] = $root.tendermint.types.CommitSig.fromObject(object.signatures[i]);
                    }
                }
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.bit_array != null) {
                    if (typeof object.bit_array !== "object")
                        throw TypeError(".tendermint.types.Commit.bit_array: object expected");
                    message.bit_array = $root.tendermint.libs.bits.BitArray.fromObject(object.bit_array);
                }
                return message;
            };

            /**
             * Creates a plain object from a Commit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.Commit} message Commit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Commit.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.signatures = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.block_id = null;
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.bit_array = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.signatures && message.signatures.length) {
                    object.signatures = [];
                    for (let j = 0; j < message.signatures.length; ++j)
                        object.signatures[j] = $root.tendermint.types.CommitSig.toObject(message.signatures[j], options);
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.bit_array != null && message.hasOwnProperty("bit_array"))
                    object.bit_array = $root.tendermint.libs.bits.BitArray.toObject(message.bit_array, options);
                return object;
            };

            /**
             * Converts this Commit to JSON.
             * @function toJSON
             * @memberof tendermint.types.Commit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Commit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Commit;
        })();

        types.CommitSig = (function() {

            /**
             * Properties of a CommitSig.
             * @memberof tendermint.types
             * @interface ICommitSig
             * @property {tendermint.types.BlockIDFlag|null} [block_id_flag] CommitSig block_id_flag
             * @property {Uint8Array|null} [validator_address] CommitSig validator_address
             * @property {google.protobuf.ITimestamp|null} [timestamp] CommitSig timestamp
             * @property {Uint8Array|null} [signature] CommitSig signature
             */

            /**
             * Constructs a new CommitSig.
             * @memberof tendermint.types
             * @classdesc Represents a CommitSig.
             * @implements ICommitSig
             * @constructor
             * @param {tendermint.types.ICommitSig=} [properties] Properties to set
             */
            function CommitSig(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CommitSig block_id_flag.
             * @member {tendermint.types.BlockIDFlag} block_id_flag
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.block_id_flag = 0;

            /**
             * CommitSig validator_address.
             * @member {Uint8Array} validator_address
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.validator_address = $util.newBuffer([]);

            /**
             * CommitSig timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.timestamp = null;

            /**
             * CommitSig signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified CommitSig message. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.ICommitSig} message CommitSig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommitSig.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_id_flag != null && Object.hasOwnProperty.call(message, "block_id_flag"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.block_id_flag);
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.validator_address);
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified CommitSig message, length delimited. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.ICommitSig} message CommitSig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommitSig.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CommitSig message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.CommitSig} CommitSig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommitSig.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.CommitSig();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_id_flag = reader.int32();
                        break;
                    case 2:
                        message.validator_address = reader.bytes();
                        break;
                    case 3:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CommitSig message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.CommitSig} CommitSig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommitSig.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CommitSig message.
             * @function verify
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CommitSig.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block_id_flag != null && message.hasOwnProperty("block_id_flag"))
                    switch (message.block_id_flag) {
                    default:
                        return "block_id_flag: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!(message.validator_address && typeof message.validator_address.length === "number" || $util.isString(message.validator_address)))
                        return "validator_address: buffer expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a CommitSig message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.CommitSig} CommitSig
             */
            CommitSig.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.CommitSig)
                    return object;
                let message = new $root.tendermint.types.CommitSig();
                switch (object.block_id_flag) {
                case "BLOCK_ID_FLAG_UNKNOWN":
                case 0:
                    message.block_id_flag = 0;
                    break;
                case "BLOCK_ID_FLAG_ABSENT":
                case 1:
                    message.block_id_flag = 1;
                    break;
                case "BLOCK_ID_FLAG_COMMIT":
                case 2:
                    message.block_id_flag = 2;
                    break;
                case "BLOCK_ID_FLAG_NIL":
                case 3:
                    message.block_id_flag = 3;
                    break;
                }
                if (object.validator_address != null)
                    if (typeof object.validator_address === "string")
                        $util.base64.decode(object.validator_address, message.validator_address = $util.newBuffer($util.base64.length(object.validator_address)), 0);
                    else if (object.validator_address.length)
                        message.validator_address = object.validator_address;
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.CommitSig.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a CommitSig message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.CommitSig} message CommitSig
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CommitSig.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block_id_flag = options.enums === String ? "BLOCK_ID_FLAG_UNKNOWN" : 0;
                    if (options.bytes === String)
                        object.validator_address = "";
                    else {
                        object.validator_address = [];
                        if (options.bytes !== Array)
                            object.validator_address = $util.newBuffer(object.validator_address);
                    }
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.block_id_flag != null && message.hasOwnProperty("block_id_flag"))
                    object.block_id_flag = options.enums === String ? $root.tendermint.types.BlockIDFlag[message.block_id_flag] : message.block_id_flag;
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = options.bytes === String ? $util.base64.encode(message.validator_address, 0, message.validator_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator_address) : message.validator_address;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this CommitSig to JSON.
             * @function toJSON
             * @memberof tendermint.types.CommitSig
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CommitSig.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CommitSig;
        })();

        types.Proposal = (function() {

            /**
             * Properties of a Proposal.
             * @memberof tendermint.types
             * @interface IProposal
             * @property {tendermint.types.SignedMsgType|null} [type] Proposal type
             * @property {number|null} [height] Proposal height
             * @property {number|null} [round] Proposal round
             * @property {number|null} [pol_round] Proposal pol_round
             * @property {tendermint.types.IBlockID|null} [block_id] Proposal block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] Proposal timestamp
             * @property {Uint8Array|null} [signature] Proposal signature
             */

            /**
             * Constructs a new Proposal.
             * @memberof tendermint.types
             * @classdesc Represents a Proposal.
             * @implements IProposal
             * @constructor
             * @param {tendermint.types.IProposal=} [properties] Properties to set
             */
            function Proposal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Proposal type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.type = 0;

            /**
             * Proposal height.
             * @member {number} height
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proposal round.
             * @member {number} round
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.round = 0;

            /**
             * Proposal pol_round.
             * @member {number} pol_round
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.pol_round = 0;

            /**
             * Proposal block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.block_id = null;

            /**
             * Proposal timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.timestamp = null;

            /**
             * Proposal signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified Proposal message. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.IProposal} message Proposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                if (message.pol_round != null && Object.hasOwnProperty.call(message, "pol_round"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pol_round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified Proposal message, length delimited. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.IProposal} message Proposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Proposal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.height = reader.int64();
                        break;
                    case 3:
                        message.round = reader.int32();
                        break;
                    case 4:
                        message.pol_round = reader.int32();
                        break;
                    case 5:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Proposal message.
             * @function verify
             * @memberof tendermint.types.Proposal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Proposal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                    if (!$util.isInteger(message.pol_round))
                        return "pol_round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a Proposal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Proposal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Proposal} Proposal
             */
            Proposal.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Proposal)
                    return object;
                let message = new $root.tendermint.types.Proposal();
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.pol_round != null)
                    message.pol_round = object.pol_round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Proposal.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.Proposal.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a Proposal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.Proposal} message Proposal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Proposal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.pol_round = 0;
                    object.block_id = null;
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                    object.pol_round = message.pol_round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this Proposal to JSON.
             * @function toJSON
             * @memberof tendermint.types.Proposal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Proposal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Proposal;
        })();

        types.SignedHeader = (function() {

            /**
             * Properties of a SignedHeader.
             * @memberof tendermint.types
             * @interface ISignedHeader
             * @property {tendermint.types.IHeader|null} [header] SignedHeader header
             * @property {tendermint.types.ICommit|null} [commit] SignedHeader commit
             */

            /**
             * Constructs a new SignedHeader.
             * @memberof tendermint.types
             * @classdesc Represents a SignedHeader.
             * @implements ISignedHeader
             * @constructor
             * @param {tendermint.types.ISignedHeader=} [properties] Properties to set
             */
            function SignedHeader(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SignedHeader header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.SignedHeader
             * @instance
             */
            SignedHeader.prototype.header = null;

            /**
             * SignedHeader commit.
             * @member {tendermint.types.ICommit|null|undefined} commit
             * @memberof tendermint.types.SignedHeader
             * @instance
             */
            SignedHeader.prototype.commit = null;

            /**
             * Encodes the specified SignedHeader message. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.ISignedHeader} message SignedHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                    $root.tendermint.types.Commit.encode(message.commit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SignedHeader message, length delimited. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.ISignedHeader} message SignedHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SignedHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.SignedHeader} SignedHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.SignedHeader();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.commit = $root.tendermint.types.Commit.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SignedHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.SignedHeader} SignedHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SignedHeader message.
             * @function verify
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignedHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    let error = $root.tendermint.types.Commit.verify(message.commit);
                    if (error)
                        return "commit." + error;
                }
                return null;
            };

            /**
             * Creates a SignedHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.SignedHeader} SignedHeader
             */
            SignedHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.SignedHeader)
                    return object;
                let message = new $root.tendermint.types.SignedHeader();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.types.SignedHeader.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.commit != null) {
                    if (typeof object.commit !== "object")
                        throw TypeError(".tendermint.types.SignedHeader.commit: object expected");
                    message.commit = $root.tendermint.types.Commit.fromObject(object.commit);
                }
                return message;
            };

            /**
             * Creates a plain object from a SignedHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.SignedHeader} message SignedHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignedHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.header = null;
                    object.commit = null;
                }
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.commit != null && message.hasOwnProperty("commit"))
                    object.commit = $root.tendermint.types.Commit.toObject(message.commit, options);
                return object;
            };

            /**
             * Converts this SignedHeader to JSON.
             * @function toJSON
             * @memberof tendermint.types.SignedHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignedHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SignedHeader;
        })();

        types.BlockMeta = (function() {

            /**
             * Properties of a BlockMeta.
             * @memberof tendermint.types
             * @interface IBlockMeta
             * @property {tendermint.types.IBlockID|null} [block_id] BlockMeta block_id
             * @property {number|null} [block_size] BlockMeta block_size
             * @property {tendermint.types.IHeader|null} [header] BlockMeta header
             * @property {number|null} [num_txs] BlockMeta num_txs
             */

            /**
             * Constructs a new BlockMeta.
             * @memberof tendermint.types
             * @classdesc Represents a BlockMeta.
             * @implements IBlockMeta
             * @constructor
             * @param {tendermint.types.IBlockMeta=} [properties] Properties to set
             */
            function BlockMeta(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockMeta block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.block_id = null;

            /**
             * BlockMeta block_size.
             * @member {number} block_size
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.block_size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockMeta header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.header = null;

            /**
             * BlockMeta num_txs.
             * @member {number} num_txs
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.num_txs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockMeta message. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.IBlockMeta} message BlockMeta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMeta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.block_size != null && Object.hasOwnProperty.call(message, "block_size"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.block_size);
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.num_txs != null && Object.hasOwnProperty.call(message, "num_txs"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.num_txs);
                return writer;
            };

            /**
             * Encodes the specified BlockMeta message, length delimited. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.IBlockMeta} message BlockMeta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMeta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockMeta message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.BlockMeta} BlockMeta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMeta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockMeta();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.block_size = reader.int64();
                        break;
                    case 3:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.num_txs = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockMeta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.BlockMeta} BlockMeta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMeta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockMeta message.
             * @function verify
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockMeta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.block_size != null && message.hasOwnProperty("block_size"))
                    if (!$util.isInteger(message.block_size) && !(message.block_size && $util.isInteger(message.block_size.low) && $util.isInteger(message.block_size.high)))
                        return "block_size: integer|Long expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.num_txs != null && message.hasOwnProperty("num_txs"))
                    if (!$util.isInteger(message.num_txs) && !(message.num_txs && $util.isInteger(message.num_txs.low) && $util.isInteger(message.num_txs.high)))
                        return "num_txs: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockMeta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.BlockMeta} BlockMeta
             */
            BlockMeta.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.BlockMeta)
                    return object;
                let message = new $root.tendermint.types.BlockMeta();
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.BlockMeta.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.block_size != null)
                    if ($util.Long)
                        (message.block_size = $util.Long.fromValue(object.block_size)).unsigned = false;
                    else if (typeof object.block_size === "string")
                        message.block_size = parseInt(object.block_size, 10);
                    else if (typeof object.block_size === "number")
                        message.block_size = object.block_size;
                    else if (typeof object.block_size === "object")
                        message.block_size = new $util.LongBits(object.block_size.low >>> 0, object.block_size.high >>> 0).toNumber();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.types.BlockMeta.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.num_txs != null)
                    if ($util.Long)
                        (message.num_txs = $util.Long.fromValue(object.num_txs)).unsigned = false;
                    else if (typeof object.num_txs === "string")
                        message.num_txs = parseInt(object.num_txs, 10);
                    else if (typeof object.num_txs === "number")
                        message.num_txs = object.num_txs;
                    else if (typeof object.num_txs === "object")
                        message.num_txs = new $util.LongBits(object.num_txs.low >>> 0, object.num_txs.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockMeta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.BlockMeta} message BlockMeta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockMeta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block_id = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.block_size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_size = options.longs === String ? "0" : 0;
                    object.header = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.num_txs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.num_txs = options.longs === String ? "0" : 0;
                }
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.block_size != null && message.hasOwnProperty("block_size"))
                    if (typeof message.block_size === "number")
                        object.block_size = options.longs === String ? String(message.block_size) : message.block_size;
                    else
                        object.block_size = options.longs === String ? $util.Long.prototype.toString.call(message.block_size) : options.longs === Number ? new $util.LongBits(message.block_size.low >>> 0, message.block_size.high >>> 0).toNumber() : message.block_size;
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.num_txs != null && message.hasOwnProperty("num_txs"))
                    if (typeof message.num_txs === "number")
                        object.num_txs = options.longs === String ? String(message.num_txs) : message.num_txs;
                    else
                        object.num_txs = options.longs === String ? $util.Long.prototype.toString.call(message.num_txs) : options.longs === Number ? new $util.LongBits(message.num_txs.low >>> 0, message.num_txs.high >>> 0).toNumber() : message.num_txs;
                return object;
            };

            /**
             * Converts this BlockMeta to JSON.
             * @function toJSON
             * @memberof tendermint.types.BlockMeta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockMeta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockMeta;
        })();

        types.TxProof = (function() {

            /**
             * Properties of a TxProof.
             * @memberof tendermint.types
             * @interface ITxProof
             * @property {Uint8Array|null} [root_hash] TxProof root_hash
             * @property {Uint8Array|null} [data] TxProof data
             * @property {tendermint.crypto.IProof|null} [proof] TxProof proof
             */

            /**
             * Constructs a new TxProof.
             * @memberof tendermint.types
             * @classdesc Represents a TxProof.
             * @implements ITxProof
             * @constructor
             * @param {tendermint.types.ITxProof=} [properties] Properties to set
             */
            function TxProof(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TxProof root_hash.
             * @member {Uint8Array} root_hash
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.root_hash = $util.newBuffer([]);

            /**
             * TxProof data.
             * @member {Uint8Array} data
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.data = $util.newBuffer([]);

            /**
             * TxProof proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.proof = null;

            /**
             * Encodes the specified TxProof message. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.ITxProof} message TxProof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxProof.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.root_hash != null && Object.hasOwnProperty.call(message, "root_hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.root_hash);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TxProof message, length delimited. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.ITxProof} message TxProof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxProof.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TxProof message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.TxProof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.TxProof} TxProof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxProof.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.TxProof();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.root_hash = reader.bytes();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TxProof message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.TxProof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.TxProof} TxProof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxProof.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TxProof message.
             * @function verify
             * @memberof tendermint.types.TxProof
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TxProof.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.root_hash != null && message.hasOwnProperty("root_hash"))
                    if (!(message.root_hash && typeof message.root_hash.length === "number" || $util.isString(message.root_hash)))
                        return "root_hash: buffer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a TxProof message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.TxProof
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.TxProof} TxProof
             */
            TxProof.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.TxProof)
                    return object;
                let message = new $root.tendermint.types.TxProof();
                if (object.root_hash != null)
                    if (typeof object.root_hash === "string")
                        $util.base64.decode(object.root_hash, message.root_hash = $util.newBuffer($util.base64.length(object.root_hash)), 0);
                    else if (object.root_hash.length)
                        message.root_hash = object.root_hash;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.types.TxProof.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a TxProof message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.TxProof} message TxProof
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TxProof.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.root_hash = "";
                    else {
                        object.root_hash = [];
                        if (options.bytes !== Array)
                            object.root_hash = $util.newBuffer(object.root_hash);
                    }
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.proof = null;
                }
                if (message.root_hash != null && message.hasOwnProperty("root_hash"))
                    object.root_hash = options.bytes === String ? $util.base64.encode(message.root_hash, 0, message.root_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.root_hash) : message.root_hash;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this TxProof to JSON.
             * @function toJSON
             * @memberof tendermint.types.TxProof
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TxProof.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TxProof;
        })();

        types.ConsensusParams = (function() {

            /**
             * Properties of a ConsensusParams.
             * @memberof tendermint.types
             * @interface IConsensusParams
             * @property {tendermint.types.IBlockParams|null} [block] ConsensusParams block
             * @property {tendermint.types.IEvidenceParams|null} [evidence] ConsensusParams evidence
             * @property {tendermint.types.IValidatorParams|null} [validator] ConsensusParams validator
             * @property {tendermint.types.IVersionParams|null} [version] ConsensusParams version
             */

            /**
             * Constructs a new ConsensusParams.
             * @memberof tendermint.types
             * @classdesc Represents a ConsensusParams.
             * @implements IConsensusParams
             * @constructor
             * @param {tendermint.types.IConsensusParams=} [properties] Properties to set
             */
            function ConsensusParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsensusParams block.
             * @member {tendermint.types.IBlockParams|null|undefined} block
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.block = null;

            /**
             * ConsensusParams evidence.
             * @member {tendermint.types.IEvidenceParams|null|undefined} evidence
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.evidence = null;

            /**
             * ConsensusParams validator.
             * @member {tendermint.types.IValidatorParams|null|undefined} validator
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.validator = null;

            /**
             * ConsensusParams version.
             * @member {tendermint.types.IVersionParams|null|undefined} version
             * @memberof tendermint.types.ConsensusParams
             * @instance
             */
            ConsensusParams.prototype.version = null;

            /**
             * Encodes the specified ConsensusParams message. Does not implicitly {@link tendermint.types.ConsensusParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {tendermint.types.IConsensusParams} message ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    $root.tendermint.types.BlockParams.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.evidence != null && Object.hasOwnProperty.call(message, "evidence"))
                    $root.tendermint.types.EvidenceParams.encode(message.evidence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                    $root.tendermint.types.ValidatorParams.encode(message.validator, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    $root.tendermint.types.VersionParams.encode(message.version, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConsensusParams message, length delimited. Does not implicitly {@link tendermint.types.ConsensusParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {tendermint.types.IConsensusParams} message ConsensusParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsensusParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ConsensusParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = $root.tendermint.types.BlockParams.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.evidence = $root.tendermint.types.EvidenceParams.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.validator = $root.tendermint.types.ValidatorParams.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.version = $root.tendermint.types.VersionParams.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConsensusParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ConsensusParams} ConsensusParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsensusParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsensusParams message.
             * @function verify
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsensusParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block")) {
                    let error = $root.tendermint.types.BlockParams.verify(message.block);
                    if (error)
                        return "block." + error;
                }
                if (message.evidence != null && message.hasOwnProperty("evidence")) {
                    let error = $root.tendermint.types.EvidenceParams.verify(message.evidence);
                    if (error)
                        return "evidence." + error;
                }
                if (message.validator != null && message.hasOwnProperty("validator")) {
                    let error = $root.tendermint.types.ValidatorParams.verify(message.validator);
                    if (error)
                        return "validator." + error;
                }
                if (message.version != null && message.hasOwnProperty("version")) {
                    let error = $root.tendermint.types.VersionParams.verify(message.version);
                    if (error)
                        return "version." + error;
                }
                return null;
            };

            /**
             * Creates a ConsensusParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ConsensusParams} ConsensusParams
             */
            ConsensusParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ConsensusParams)
                    return object;
                let message = new $root.tendermint.types.ConsensusParams();
                if (object.block != null) {
                    if (typeof object.block !== "object")
                        throw TypeError(".tendermint.types.ConsensusParams.block: object expected");
                    message.block = $root.tendermint.types.BlockParams.fromObject(object.block);
                }
                if (object.evidence != null) {
                    if (typeof object.evidence !== "object")
                        throw TypeError(".tendermint.types.ConsensusParams.evidence: object expected");
                    message.evidence = $root.tendermint.types.EvidenceParams.fromObject(object.evidence);
                }
                if (object.validator != null) {
                    if (typeof object.validator !== "object")
                        throw TypeError(".tendermint.types.ConsensusParams.validator: object expected");
                    message.validator = $root.tendermint.types.ValidatorParams.fromObject(object.validator);
                }
                if (object.version != null) {
                    if (typeof object.version !== "object")
                        throw TypeError(".tendermint.types.ConsensusParams.version: object expected");
                    message.version = $root.tendermint.types.VersionParams.fromObject(object.version);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConsensusParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ConsensusParams
             * @static
             * @param {tendermint.types.ConsensusParams} message ConsensusParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsensusParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block = null;
                    object.evidence = null;
                    object.validator = null;
                    object.version = null;
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    object.block = $root.tendermint.types.BlockParams.toObject(message.block, options);
                if (message.evidence != null && message.hasOwnProperty("evidence"))
                    object.evidence = $root.tendermint.types.EvidenceParams.toObject(message.evidence, options);
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = $root.tendermint.types.ValidatorParams.toObject(message.validator, options);
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = $root.tendermint.types.VersionParams.toObject(message.version, options);
                return object;
            };

            /**
             * Converts this ConsensusParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.ConsensusParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsensusParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConsensusParams;
        })();

        types.BlockParams = (function() {

            /**
             * Properties of a BlockParams.
             * @memberof tendermint.types
             * @interface IBlockParams
             * @property {number|null} [max_bytes] BlockParams max_bytes
             * @property {number|null} [max_gas] BlockParams max_gas
             * @property {number|null} [time_iota_ms] BlockParams time_iota_ms
             */

            /**
             * Constructs a new BlockParams.
             * @memberof tendermint.types
             * @classdesc Represents a BlockParams.
             * @implements IBlockParams
             * @constructor
             * @param {tendermint.types.IBlockParams=} [properties] Properties to set
             */
            function BlockParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockParams max_bytes.
             * @member {number} max_bytes
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockParams max_gas.
             * @member {number} max_gas
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockParams time_iota_ms.
             * @member {number} time_iota_ms
             * @memberof tendermint.types.BlockParams
             * @instance
             */
            BlockParams.prototype.time_iota_ms = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockParams message. Does not implicitly {@link tendermint.types.BlockParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {tendermint.types.IBlockParams} message BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.max_bytes != null && Object.hasOwnProperty.call(message, "max_bytes"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_bytes);
                if (message.max_gas != null && Object.hasOwnProperty.call(message, "max_gas"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.max_gas);
                if (message.time_iota_ms != null && Object.hasOwnProperty.call(message, "time_iota_ms"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.time_iota_ms);
                return writer;
            };

            /**
             * Encodes the specified BlockParams message, length delimited. Does not implicitly {@link tendermint.types.BlockParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {tendermint.types.IBlockParams} message BlockParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.max_bytes = reader.int64();
                        break;
                    case 2:
                        message.max_gas = reader.int64();
                        break;
                    case 3:
                        message.time_iota_ms = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.BlockParams} BlockParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockParams message.
             * @function verify
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (!$util.isInteger(message.max_bytes) && !(message.max_bytes && $util.isInteger(message.max_bytes.low) && $util.isInteger(message.max_bytes.high)))
                        return "max_bytes: integer|Long expected";
                if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                    if (!$util.isInteger(message.max_gas) && !(message.max_gas && $util.isInteger(message.max_gas.low) && $util.isInteger(message.max_gas.high)))
                        return "max_gas: integer|Long expected";
                if (message.time_iota_ms != null && message.hasOwnProperty("time_iota_ms"))
                    if (!$util.isInteger(message.time_iota_ms) && !(message.time_iota_ms && $util.isInteger(message.time_iota_ms.low) && $util.isInteger(message.time_iota_ms.high)))
                        return "time_iota_ms: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.BlockParams} BlockParams
             */
            BlockParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.BlockParams)
                    return object;
                let message = new $root.tendermint.types.BlockParams();
                if (object.max_bytes != null)
                    if ($util.Long)
                        (message.max_bytes = $util.Long.fromValue(object.max_bytes)).unsigned = false;
                    else if (typeof object.max_bytes === "string")
                        message.max_bytes = parseInt(object.max_bytes, 10);
                    else if (typeof object.max_bytes === "number")
                        message.max_bytes = object.max_bytes;
                    else if (typeof object.max_bytes === "object")
                        message.max_bytes = new $util.LongBits(object.max_bytes.low >>> 0, object.max_bytes.high >>> 0).toNumber();
                if (object.max_gas != null)
                    if ($util.Long)
                        (message.max_gas = $util.Long.fromValue(object.max_gas)).unsigned = false;
                    else if (typeof object.max_gas === "string")
                        message.max_gas = parseInt(object.max_gas, 10);
                    else if (typeof object.max_gas === "number")
                        message.max_gas = object.max_gas;
                    else if (typeof object.max_gas === "object")
                        message.max_gas = new $util.LongBits(object.max_gas.low >>> 0, object.max_gas.high >>> 0).toNumber();
                if (object.time_iota_ms != null)
                    if ($util.Long)
                        (message.time_iota_ms = $util.Long.fromValue(object.time_iota_ms)).unsigned = false;
                    else if (typeof object.time_iota_ms === "string")
                        message.time_iota_ms = parseInt(object.time_iota_ms, 10);
                    else if (typeof object.time_iota_ms === "number")
                        message.time_iota_ms = object.time_iota_ms;
                    else if (typeof object.time_iota_ms === "object")
                        message.time_iota_ms = new $util.LongBits(object.time_iota_ms.low >>> 0, object.time_iota_ms.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.BlockParams
             * @static
             * @param {tendermint.types.BlockParams} message BlockParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_bytes = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_gas = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.time_iota_ms = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.time_iota_ms = options.longs === String ? "0" : 0;
                }
                if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                    if (typeof message.max_bytes === "number")
                        object.max_bytes = options.longs === String ? String(message.max_bytes) : message.max_bytes;
                    else
                        object.max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.max_bytes) : options.longs === Number ? new $util.LongBits(message.max_bytes.low >>> 0, message.max_bytes.high >>> 0).toNumber() : message.max_bytes;
                if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                    if (typeof message.max_gas === "number")
                        object.max_gas = options.longs === String ? String(message.max_gas) : message.max_gas;
                    else
                        object.max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.max_gas) : options.longs === Number ? new $util.LongBits(message.max_gas.low >>> 0, message.max_gas.high >>> 0).toNumber() : message.max_gas;
                if (message.time_iota_ms != null && message.hasOwnProperty("time_iota_ms"))
                    if (typeof message.time_iota_ms === "number")
                        object.time_iota_ms = options.longs === String ? String(message.time_iota_ms) : message.time_iota_ms;
                    else
                        object.time_iota_ms = options.longs === String ? $util.Long.prototype.toString.call(message.time_iota_ms) : options.longs === Number ? new $util.LongBits(message.time_iota_ms.low >>> 0, message.time_iota_ms.high >>> 0).toNumber() : message.time_iota_ms;
                return object;
            };

            /**
             * Converts this BlockParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.BlockParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockParams;
        })();

        types.EvidenceParams = (function() {

            /**
             * Properties of an EvidenceParams.
             * @memberof tendermint.types
             * @interface IEvidenceParams
             * @property {number|null} [max_age_num_blocks] EvidenceParams max_age_num_blocks
             * @property {google.protobuf.IDuration|null} [max_age_duration] EvidenceParams max_age_duration
             * @property {number|null} [max_num] EvidenceParams max_num
             * @property {number|null} [proof_trial_period] EvidenceParams proof_trial_period
             */

            /**
             * Constructs a new EvidenceParams.
             * @memberof tendermint.types
             * @classdesc Represents an EvidenceParams.
             * @implements IEvidenceParams
             * @constructor
             * @param {tendermint.types.IEvidenceParams=} [properties] Properties to set
             */
            function EvidenceParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EvidenceParams max_age_num_blocks.
             * @member {number} max_age_num_blocks
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_age_num_blocks = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EvidenceParams max_age_duration.
             * @member {google.protobuf.IDuration|null|undefined} max_age_duration
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_age_duration = null;

            /**
             * EvidenceParams max_num.
             * @member {number} max_num
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.max_num = 0;

            /**
             * EvidenceParams proof_trial_period.
             * @member {number} proof_trial_period
             * @memberof tendermint.types.EvidenceParams
             * @instance
             */
            EvidenceParams.prototype.proof_trial_period = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified EvidenceParams message. Does not implicitly {@link tendermint.types.EvidenceParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {tendermint.types.IEvidenceParams} message EvidenceParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.max_age_num_blocks != null && Object.hasOwnProperty.call(message, "max_age_num_blocks"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_age_num_blocks);
                if (message.max_age_duration != null && Object.hasOwnProperty.call(message, "max_age_duration"))
                    $root.google.protobuf.Duration.encode(message.max_age_duration, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.max_num != null && Object.hasOwnProperty.call(message, "max_num"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max_num);
                if (message.proof_trial_period != null && Object.hasOwnProperty.call(message, "proof_trial_period"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.proof_trial_period);
                return writer;
            };

            /**
             * Encodes the specified EvidenceParams message, length delimited. Does not implicitly {@link tendermint.types.EvidenceParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {tendermint.types.IEvidenceParams} message EvidenceParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EvidenceParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.EvidenceParams} EvidenceParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.EvidenceParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.max_age_num_blocks = reader.int64();
                        break;
                    case 2:
                        message.max_age_duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.max_num = reader.uint32();
                        break;
                    case 4:
                        message.proof_trial_period = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EvidenceParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.EvidenceParams} EvidenceParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EvidenceParams message.
             * @function verify
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EvidenceParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.max_age_num_blocks != null && message.hasOwnProperty("max_age_num_blocks"))
                    if (!$util.isInteger(message.max_age_num_blocks) && !(message.max_age_num_blocks && $util.isInteger(message.max_age_num_blocks.low) && $util.isInteger(message.max_age_num_blocks.high)))
                        return "max_age_num_blocks: integer|Long expected";
                if (message.max_age_duration != null && message.hasOwnProperty("max_age_duration")) {
                    let error = $root.google.protobuf.Duration.verify(message.max_age_duration);
                    if (error)
                        return "max_age_duration." + error;
                }
                if (message.max_num != null && message.hasOwnProperty("max_num"))
                    if (!$util.isInteger(message.max_num))
                        return "max_num: integer expected";
                if (message.proof_trial_period != null && message.hasOwnProperty("proof_trial_period"))
                    if (!$util.isInteger(message.proof_trial_period) && !(message.proof_trial_period && $util.isInteger(message.proof_trial_period.low) && $util.isInteger(message.proof_trial_period.high)))
                        return "proof_trial_period: integer|Long expected";
                return null;
            };

            /**
             * Creates an EvidenceParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.EvidenceParams} EvidenceParams
             */
            EvidenceParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.EvidenceParams)
                    return object;
                let message = new $root.tendermint.types.EvidenceParams();
                if (object.max_age_num_blocks != null)
                    if ($util.Long)
                        (message.max_age_num_blocks = $util.Long.fromValue(object.max_age_num_blocks)).unsigned = false;
                    else if (typeof object.max_age_num_blocks === "string")
                        message.max_age_num_blocks = parseInt(object.max_age_num_blocks, 10);
                    else if (typeof object.max_age_num_blocks === "number")
                        message.max_age_num_blocks = object.max_age_num_blocks;
                    else if (typeof object.max_age_num_blocks === "object")
                        message.max_age_num_blocks = new $util.LongBits(object.max_age_num_blocks.low >>> 0, object.max_age_num_blocks.high >>> 0).toNumber();
                if (object.max_age_duration != null) {
                    if (typeof object.max_age_duration !== "object")
                        throw TypeError(".tendermint.types.EvidenceParams.max_age_duration: object expected");
                    message.max_age_duration = $root.google.protobuf.Duration.fromObject(object.max_age_duration);
                }
                if (object.max_num != null)
                    message.max_num = object.max_num >>> 0;
                if (object.proof_trial_period != null)
                    if ($util.Long)
                        (message.proof_trial_period = $util.Long.fromValue(object.proof_trial_period)).unsigned = false;
                    else if (typeof object.proof_trial_period === "string")
                        message.proof_trial_period = parseInt(object.proof_trial_period, 10);
                    else if (typeof object.proof_trial_period === "number")
                        message.proof_trial_period = object.proof_trial_period;
                    else if (typeof object.proof_trial_period === "object")
                        message.proof_trial_period = new $util.LongBits(object.proof_trial_period.low >>> 0, object.proof_trial_period.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an EvidenceParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.EvidenceParams
             * @static
             * @param {tendermint.types.EvidenceParams} message EvidenceParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EvidenceParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.max_age_num_blocks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.max_age_num_blocks = options.longs === String ? "0" : 0;
                    object.max_age_duration = null;
                    object.max_num = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.proof_trial_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.proof_trial_period = options.longs === String ? "0" : 0;
                }
                if (message.max_age_num_blocks != null && message.hasOwnProperty("max_age_num_blocks"))
                    if (typeof message.max_age_num_blocks === "number")
                        object.max_age_num_blocks = options.longs === String ? String(message.max_age_num_blocks) : message.max_age_num_blocks;
                    else
                        object.max_age_num_blocks = options.longs === String ? $util.Long.prototype.toString.call(message.max_age_num_blocks) : options.longs === Number ? new $util.LongBits(message.max_age_num_blocks.low >>> 0, message.max_age_num_blocks.high >>> 0).toNumber() : message.max_age_num_blocks;
                if (message.max_age_duration != null && message.hasOwnProperty("max_age_duration"))
                    object.max_age_duration = $root.google.protobuf.Duration.toObject(message.max_age_duration, options);
                if (message.max_num != null && message.hasOwnProperty("max_num"))
                    object.max_num = message.max_num;
                if (message.proof_trial_period != null && message.hasOwnProperty("proof_trial_period"))
                    if (typeof message.proof_trial_period === "number")
                        object.proof_trial_period = options.longs === String ? String(message.proof_trial_period) : message.proof_trial_period;
                    else
                        object.proof_trial_period = options.longs === String ? $util.Long.prototype.toString.call(message.proof_trial_period) : options.longs === Number ? new $util.LongBits(message.proof_trial_period.low >>> 0, message.proof_trial_period.high >>> 0).toNumber() : message.proof_trial_period;
                return object;
            };

            /**
             * Converts this EvidenceParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.EvidenceParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EvidenceParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EvidenceParams;
        })();

        types.ValidatorParams = (function() {

            /**
             * Properties of a ValidatorParams.
             * @memberof tendermint.types
             * @interface IValidatorParams
             * @property {Array.<string>|null} [pub_key_types] ValidatorParams pub_key_types
             */

            /**
             * Constructs a new ValidatorParams.
             * @memberof tendermint.types
             * @classdesc Represents a ValidatorParams.
             * @implements IValidatorParams
             * @constructor
             * @param {tendermint.types.IValidatorParams=} [properties] Properties to set
             */
            function ValidatorParams(properties) {
                this.pub_key_types = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValidatorParams pub_key_types.
             * @member {Array.<string>} pub_key_types
             * @memberof tendermint.types.ValidatorParams
             * @instance
             */
            ValidatorParams.prototype.pub_key_types = $util.emptyArray;

            /**
             * Encodes the specified ValidatorParams message. Does not implicitly {@link tendermint.types.ValidatorParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {tendermint.types.IValidatorParams} message ValidatorParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key_types != null && message.pub_key_types.length)
                    for (let i = 0; i < message.pub_key_types.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.pub_key_types[i]);
                return writer;
            };

            /**
             * Encodes the specified ValidatorParams message, length delimited. Does not implicitly {@link tendermint.types.ValidatorParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {tendermint.types.IValidatorParams} message ValidatorParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValidatorParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ValidatorParams} ValidatorParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ValidatorParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.pub_key_types && message.pub_key_types.length))
                            message.pub_key_types = [];
                        message.pub_key_types.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValidatorParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ValidatorParams} ValidatorParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValidatorParams message.
             * @function verify
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValidatorParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key_types != null && message.hasOwnProperty("pub_key_types")) {
                    if (!Array.isArray(message.pub_key_types))
                        return "pub_key_types: array expected";
                    for (let i = 0; i < message.pub_key_types.length; ++i)
                        if (!$util.isString(message.pub_key_types[i]))
                            return "pub_key_types: string[] expected";
                }
                return null;
            };

            /**
             * Creates a ValidatorParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ValidatorParams} ValidatorParams
             */
            ValidatorParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ValidatorParams)
                    return object;
                let message = new $root.tendermint.types.ValidatorParams();
                if (object.pub_key_types) {
                    if (!Array.isArray(object.pub_key_types))
                        throw TypeError(".tendermint.types.ValidatorParams.pub_key_types: array expected");
                    message.pub_key_types = [];
                    for (let i = 0; i < object.pub_key_types.length; ++i)
                        message.pub_key_types[i] = String(object.pub_key_types[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a ValidatorParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ValidatorParams
             * @static
             * @param {tendermint.types.ValidatorParams} message ValidatorParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValidatorParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.pub_key_types = [];
                if (message.pub_key_types && message.pub_key_types.length) {
                    object.pub_key_types = [];
                    for (let j = 0; j < message.pub_key_types.length; ++j)
                        object.pub_key_types[j] = message.pub_key_types[j];
                }
                return object;
            };

            /**
             * Converts this ValidatorParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.ValidatorParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValidatorParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValidatorParams;
        })();

        types.VersionParams = (function() {

            /**
             * Properties of a VersionParams.
             * @memberof tendermint.types
             * @interface IVersionParams
             * @property {number|null} [app_version] VersionParams app_version
             */

            /**
             * Constructs a new VersionParams.
             * @memberof tendermint.types
             * @classdesc Represents a VersionParams.
             * @implements IVersionParams
             * @constructor
             * @param {tendermint.types.IVersionParams=} [properties] Properties to set
             */
            function VersionParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VersionParams app_version.
             * @member {number} app_version
             * @memberof tendermint.types.VersionParams
             * @instance
             */
            VersionParams.prototype.app_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified VersionParams message. Does not implicitly {@link tendermint.types.VersionParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {tendermint.types.IVersionParams} message VersionParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VersionParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.app_version != null && Object.hasOwnProperty.call(message, "app_version"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.app_version);
                return writer;
            };

            /**
             * Encodes the specified VersionParams message, length delimited. Does not implicitly {@link tendermint.types.VersionParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {tendermint.types.IVersionParams} message VersionParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VersionParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VersionParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.VersionParams} VersionParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VersionParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.VersionParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.app_version = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VersionParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.VersionParams} VersionParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VersionParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VersionParams message.
             * @function verify
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VersionParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.app_version != null && message.hasOwnProperty("app_version"))
                    if (!$util.isInteger(message.app_version) && !(message.app_version && $util.isInteger(message.app_version.low) && $util.isInteger(message.app_version.high)))
                        return "app_version: integer|Long expected";
                return null;
            };

            /**
             * Creates a VersionParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.VersionParams} VersionParams
             */
            VersionParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.VersionParams)
                    return object;
                let message = new $root.tendermint.types.VersionParams();
                if (object.app_version != null)
                    if ($util.Long)
                        (message.app_version = $util.Long.fromValue(object.app_version)).unsigned = true;
                    else if (typeof object.app_version === "string")
                        message.app_version = parseInt(object.app_version, 10);
                    else if (typeof object.app_version === "number")
                        message.app_version = object.app_version;
                    else if (typeof object.app_version === "object")
                        message.app_version = new $util.LongBits(object.app_version.low >>> 0, object.app_version.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a VersionParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.VersionParams
             * @static
             * @param {tendermint.types.VersionParams} message VersionParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VersionParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.app_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.app_version = options.longs === String ? "0" : 0;
                if (message.app_version != null && message.hasOwnProperty("app_version"))
                    if (typeof message.app_version === "number")
                        object.app_version = options.longs === String ? String(message.app_version) : message.app_version;
                    else
                        object.app_version = options.longs === String ? $util.Long.prototype.toString.call(message.app_version) : options.longs === Number ? new $util.LongBits(message.app_version.low >>> 0, message.app_version.high >>> 0).toNumber(true) : message.app_version;
                return object;
            };

            /**
             * Converts this VersionParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.VersionParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VersionParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VersionParams;
        })();

        types.HashedParams = (function() {

            /**
             * Properties of a HashedParams.
             * @memberof tendermint.types
             * @interface IHashedParams
             * @property {number|null} [block_max_bytes] HashedParams block_max_bytes
             * @property {number|null} [block_max_gas] HashedParams block_max_gas
             */

            /**
             * Constructs a new HashedParams.
             * @memberof tendermint.types
             * @classdesc Represents a HashedParams.
             * @implements IHashedParams
             * @constructor
             * @param {tendermint.types.IHashedParams=} [properties] Properties to set
             */
            function HashedParams(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HashedParams block_max_bytes.
             * @member {number} block_max_bytes
             * @memberof tendermint.types.HashedParams
             * @instance
             */
            HashedParams.prototype.block_max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * HashedParams block_max_gas.
             * @member {number} block_max_gas
             * @memberof tendermint.types.HashedParams
             * @instance
             */
            HashedParams.prototype.block_max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified HashedParams message. Does not implicitly {@link tendermint.types.HashedParams.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {tendermint.types.IHashedParams} message HashedParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HashedParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_max_bytes != null && Object.hasOwnProperty.call(message, "block_max_bytes"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.block_max_bytes);
                if (message.block_max_gas != null && Object.hasOwnProperty.call(message, "block_max_gas"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.block_max_gas);
                return writer;
            };

            /**
             * Encodes the specified HashedParams message, length delimited. Does not implicitly {@link tendermint.types.HashedParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {tendermint.types.IHashedParams} message HashedParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HashedParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HashedParams message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.HashedParams} HashedParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HashedParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.HashedParams();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_max_bytes = reader.int64();
                        break;
                    case 2:
                        message.block_max_gas = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HashedParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.HashedParams} HashedParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HashedParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HashedParams message.
             * @function verify
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HashedParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block_max_bytes != null && message.hasOwnProperty("block_max_bytes"))
                    if (!$util.isInteger(message.block_max_bytes) && !(message.block_max_bytes && $util.isInteger(message.block_max_bytes.low) && $util.isInteger(message.block_max_bytes.high)))
                        return "block_max_bytes: integer|Long expected";
                if (message.block_max_gas != null && message.hasOwnProperty("block_max_gas"))
                    if (!$util.isInteger(message.block_max_gas) && !(message.block_max_gas && $util.isInteger(message.block_max_gas.low) && $util.isInteger(message.block_max_gas.high)))
                        return "block_max_gas: integer|Long expected";
                return null;
            };

            /**
             * Creates a HashedParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.HashedParams} HashedParams
             */
            HashedParams.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.HashedParams)
                    return object;
                let message = new $root.tendermint.types.HashedParams();
                if (object.block_max_bytes != null)
                    if ($util.Long)
                        (message.block_max_bytes = $util.Long.fromValue(object.block_max_bytes)).unsigned = false;
                    else if (typeof object.block_max_bytes === "string")
                        message.block_max_bytes = parseInt(object.block_max_bytes, 10);
                    else if (typeof object.block_max_bytes === "number")
                        message.block_max_bytes = object.block_max_bytes;
                    else if (typeof object.block_max_bytes === "object")
                        message.block_max_bytes = new $util.LongBits(object.block_max_bytes.low >>> 0, object.block_max_bytes.high >>> 0).toNumber();
                if (object.block_max_gas != null)
                    if ($util.Long)
                        (message.block_max_gas = $util.Long.fromValue(object.block_max_gas)).unsigned = false;
                    else if (typeof object.block_max_gas === "string")
                        message.block_max_gas = parseInt(object.block_max_gas, 10);
                    else if (typeof object.block_max_gas === "number")
                        message.block_max_gas = object.block_max_gas;
                    else if (typeof object.block_max_gas === "object")
                        message.block_max_gas = new $util.LongBits(object.block_max_gas.low >>> 0, object.block_max_gas.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a HashedParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.HashedParams
             * @static
             * @param {tendermint.types.HashedParams} message HashedParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HashedParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.block_max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_max_bytes = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.block_max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_max_gas = options.longs === String ? "0" : 0;
                }
                if (message.block_max_bytes != null && message.hasOwnProperty("block_max_bytes"))
                    if (typeof message.block_max_bytes === "number")
                        object.block_max_bytes = options.longs === String ? String(message.block_max_bytes) : message.block_max_bytes;
                    else
                        object.block_max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.block_max_bytes) : options.longs === Number ? new $util.LongBits(message.block_max_bytes.low >>> 0, message.block_max_bytes.high >>> 0).toNumber() : message.block_max_bytes;
                if (message.block_max_gas != null && message.hasOwnProperty("block_max_gas"))
                    if (typeof message.block_max_gas === "number")
                        object.block_max_gas = options.longs === String ? String(message.block_max_gas) : message.block_max_gas;
                    else
                        object.block_max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.block_max_gas) : options.longs === Number ? new $util.LongBits(message.block_max_gas.low >>> 0, message.block_max_gas.high >>> 0).toNumber() : message.block_max_gas;
                return object;
            };

            /**
             * Converts this HashedParams to JSON.
             * @function toJSON
             * @memberof tendermint.types.HashedParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HashedParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HashedParams;
        })();

        types.DuplicateVoteEvidence = (function() {

            /**
             * Properties of a DuplicateVoteEvidence.
             * @memberof tendermint.types
             * @interface IDuplicateVoteEvidence
             * @property {tendermint.types.IVote|null} [vote_a] DuplicateVoteEvidence vote_a
             * @property {tendermint.types.IVote|null} [vote_b] DuplicateVoteEvidence vote_b
             * @property {google.protobuf.ITimestamp|null} [timestamp] DuplicateVoteEvidence timestamp
             */

            /**
             * Constructs a new DuplicateVoteEvidence.
             * @memberof tendermint.types
             * @classdesc Represents a DuplicateVoteEvidence.
             * @implements IDuplicateVoteEvidence
             * @constructor
             * @param {tendermint.types.IDuplicateVoteEvidence=} [properties] Properties to set
             */
            function DuplicateVoteEvidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DuplicateVoteEvidence vote_a.
             * @member {tendermint.types.IVote|null|undefined} vote_a
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.vote_a = null;

            /**
             * DuplicateVoteEvidence vote_b.
             * @member {tendermint.types.IVote|null|undefined} vote_b
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.vote_b = null;

            /**
             * DuplicateVoteEvidence timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             */
            DuplicateVoteEvidence.prototype.timestamp = null;

            /**
             * Encodes the specified DuplicateVoteEvidence message. Does not implicitly {@link tendermint.types.DuplicateVoteEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {tendermint.types.IDuplicateVoteEvidence} message DuplicateVoteEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DuplicateVoteEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.vote_a != null && Object.hasOwnProperty.call(message, "vote_a"))
                    $root.tendermint.types.Vote.encode(message.vote_a, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.vote_b != null && Object.hasOwnProperty.call(message, "vote_b"))
                    $root.tendermint.types.Vote.encode(message.vote_b, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DuplicateVoteEvidence message, length delimited. Does not implicitly {@link tendermint.types.DuplicateVoteEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {tendermint.types.IDuplicateVoteEvidence} message DuplicateVoteEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DuplicateVoteEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DuplicateVoteEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.DuplicateVoteEvidence} DuplicateVoteEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DuplicateVoteEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.DuplicateVoteEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.vote_a = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.vote_b = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DuplicateVoteEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.DuplicateVoteEvidence} DuplicateVoteEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DuplicateVoteEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DuplicateVoteEvidence message.
             * @function verify
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DuplicateVoteEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.vote_a != null && message.hasOwnProperty("vote_a")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote_a);
                    if (error)
                        return "vote_a." + error;
                }
                if (message.vote_b != null && message.hasOwnProperty("vote_b")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote_b);
                    if (error)
                        return "vote_b." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                return null;
            };

            /**
             * Creates a DuplicateVoteEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.DuplicateVoteEvidence} DuplicateVoteEvidence
             */
            DuplicateVoteEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.DuplicateVoteEvidence)
                    return object;
                let message = new $root.tendermint.types.DuplicateVoteEvidence();
                if (object.vote_a != null) {
                    if (typeof object.vote_a !== "object")
                        throw TypeError(".tendermint.types.DuplicateVoteEvidence.vote_a: object expected");
                    message.vote_a = $root.tendermint.types.Vote.fromObject(object.vote_a);
                }
                if (object.vote_b != null) {
                    if (typeof object.vote_b !== "object")
                        throw TypeError(".tendermint.types.DuplicateVoteEvidence.vote_b: object expected");
                    message.vote_b = $root.tendermint.types.Vote.fromObject(object.vote_b);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.DuplicateVoteEvidence.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                return message;
            };

            /**
             * Creates a plain object from a DuplicateVoteEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @static
             * @param {tendermint.types.DuplicateVoteEvidence} message DuplicateVoteEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DuplicateVoteEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.vote_a = null;
                    object.vote_b = null;
                    object.timestamp = null;
                }
                if (message.vote_a != null && message.hasOwnProperty("vote_a"))
                    object.vote_a = $root.tendermint.types.Vote.toObject(message.vote_a, options);
                if (message.vote_b != null && message.hasOwnProperty("vote_b"))
                    object.vote_b = $root.tendermint.types.Vote.toObject(message.vote_b, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                return object;
            };

            /**
             * Converts this DuplicateVoteEvidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.DuplicateVoteEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DuplicateVoteEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DuplicateVoteEvidence;
        })();

        types.PotentialAmnesiaEvidence = (function() {

            /**
             * Properties of a PotentialAmnesiaEvidence.
             * @memberof tendermint.types
             * @interface IPotentialAmnesiaEvidence
             * @property {tendermint.types.IVote|null} [vote_a] PotentialAmnesiaEvidence vote_a
             * @property {tendermint.types.IVote|null} [vote_b] PotentialAmnesiaEvidence vote_b
             * @property {number|null} [height_stamp] PotentialAmnesiaEvidence height_stamp
             * @property {google.protobuf.ITimestamp|null} [timestamp] PotentialAmnesiaEvidence timestamp
             */

            /**
             * Constructs a new PotentialAmnesiaEvidence.
             * @memberof tendermint.types
             * @classdesc Represents a PotentialAmnesiaEvidence.
             * @implements IPotentialAmnesiaEvidence
             * @constructor
             * @param {tendermint.types.IPotentialAmnesiaEvidence=} [properties] Properties to set
             */
            function PotentialAmnesiaEvidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PotentialAmnesiaEvidence vote_a.
             * @member {tendermint.types.IVote|null|undefined} vote_a
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @instance
             */
            PotentialAmnesiaEvidence.prototype.vote_a = null;

            /**
             * PotentialAmnesiaEvidence vote_b.
             * @member {tendermint.types.IVote|null|undefined} vote_b
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @instance
             */
            PotentialAmnesiaEvidence.prototype.vote_b = null;

            /**
             * PotentialAmnesiaEvidence height_stamp.
             * @member {number} height_stamp
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @instance
             */
            PotentialAmnesiaEvidence.prototype.height_stamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PotentialAmnesiaEvidence timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @instance
             */
            PotentialAmnesiaEvidence.prototype.timestamp = null;

            /**
             * Encodes the specified PotentialAmnesiaEvidence message. Does not implicitly {@link tendermint.types.PotentialAmnesiaEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @static
             * @param {tendermint.types.IPotentialAmnesiaEvidence} message PotentialAmnesiaEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PotentialAmnesiaEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.vote_a != null && Object.hasOwnProperty.call(message, "vote_a"))
                    $root.tendermint.types.Vote.encode(message.vote_a, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.vote_b != null && Object.hasOwnProperty.call(message, "vote_b"))
                    $root.tendermint.types.Vote.encode(message.vote_b, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.height_stamp != null && Object.hasOwnProperty.call(message, "height_stamp"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height_stamp);
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PotentialAmnesiaEvidence message, length delimited. Does not implicitly {@link tendermint.types.PotentialAmnesiaEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @static
             * @param {tendermint.types.IPotentialAmnesiaEvidence} message PotentialAmnesiaEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PotentialAmnesiaEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PotentialAmnesiaEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.PotentialAmnesiaEvidence} PotentialAmnesiaEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PotentialAmnesiaEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.PotentialAmnesiaEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.vote_a = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.vote_b = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.height_stamp = reader.int64();
                        break;
                    case 4:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PotentialAmnesiaEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.PotentialAmnesiaEvidence} PotentialAmnesiaEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PotentialAmnesiaEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PotentialAmnesiaEvidence message.
             * @function verify
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PotentialAmnesiaEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.vote_a != null && message.hasOwnProperty("vote_a")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote_a);
                    if (error)
                        return "vote_a." + error;
                }
                if (message.vote_b != null && message.hasOwnProperty("vote_b")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote_b);
                    if (error)
                        return "vote_b." + error;
                }
                if (message.height_stamp != null && message.hasOwnProperty("height_stamp"))
                    if (!$util.isInteger(message.height_stamp) && !(message.height_stamp && $util.isInteger(message.height_stamp.low) && $util.isInteger(message.height_stamp.high)))
                        return "height_stamp: integer|Long expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                return null;
            };

            /**
             * Creates a PotentialAmnesiaEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.PotentialAmnesiaEvidence} PotentialAmnesiaEvidence
             */
            PotentialAmnesiaEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.PotentialAmnesiaEvidence)
                    return object;
                let message = new $root.tendermint.types.PotentialAmnesiaEvidence();
                if (object.vote_a != null) {
                    if (typeof object.vote_a !== "object")
                        throw TypeError(".tendermint.types.PotentialAmnesiaEvidence.vote_a: object expected");
                    message.vote_a = $root.tendermint.types.Vote.fromObject(object.vote_a);
                }
                if (object.vote_b != null) {
                    if (typeof object.vote_b !== "object")
                        throw TypeError(".tendermint.types.PotentialAmnesiaEvidence.vote_b: object expected");
                    message.vote_b = $root.tendermint.types.Vote.fromObject(object.vote_b);
                }
                if (object.height_stamp != null)
                    if ($util.Long)
                        (message.height_stamp = $util.Long.fromValue(object.height_stamp)).unsigned = false;
                    else if (typeof object.height_stamp === "string")
                        message.height_stamp = parseInt(object.height_stamp, 10);
                    else if (typeof object.height_stamp === "number")
                        message.height_stamp = object.height_stamp;
                    else if (typeof object.height_stamp === "object")
                        message.height_stamp = new $util.LongBits(object.height_stamp.low >>> 0, object.height_stamp.high >>> 0).toNumber();
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.PotentialAmnesiaEvidence.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                return message;
            };

            /**
             * Creates a plain object from a PotentialAmnesiaEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @static
             * @param {tendermint.types.PotentialAmnesiaEvidence} message PotentialAmnesiaEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PotentialAmnesiaEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.vote_a = null;
                    object.vote_b = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height_stamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height_stamp = options.longs === String ? "0" : 0;
                    object.timestamp = null;
                }
                if (message.vote_a != null && message.hasOwnProperty("vote_a"))
                    object.vote_a = $root.tendermint.types.Vote.toObject(message.vote_a, options);
                if (message.vote_b != null && message.hasOwnProperty("vote_b"))
                    object.vote_b = $root.tendermint.types.Vote.toObject(message.vote_b, options);
                if (message.height_stamp != null && message.hasOwnProperty("height_stamp"))
                    if (typeof message.height_stamp === "number")
                        object.height_stamp = options.longs === String ? String(message.height_stamp) : message.height_stamp;
                    else
                        object.height_stamp = options.longs === String ? $util.Long.prototype.toString.call(message.height_stamp) : options.longs === Number ? new $util.LongBits(message.height_stamp.low >>> 0, message.height_stamp.high >>> 0).toNumber() : message.height_stamp;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                return object;
            };

            /**
             * Converts this PotentialAmnesiaEvidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.PotentialAmnesiaEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PotentialAmnesiaEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PotentialAmnesiaEvidence;
        })();

        types.AmnesiaEvidence = (function() {

            /**
             * Properties of an AmnesiaEvidence.
             * @memberof tendermint.types
             * @interface IAmnesiaEvidence
             * @property {tendermint.types.IPotentialAmnesiaEvidence|null} [potential_amnesia_evidence] AmnesiaEvidence potential_amnesia_evidence
             * @property {tendermint.types.IProofOfLockChange|null} [polc] AmnesiaEvidence polc
             */

            /**
             * Constructs a new AmnesiaEvidence.
             * @memberof tendermint.types
             * @classdesc Represents an AmnesiaEvidence.
             * @implements IAmnesiaEvidence
             * @constructor
             * @param {tendermint.types.IAmnesiaEvidence=} [properties] Properties to set
             */
            function AmnesiaEvidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AmnesiaEvidence potential_amnesia_evidence.
             * @member {tendermint.types.IPotentialAmnesiaEvidence|null|undefined} potential_amnesia_evidence
             * @memberof tendermint.types.AmnesiaEvidence
             * @instance
             */
            AmnesiaEvidence.prototype.potential_amnesia_evidence = null;

            /**
             * AmnesiaEvidence polc.
             * @member {tendermint.types.IProofOfLockChange|null|undefined} polc
             * @memberof tendermint.types.AmnesiaEvidence
             * @instance
             */
            AmnesiaEvidence.prototype.polc = null;

            /**
             * Encodes the specified AmnesiaEvidence message. Does not implicitly {@link tendermint.types.AmnesiaEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.AmnesiaEvidence
             * @static
             * @param {tendermint.types.IAmnesiaEvidence} message AmnesiaEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AmnesiaEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.potential_amnesia_evidence != null && Object.hasOwnProperty.call(message, "potential_amnesia_evidence"))
                    $root.tendermint.types.PotentialAmnesiaEvidence.encode(message.potential_amnesia_evidence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.polc != null && Object.hasOwnProperty.call(message, "polc"))
                    $root.tendermint.types.ProofOfLockChange.encode(message.polc, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AmnesiaEvidence message, length delimited. Does not implicitly {@link tendermint.types.AmnesiaEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.AmnesiaEvidence
             * @static
             * @param {tendermint.types.IAmnesiaEvidence} message AmnesiaEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AmnesiaEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AmnesiaEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.AmnesiaEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.AmnesiaEvidence} AmnesiaEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AmnesiaEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.AmnesiaEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.potential_amnesia_evidence = $root.tendermint.types.PotentialAmnesiaEvidence.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.polc = $root.tendermint.types.ProofOfLockChange.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AmnesiaEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.AmnesiaEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.AmnesiaEvidence} AmnesiaEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AmnesiaEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AmnesiaEvidence message.
             * @function verify
             * @memberof tendermint.types.AmnesiaEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AmnesiaEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.potential_amnesia_evidence != null && message.hasOwnProperty("potential_amnesia_evidence")) {
                    let error = $root.tendermint.types.PotentialAmnesiaEvidence.verify(message.potential_amnesia_evidence);
                    if (error)
                        return "potential_amnesia_evidence." + error;
                }
                if (message.polc != null && message.hasOwnProperty("polc")) {
                    let error = $root.tendermint.types.ProofOfLockChange.verify(message.polc);
                    if (error)
                        return "polc." + error;
                }
                return null;
            };

            /**
             * Creates an AmnesiaEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.AmnesiaEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.AmnesiaEvidence} AmnesiaEvidence
             */
            AmnesiaEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.AmnesiaEvidence)
                    return object;
                let message = new $root.tendermint.types.AmnesiaEvidence();
                if (object.potential_amnesia_evidence != null) {
                    if (typeof object.potential_amnesia_evidence !== "object")
                        throw TypeError(".tendermint.types.AmnesiaEvidence.potential_amnesia_evidence: object expected");
                    message.potential_amnesia_evidence = $root.tendermint.types.PotentialAmnesiaEvidence.fromObject(object.potential_amnesia_evidence);
                }
                if (object.polc != null) {
                    if (typeof object.polc !== "object")
                        throw TypeError(".tendermint.types.AmnesiaEvidence.polc: object expected");
                    message.polc = $root.tendermint.types.ProofOfLockChange.fromObject(object.polc);
                }
                return message;
            };

            /**
             * Creates a plain object from an AmnesiaEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.AmnesiaEvidence
             * @static
             * @param {tendermint.types.AmnesiaEvidence} message AmnesiaEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AmnesiaEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.potential_amnesia_evidence = null;
                    object.polc = null;
                }
                if (message.potential_amnesia_evidence != null && message.hasOwnProperty("potential_amnesia_evidence"))
                    object.potential_amnesia_evidence = $root.tendermint.types.PotentialAmnesiaEvidence.toObject(message.potential_amnesia_evidence, options);
                if (message.polc != null && message.hasOwnProperty("polc"))
                    object.polc = $root.tendermint.types.ProofOfLockChange.toObject(message.polc, options);
                return object;
            };

            /**
             * Converts this AmnesiaEvidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.AmnesiaEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AmnesiaEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AmnesiaEvidence;
        })();

        types.ConflictingHeadersEvidence = (function() {

            /**
             * Properties of a ConflictingHeadersEvidence.
             * @memberof tendermint.types
             * @interface IConflictingHeadersEvidence
             * @property {tendermint.types.ISignedHeader|null} [h1] ConflictingHeadersEvidence h1
             * @property {tendermint.types.ISignedHeader|null} [h2] ConflictingHeadersEvidence h2
             */

            /**
             * Constructs a new ConflictingHeadersEvidence.
             * @memberof tendermint.types
             * @classdesc Represents a ConflictingHeadersEvidence.
             * @implements IConflictingHeadersEvidence
             * @constructor
             * @param {tendermint.types.IConflictingHeadersEvidence=} [properties] Properties to set
             */
            function ConflictingHeadersEvidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConflictingHeadersEvidence h1.
             * @member {tendermint.types.ISignedHeader|null|undefined} h1
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @instance
             */
            ConflictingHeadersEvidence.prototype.h1 = null;

            /**
             * ConflictingHeadersEvidence h2.
             * @member {tendermint.types.ISignedHeader|null|undefined} h2
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @instance
             */
            ConflictingHeadersEvidence.prototype.h2 = null;

            /**
             * Encodes the specified ConflictingHeadersEvidence message. Does not implicitly {@link tendermint.types.ConflictingHeadersEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @static
             * @param {tendermint.types.IConflictingHeadersEvidence} message ConflictingHeadersEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConflictingHeadersEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.h1 != null && Object.hasOwnProperty.call(message, "h1"))
                    $root.tendermint.types.SignedHeader.encode(message.h1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.h2 != null && Object.hasOwnProperty.call(message, "h2"))
                    $root.tendermint.types.SignedHeader.encode(message.h2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConflictingHeadersEvidence message, length delimited. Does not implicitly {@link tendermint.types.ConflictingHeadersEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @static
             * @param {tendermint.types.IConflictingHeadersEvidence} message ConflictingHeadersEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConflictingHeadersEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConflictingHeadersEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ConflictingHeadersEvidence} ConflictingHeadersEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConflictingHeadersEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ConflictingHeadersEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.h1 = $root.tendermint.types.SignedHeader.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.h2 = $root.tendermint.types.SignedHeader.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConflictingHeadersEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ConflictingHeadersEvidence} ConflictingHeadersEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConflictingHeadersEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConflictingHeadersEvidence message.
             * @function verify
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConflictingHeadersEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.h1 != null && message.hasOwnProperty("h1")) {
                    let error = $root.tendermint.types.SignedHeader.verify(message.h1);
                    if (error)
                        return "h1." + error;
                }
                if (message.h2 != null && message.hasOwnProperty("h2")) {
                    let error = $root.tendermint.types.SignedHeader.verify(message.h2);
                    if (error)
                        return "h2." + error;
                }
                return null;
            };

            /**
             * Creates a ConflictingHeadersEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ConflictingHeadersEvidence} ConflictingHeadersEvidence
             */
            ConflictingHeadersEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ConflictingHeadersEvidence)
                    return object;
                let message = new $root.tendermint.types.ConflictingHeadersEvidence();
                if (object.h1 != null) {
                    if (typeof object.h1 !== "object")
                        throw TypeError(".tendermint.types.ConflictingHeadersEvidence.h1: object expected");
                    message.h1 = $root.tendermint.types.SignedHeader.fromObject(object.h1);
                }
                if (object.h2 != null) {
                    if (typeof object.h2 !== "object")
                        throw TypeError(".tendermint.types.ConflictingHeadersEvidence.h2: object expected");
                    message.h2 = $root.tendermint.types.SignedHeader.fromObject(object.h2);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConflictingHeadersEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @static
             * @param {tendermint.types.ConflictingHeadersEvidence} message ConflictingHeadersEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConflictingHeadersEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.h1 = null;
                    object.h2 = null;
                }
                if (message.h1 != null && message.hasOwnProperty("h1"))
                    object.h1 = $root.tendermint.types.SignedHeader.toObject(message.h1, options);
                if (message.h2 != null && message.hasOwnProperty("h2"))
                    object.h2 = $root.tendermint.types.SignedHeader.toObject(message.h2, options);
                return object;
            };

            /**
             * Converts this ConflictingHeadersEvidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.ConflictingHeadersEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConflictingHeadersEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConflictingHeadersEvidence;
        })();

        types.LunaticValidatorEvidence = (function() {

            /**
             * Properties of a LunaticValidatorEvidence.
             * @memberof tendermint.types
             * @interface ILunaticValidatorEvidence
             * @property {tendermint.types.IHeader|null} [header] LunaticValidatorEvidence header
             * @property {tendermint.types.IVote|null} [vote] LunaticValidatorEvidence vote
             * @property {string|null} [invalid_header_field] LunaticValidatorEvidence invalid_header_field
             * @property {google.protobuf.ITimestamp|null} [timestamp] LunaticValidatorEvidence timestamp
             */

            /**
             * Constructs a new LunaticValidatorEvidence.
             * @memberof tendermint.types
             * @classdesc Represents a LunaticValidatorEvidence.
             * @implements ILunaticValidatorEvidence
             * @constructor
             * @param {tendermint.types.ILunaticValidatorEvidence=} [properties] Properties to set
             */
            function LunaticValidatorEvidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LunaticValidatorEvidence header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @instance
             */
            LunaticValidatorEvidence.prototype.header = null;

            /**
             * LunaticValidatorEvidence vote.
             * @member {tendermint.types.IVote|null|undefined} vote
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @instance
             */
            LunaticValidatorEvidence.prototype.vote = null;

            /**
             * LunaticValidatorEvidence invalid_header_field.
             * @member {string} invalid_header_field
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @instance
             */
            LunaticValidatorEvidence.prototype.invalid_header_field = "";

            /**
             * LunaticValidatorEvidence timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @instance
             */
            LunaticValidatorEvidence.prototype.timestamp = null;

            /**
             * Encodes the specified LunaticValidatorEvidence message. Does not implicitly {@link tendermint.types.LunaticValidatorEvidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @static
             * @param {tendermint.types.ILunaticValidatorEvidence} message LunaticValidatorEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LunaticValidatorEvidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.vote != null && Object.hasOwnProperty.call(message, "vote"))
                    $root.tendermint.types.Vote.encode(message.vote, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.invalid_header_field != null && Object.hasOwnProperty.call(message, "invalid_header_field"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.invalid_header_field);
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LunaticValidatorEvidence message, length delimited. Does not implicitly {@link tendermint.types.LunaticValidatorEvidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @static
             * @param {tendermint.types.ILunaticValidatorEvidence} message LunaticValidatorEvidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LunaticValidatorEvidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LunaticValidatorEvidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.LunaticValidatorEvidence} LunaticValidatorEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LunaticValidatorEvidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.LunaticValidatorEvidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.vote = $root.tendermint.types.Vote.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.invalid_header_field = reader.string();
                        break;
                    case 4:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LunaticValidatorEvidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.LunaticValidatorEvidence} LunaticValidatorEvidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LunaticValidatorEvidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LunaticValidatorEvidence message.
             * @function verify
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LunaticValidatorEvidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    let error = $root.tendermint.types.Vote.verify(message.vote);
                    if (error)
                        return "vote." + error;
                }
                if (message.invalid_header_field != null && message.hasOwnProperty("invalid_header_field"))
                    if (!$util.isString(message.invalid_header_field))
                        return "invalid_header_field: string expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                return null;
            };

            /**
             * Creates a LunaticValidatorEvidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.LunaticValidatorEvidence} LunaticValidatorEvidence
             */
            LunaticValidatorEvidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.LunaticValidatorEvidence)
                    return object;
                let message = new $root.tendermint.types.LunaticValidatorEvidence();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.types.LunaticValidatorEvidence.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.vote != null) {
                    if (typeof object.vote !== "object")
                        throw TypeError(".tendermint.types.LunaticValidatorEvidence.vote: object expected");
                    message.vote = $root.tendermint.types.Vote.fromObject(object.vote);
                }
                if (object.invalid_header_field != null)
                    message.invalid_header_field = String(object.invalid_header_field);
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.LunaticValidatorEvidence.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                return message;
            };

            /**
             * Creates a plain object from a LunaticValidatorEvidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @static
             * @param {tendermint.types.LunaticValidatorEvidence} message LunaticValidatorEvidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LunaticValidatorEvidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.header = null;
                    object.vote = null;
                    object.invalid_header_field = "";
                    object.timestamp = null;
                }
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.vote != null && message.hasOwnProperty("vote"))
                    object.vote = $root.tendermint.types.Vote.toObject(message.vote, options);
                if (message.invalid_header_field != null && message.hasOwnProperty("invalid_header_field"))
                    object.invalid_header_field = message.invalid_header_field;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                return object;
            };

            /**
             * Converts this LunaticValidatorEvidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.LunaticValidatorEvidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LunaticValidatorEvidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LunaticValidatorEvidence;
        })();

        types.Evidence = (function() {

            /**
             * Properties of an Evidence.
             * @memberof tendermint.types
             * @interface IEvidence
             * @property {tendermint.types.IDuplicateVoteEvidence|null} [duplicate_vote_evidence] Evidence duplicate_vote_evidence
             * @property {tendermint.types.IConflictingHeadersEvidence|null} [conflicting_headers_evidence] Evidence conflicting_headers_evidence
             * @property {tendermint.types.ILunaticValidatorEvidence|null} [lunatic_validator_evidence] Evidence lunatic_validator_evidence
             * @property {tendermint.types.IPotentialAmnesiaEvidence|null} [potential_amnesia_evidence] Evidence potential_amnesia_evidence
             * @property {tendermint.types.IAmnesiaEvidence|null} [amnesia_evidence] Evidence amnesia_evidence
             */

            /**
             * Constructs a new Evidence.
             * @memberof tendermint.types
             * @classdesc Represents an Evidence.
             * @implements IEvidence
             * @constructor
             * @param {tendermint.types.IEvidence=} [properties] Properties to set
             */
            function Evidence(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Evidence duplicate_vote_evidence.
             * @member {tendermint.types.IDuplicateVoteEvidence|null|undefined} duplicate_vote_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.duplicate_vote_evidence = null;

            /**
             * Evidence conflicting_headers_evidence.
             * @member {tendermint.types.IConflictingHeadersEvidence|null|undefined} conflicting_headers_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.conflicting_headers_evidence = null;

            /**
             * Evidence lunatic_validator_evidence.
             * @member {tendermint.types.ILunaticValidatorEvidence|null|undefined} lunatic_validator_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.lunatic_validator_evidence = null;

            /**
             * Evidence potential_amnesia_evidence.
             * @member {tendermint.types.IPotentialAmnesiaEvidence|null|undefined} potential_amnesia_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.potential_amnesia_evidence = null;

            /**
             * Evidence amnesia_evidence.
             * @member {tendermint.types.IAmnesiaEvidence|null|undefined} amnesia_evidence
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Evidence.prototype.amnesia_evidence = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Evidence sum.
             * @member {"duplicate_vote_evidence"|"conflicting_headers_evidence"|"lunatic_validator_evidence"|"potential_amnesia_evidence"|"amnesia_evidence"|undefined} sum
             * @memberof tendermint.types.Evidence
             * @instance
             */
            Object.defineProperty(Evidence.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["duplicate_vote_evidence", "conflicting_headers_evidence", "lunatic_validator_evidence", "potential_amnesia_evidence", "amnesia_evidence"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified Evidence message. Does not implicitly {@link tendermint.types.Evidence.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Evidence
             * @static
             * @param {tendermint.types.IEvidence} message Evidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.duplicate_vote_evidence != null && Object.hasOwnProperty.call(message, "duplicate_vote_evidence"))
                    $root.tendermint.types.DuplicateVoteEvidence.encode(message.duplicate_vote_evidence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.conflicting_headers_evidence != null && Object.hasOwnProperty.call(message, "conflicting_headers_evidence"))
                    $root.tendermint.types.ConflictingHeadersEvidence.encode(message.conflicting_headers_evidence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.lunatic_validator_evidence != null && Object.hasOwnProperty.call(message, "lunatic_validator_evidence"))
                    $root.tendermint.types.LunaticValidatorEvidence.encode(message.lunatic_validator_evidence, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.potential_amnesia_evidence != null && Object.hasOwnProperty.call(message, "potential_amnesia_evidence"))
                    $root.tendermint.types.PotentialAmnesiaEvidence.encode(message.potential_amnesia_evidence, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.amnesia_evidence != null && Object.hasOwnProperty.call(message, "amnesia_evidence"))
                    $root.tendermint.types.AmnesiaEvidence.encode(message.amnesia_evidence, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Evidence message, length delimited. Does not implicitly {@link tendermint.types.Evidence.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Evidence
             * @static
             * @param {tendermint.types.IEvidence} message Evidence message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Evidence.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Evidence();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.duplicate_vote_evidence = $root.tendermint.types.DuplicateVoteEvidence.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.conflicting_headers_evidence = $root.tendermint.types.ConflictingHeadersEvidence.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.lunatic_validator_evidence = $root.tendermint.types.LunaticValidatorEvidence.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.potential_amnesia_evidence = $root.tendermint.types.PotentialAmnesiaEvidence.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.amnesia_evidence = $root.tendermint.types.AmnesiaEvidence.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Evidence message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Evidence
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Evidence} Evidence
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Evidence.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Evidence message.
             * @function verify
             * @memberof tendermint.types.Evidence
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Evidence.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.duplicate_vote_evidence != null && message.hasOwnProperty("duplicate_vote_evidence")) {
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.types.DuplicateVoteEvidence.verify(message.duplicate_vote_evidence);
                        if (error)
                            return "duplicate_vote_evidence." + error;
                    }
                }
                if (message.conflicting_headers_evidence != null && message.hasOwnProperty("conflicting_headers_evidence")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.types.ConflictingHeadersEvidence.verify(message.conflicting_headers_evidence);
                        if (error)
                            return "conflicting_headers_evidence." + error;
                    }
                }
                if (message.lunatic_validator_evidence != null && message.hasOwnProperty("lunatic_validator_evidence")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.types.LunaticValidatorEvidence.verify(message.lunatic_validator_evidence);
                        if (error)
                            return "lunatic_validator_evidence." + error;
                    }
                }
                if (message.potential_amnesia_evidence != null && message.hasOwnProperty("potential_amnesia_evidence")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.types.PotentialAmnesiaEvidence.verify(message.potential_amnesia_evidence);
                        if (error)
                            return "potential_amnesia_evidence." + error;
                    }
                }
                if (message.amnesia_evidence != null && message.hasOwnProperty("amnesia_evidence")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    {
                        let error = $root.tendermint.types.AmnesiaEvidence.verify(message.amnesia_evidence);
                        if (error)
                            return "amnesia_evidence." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an Evidence message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Evidence
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Evidence} Evidence
             */
            Evidence.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Evidence)
                    return object;
                let message = new $root.tendermint.types.Evidence();
                if (object.duplicate_vote_evidence != null) {
                    if (typeof object.duplicate_vote_evidence !== "object")
                        throw TypeError(".tendermint.types.Evidence.duplicate_vote_evidence: object expected");
                    message.duplicate_vote_evidence = $root.tendermint.types.DuplicateVoteEvidence.fromObject(object.duplicate_vote_evidence);
                }
                if (object.conflicting_headers_evidence != null) {
                    if (typeof object.conflicting_headers_evidence !== "object")
                        throw TypeError(".tendermint.types.Evidence.conflicting_headers_evidence: object expected");
                    message.conflicting_headers_evidence = $root.tendermint.types.ConflictingHeadersEvidence.fromObject(object.conflicting_headers_evidence);
                }
                if (object.lunatic_validator_evidence != null) {
                    if (typeof object.lunatic_validator_evidence !== "object")
                        throw TypeError(".tendermint.types.Evidence.lunatic_validator_evidence: object expected");
                    message.lunatic_validator_evidence = $root.tendermint.types.LunaticValidatorEvidence.fromObject(object.lunatic_validator_evidence);
                }
                if (object.potential_amnesia_evidence != null) {
                    if (typeof object.potential_amnesia_evidence !== "object")
                        throw TypeError(".tendermint.types.Evidence.potential_amnesia_evidence: object expected");
                    message.potential_amnesia_evidence = $root.tendermint.types.PotentialAmnesiaEvidence.fromObject(object.potential_amnesia_evidence);
                }
                if (object.amnesia_evidence != null) {
                    if (typeof object.amnesia_evidence !== "object")
                        throw TypeError(".tendermint.types.Evidence.amnesia_evidence: object expected");
                    message.amnesia_evidence = $root.tendermint.types.AmnesiaEvidence.fromObject(object.amnesia_evidence);
                }
                return message;
            };

            /**
             * Creates a plain object from an Evidence message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Evidence
             * @static
             * @param {tendermint.types.Evidence} message Evidence
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Evidence.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.duplicate_vote_evidence != null && message.hasOwnProperty("duplicate_vote_evidence")) {
                    object.duplicate_vote_evidence = $root.tendermint.types.DuplicateVoteEvidence.toObject(message.duplicate_vote_evidence, options);
                    if (options.oneofs)
                        object.sum = "duplicate_vote_evidence";
                }
                if (message.conflicting_headers_evidence != null && message.hasOwnProperty("conflicting_headers_evidence")) {
                    object.conflicting_headers_evidence = $root.tendermint.types.ConflictingHeadersEvidence.toObject(message.conflicting_headers_evidence, options);
                    if (options.oneofs)
                        object.sum = "conflicting_headers_evidence";
                }
                if (message.lunatic_validator_evidence != null && message.hasOwnProperty("lunatic_validator_evidence")) {
                    object.lunatic_validator_evidence = $root.tendermint.types.LunaticValidatorEvidence.toObject(message.lunatic_validator_evidence, options);
                    if (options.oneofs)
                        object.sum = "lunatic_validator_evidence";
                }
                if (message.potential_amnesia_evidence != null && message.hasOwnProperty("potential_amnesia_evidence")) {
                    object.potential_amnesia_evidence = $root.tendermint.types.PotentialAmnesiaEvidence.toObject(message.potential_amnesia_evidence, options);
                    if (options.oneofs)
                        object.sum = "potential_amnesia_evidence";
                }
                if (message.amnesia_evidence != null && message.hasOwnProperty("amnesia_evidence")) {
                    object.amnesia_evidence = $root.tendermint.types.AmnesiaEvidence.toObject(message.amnesia_evidence, options);
                    if (options.oneofs)
                        object.sum = "amnesia_evidence";
                }
                return object;
            };

            /**
             * Converts this Evidence to JSON.
             * @function toJSON
             * @memberof tendermint.types.Evidence
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Evidence.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Evidence;
        })();

        types.EvidenceData = (function() {

            /**
             * Properties of an EvidenceData.
             * @memberof tendermint.types
             * @interface IEvidenceData
             * @property {Array.<tendermint.types.IEvidence>|null} [evidence] EvidenceData evidence
             * @property {Uint8Array|null} [hash] EvidenceData hash
             */

            /**
             * Constructs a new EvidenceData.
             * @memberof tendermint.types
             * @classdesc Represents an EvidenceData.
             * @implements IEvidenceData
             * @constructor
             * @param {tendermint.types.IEvidenceData=} [properties] Properties to set
             */
            function EvidenceData(properties) {
                this.evidence = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EvidenceData evidence.
             * @member {Array.<tendermint.types.IEvidence>} evidence
             * @memberof tendermint.types.EvidenceData
             * @instance
             */
            EvidenceData.prototype.evidence = $util.emptyArray;

            /**
             * EvidenceData hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.EvidenceData
             * @instance
             */
            EvidenceData.prototype.hash = $util.newBuffer([]);

            /**
             * Encodes the specified EvidenceData message. Does not implicitly {@link tendermint.types.EvidenceData.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.EvidenceData
             * @static
             * @param {tendermint.types.IEvidenceData} message EvidenceData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.evidence != null && message.evidence.length)
                    for (let i = 0; i < message.evidence.length; ++i)
                        $root.tendermint.types.Evidence.encode(message.evidence[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified EvidenceData message, length delimited. Does not implicitly {@link tendermint.types.EvidenceData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.EvidenceData
             * @static
             * @param {tendermint.types.IEvidenceData} message EvidenceData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EvidenceData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EvidenceData message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.EvidenceData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.EvidenceData} EvidenceData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.EvidenceData();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.evidence && message.evidence.length))
                            message.evidence = [];
                        message.evidence.push($root.tendermint.types.Evidence.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EvidenceData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.EvidenceData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.EvidenceData} EvidenceData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EvidenceData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EvidenceData message.
             * @function verify
             * @memberof tendermint.types.EvidenceData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EvidenceData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.evidence != null && message.hasOwnProperty("evidence")) {
                    if (!Array.isArray(message.evidence))
                        return "evidence: array expected";
                    for (let i = 0; i < message.evidence.length; ++i) {
                        let error = $root.tendermint.types.Evidence.verify(message.evidence[i]);
                        if (error)
                            return "evidence." + error;
                    }
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates an EvidenceData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.EvidenceData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.EvidenceData} EvidenceData
             */
            EvidenceData.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.EvidenceData)
                    return object;
                let message = new $root.tendermint.types.EvidenceData();
                if (object.evidence) {
                    if (!Array.isArray(object.evidence))
                        throw TypeError(".tendermint.types.EvidenceData.evidence: array expected");
                    message.evidence = [];
                    for (let i = 0; i < object.evidence.length; ++i) {
                        if (typeof object.evidence[i] !== "object")
                            throw TypeError(".tendermint.types.EvidenceData.evidence: object expected");
                        message.evidence[i] = $root.tendermint.types.Evidence.fromObject(object.evidence[i]);
                    }
                }
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from an EvidenceData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.EvidenceData
             * @static
             * @param {tendermint.types.EvidenceData} message EvidenceData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EvidenceData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.evidence = [];
                if (options.defaults)
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                if (message.evidence && message.evidence.length) {
                    object.evidence = [];
                    for (let j = 0; j < message.evidence.length; ++j)
                        object.evidence[j] = $root.tendermint.types.Evidence.toObject(message.evidence[j], options);
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this EvidenceData to JSON.
             * @function toJSON
             * @memberof tendermint.types.EvidenceData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EvidenceData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EvidenceData;
        })();

        types.ProofOfLockChange = (function() {

            /**
             * Properties of a ProofOfLockChange.
             * @memberof tendermint.types
             * @interface IProofOfLockChange
             * @property {Array.<tendermint.types.IVote>|null} [votes] ProofOfLockChange votes
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] ProofOfLockChange pub_key
             */

            /**
             * Constructs a new ProofOfLockChange.
             * @memberof tendermint.types
             * @classdesc Represents a ProofOfLockChange.
             * @implements IProofOfLockChange
             * @constructor
             * @param {tendermint.types.IProofOfLockChange=} [properties] Properties to set
             */
            function ProofOfLockChange(properties) {
                this.votes = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProofOfLockChange votes.
             * @member {Array.<tendermint.types.IVote>} votes
             * @memberof tendermint.types.ProofOfLockChange
             * @instance
             */
            ProofOfLockChange.prototype.votes = $util.emptyArray;

            /**
             * ProofOfLockChange pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.ProofOfLockChange
             * @instance
             */
            ProofOfLockChange.prototype.pub_key = null;

            /**
             * Encodes the specified ProofOfLockChange message. Does not implicitly {@link tendermint.types.ProofOfLockChange.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ProofOfLockChange
             * @static
             * @param {tendermint.types.IProofOfLockChange} message ProofOfLockChange message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOfLockChange.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.votes != null && message.votes.length)
                    for (let i = 0; i < message.votes.length; ++i)
                        $root.tendermint.types.Vote.encode(message.votes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ProofOfLockChange message, length delimited. Does not implicitly {@link tendermint.types.ProofOfLockChange.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ProofOfLockChange
             * @static
             * @param {tendermint.types.IProofOfLockChange} message ProofOfLockChange message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOfLockChange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProofOfLockChange message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ProofOfLockChange
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ProofOfLockChange} ProofOfLockChange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOfLockChange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ProofOfLockChange();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.votes && message.votes.length))
                            message.votes = [];
                        message.votes.push($root.tendermint.types.Vote.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProofOfLockChange message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ProofOfLockChange
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ProofOfLockChange} ProofOfLockChange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOfLockChange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProofOfLockChange message.
             * @function verify
             * @memberof tendermint.types.ProofOfLockChange
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProofOfLockChange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.votes != null && message.hasOwnProperty("votes")) {
                    if (!Array.isArray(message.votes))
                        return "votes: array expected";
                    for (let i = 0; i < message.votes.length; ++i) {
                        let error = $root.tendermint.types.Vote.verify(message.votes[i]);
                        if (error)
                            return "votes." + error;
                    }
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                return null;
            };

            /**
             * Creates a ProofOfLockChange message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ProofOfLockChange
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ProofOfLockChange} ProofOfLockChange
             */
            ProofOfLockChange.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ProofOfLockChange)
                    return object;
                let message = new $root.tendermint.types.ProofOfLockChange();
                if (object.votes) {
                    if (!Array.isArray(object.votes))
                        throw TypeError(".tendermint.types.ProofOfLockChange.votes: array expected");
                    message.votes = [];
                    for (let i = 0; i < object.votes.length; ++i) {
                        if (typeof object.votes[i] !== "object")
                            throw TypeError(".tendermint.types.ProofOfLockChange.votes: object expected");
                        message.votes[i] = $root.tendermint.types.Vote.fromObject(object.votes[i]);
                    }
                }
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.types.ProofOfLockChange.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                return message;
            };

            /**
             * Creates a plain object from a ProofOfLockChange message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ProofOfLockChange
             * @static
             * @param {tendermint.types.ProofOfLockChange} message ProofOfLockChange
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProofOfLockChange.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.votes = [];
                if (options.defaults)
                    object.pub_key = null;
                if (message.votes && message.votes.length) {
                    object.votes = [];
                    for (let j = 0; j < message.votes.length; ++j)
                        object.votes[j] = $root.tendermint.types.Vote.toObject(message.votes[j], options);
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                return object;
            };

            /**
             * Converts this ProofOfLockChange to JSON.
             * @function toJSON
             * @memberof tendermint.types.ProofOfLockChange
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProofOfLockChange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProofOfLockChange;
        })();

        types.ValidatorSet = (function() {

            /**
             * Properties of a ValidatorSet.
             * @memberof tendermint.types
             * @interface IValidatorSet
             * @property {Array.<tendermint.types.IValidator>|null} [validators] ValidatorSet validators
             * @property {tendermint.types.IValidator|null} [proposer] ValidatorSet proposer
             * @property {number|null} [total_voting_power] ValidatorSet total_voting_power
             */

            /**
             * Constructs a new ValidatorSet.
             * @memberof tendermint.types
             * @classdesc Represents a ValidatorSet.
             * @implements IValidatorSet
             * @constructor
             * @param {tendermint.types.IValidatorSet=} [properties] Properties to set
             */
            function ValidatorSet(properties) {
                this.validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValidatorSet validators.
             * @member {Array.<tendermint.types.IValidator>} validators
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.validators = $util.emptyArray;

            /**
             * ValidatorSet proposer.
             * @member {tendermint.types.IValidator|null|undefined} proposer
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.proposer = null;

            /**
             * ValidatorSet total_voting_power.
             * @member {number} total_voting_power
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ValidatorSet message. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.IValidatorSet} message ValidatorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validators != null && message.validators.length)
                    for (let i = 0; i < message.validators.length; ++i)
                        $root.tendermint.types.Validator.encode(message.validators[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.proposer != null && Object.hasOwnProperty.call(message, "proposer"))
                    $root.tendermint.types.Validator.encode(message.proposer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.total_voting_power);
                return writer;
            };

            /**
             * Encodes the specified ValidatorSet message, length delimited. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.IValidatorSet} message ValidatorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValidatorSet message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ValidatorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.validators && message.validators.length))
                            message.validators = [];
                        message.validators.push($root.tendermint.types.Validator.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.proposer = $root.tendermint.types.Validator.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.total_voting_power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValidatorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValidatorSet message.
             * @function verify
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValidatorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validators != null && message.hasOwnProperty("validators")) {
                    if (!Array.isArray(message.validators))
                        return "validators: array expected";
                    for (let i = 0; i < message.validators.length; ++i) {
                        let error = $root.tendermint.types.Validator.verify(message.validators[i]);
                        if (error)
                            return "validators." + error;
                    }
                }
                if (message.proposer != null && message.hasOwnProperty("proposer")) {
                    let error = $root.tendermint.types.Validator.verify(message.proposer);
                    if (error)
                        return "proposer." + error;
                }
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                        return "total_voting_power: integer|Long expected";
                return null;
            };

            /**
             * Creates a ValidatorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             */
            ValidatorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ValidatorSet)
                    return object;
                let message = new $root.tendermint.types.ValidatorSet();
                if (object.validators) {
                    if (!Array.isArray(object.validators))
                        throw TypeError(".tendermint.types.ValidatorSet.validators: array expected");
                    message.validators = [];
                    for (let i = 0; i < object.validators.length; ++i) {
                        if (typeof object.validators[i] !== "object")
                            throw TypeError(".tendermint.types.ValidatorSet.validators: object expected");
                        message.validators[i] = $root.tendermint.types.Validator.fromObject(object.validators[i]);
                    }
                }
                if (object.proposer != null) {
                    if (typeof object.proposer !== "object")
                        throw TypeError(".tendermint.types.ValidatorSet.proposer: object expected");
                    message.proposer = $root.tendermint.types.Validator.fromObject(object.proposer);
                }
                if (object.total_voting_power != null)
                    if ($util.Long)
                        (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                    else if (typeof object.total_voting_power === "string")
                        message.total_voting_power = parseInt(object.total_voting_power, 10);
                    else if (typeof object.total_voting_power === "number")
                        message.total_voting_power = object.total_voting_power;
                    else if (typeof object.total_voting_power === "object")
                        message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ValidatorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.ValidatorSet} message ValidatorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValidatorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.validators = [];
                if (options.defaults) {
                    object.proposer = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total_voting_power = options.longs === String ? "0" : 0;
                }
                if (message.validators && message.validators.length) {
                    object.validators = [];
                    for (let j = 0; j < message.validators.length; ++j)
                        object.validators[j] = $root.tendermint.types.Validator.toObject(message.validators[j], options);
                }
                if (message.proposer != null && message.hasOwnProperty("proposer"))
                    object.proposer = $root.tendermint.types.Validator.toObject(message.proposer, options);
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (typeof message.total_voting_power === "number")
                        object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                    else
                        object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                return object;
            };

            /**
             * Converts this ValidatorSet to JSON.
             * @function toJSON
             * @memberof tendermint.types.ValidatorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValidatorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValidatorSet;
        })();

        types.Validator = (function() {

            /**
             * Properties of a Validator.
             * @memberof tendermint.types
             * @interface IValidator
             * @property {Uint8Array|null} [address] Validator address
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] Validator pub_key
             * @property {number|null} [voting_power] Validator voting_power
             * @property {number|null} [proposer_priority] Validator proposer_priority
             */

            /**
             * Constructs a new Validator.
             * @memberof tendermint.types
             * @classdesc Represents a Validator.
             * @implements IValidator
             * @constructor
             * @param {tendermint.types.IValidator=} [properties] Properties to set
             */
            function Validator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Validator address.
             * @member {Uint8Array} address
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.address = $util.newBuffer([]);

            /**
             * Validator pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.pub_key = null;

            /**
             * Validator voting_power.
             * @member {number} voting_power
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Validator proposer_priority.
             * @member {number} proposer_priority
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.proposer_priority = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified Validator message. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.address);
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.voting_power != null && Object.hasOwnProperty.call(message, "voting_power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.voting_power);
                if (message.proposer_priority != null && Object.hasOwnProperty.call(message, "proposer_priority"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.proposer_priority);
                return writer;
            };

            /**
             * Encodes the specified Validator message, length delimited. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Validator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Validator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.bytes();
                        break;
                    case 2:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.voting_power = reader.int64();
                        break;
                    case 4:
                        message.proposer_priority = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Validator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Validator message.
             * @function verify
             * @memberof tendermint.types.Validator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Validator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!(message.address && typeof message.address.length === "number" || $util.isString(message.address)))
                        return "address: buffer expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (!$util.isInteger(message.voting_power) && !(message.voting_power && $util.isInteger(message.voting_power.low) && $util.isInteger(message.voting_power.high)))
                        return "voting_power: integer|Long expected";
                if (message.proposer_priority != null && message.hasOwnProperty("proposer_priority"))
                    if (!$util.isInteger(message.proposer_priority) && !(message.proposer_priority && $util.isInteger(message.proposer_priority.low) && $util.isInteger(message.proposer_priority.high)))
                        return "proposer_priority: integer|Long expected";
                return null;
            };

            /**
             * Creates a Validator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Validator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Validator} Validator
             */
            Validator.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Validator)
                    return object;
                let message = new $root.tendermint.types.Validator();
                if (object.address != null)
                    if (typeof object.address === "string")
                        $util.base64.decode(object.address, message.address = $util.newBuffer($util.base64.length(object.address)), 0);
                    else if (object.address.length)
                        message.address = object.address;
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.types.Validator.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.voting_power != null)
                    if ($util.Long)
                        (message.voting_power = $util.Long.fromValue(object.voting_power)).unsigned = false;
                    else if (typeof object.voting_power === "string")
                        message.voting_power = parseInt(object.voting_power, 10);
                    else if (typeof object.voting_power === "number")
                        message.voting_power = object.voting_power;
                    else if (typeof object.voting_power === "object")
                        message.voting_power = new $util.LongBits(object.voting_power.low >>> 0, object.voting_power.high >>> 0).toNumber();
                if (object.proposer_priority != null)
                    if ($util.Long)
                        (message.proposer_priority = $util.Long.fromValue(object.proposer_priority)).unsigned = false;
                    else if (typeof object.proposer_priority === "string")
                        message.proposer_priority = parseInt(object.proposer_priority, 10);
                    else if (typeof object.proposer_priority === "number")
                        message.proposer_priority = object.proposer_priority;
                    else if (typeof object.proposer_priority === "object")
                        message.proposer_priority = new $util.LongBits(object.proposer_priority.low >>> 0, object.proposer_priority.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a Validator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.Validator} message Validator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Validator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.address = "";
                    else {
                        object.address = [];
                        if (options.bytes !== Array)
                            object.address = $util.newBuffer(object.address);
                    }
                    object.pub_key = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.voting_power = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.proposer_priority = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.proposer_priority = options.longs === String ? "0" : 0;
                }
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = options.bytes === String ? $util.base64.encode(message.address, 0, message.address.length) : options.bytes === Array ? Array.prototype.slice.call(message.address) : message.address;
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (typeof message.voting_power === "number")
                        object.voting_power = options.longs === String ? String(message.voting_power) : message.voting_power;
                    else
                        object.voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.voting_power) : options.longs === Number ? new $util.LongBits(message.voting_power.low >>> 0, message.voting_power.high >>> 0).toNumber() : message.voting_power;
                if (message.proposer_priority != null && message.hasOwnProperty("proposer_priority"))
                    if (typeof message.proposer_priority === "number")
                        object.proposer_priority = options.longs === String ? String(message.proposer_priority) : message.proposer_priority;
                    else
                        object.proposer_priority = options.longs === String ? $util.Long.prototype.toString.call(message.proposer_priority) : options.longs === Number ? new $util.LongBits(message.proposer_priority.low >>> 0, message.proposer_priority.high >>> 0).toNumber() : message.proposer_priority;
                return object;
            };

            /**
             * Converts this Validator to JSON.
             * @function toJSON
             * @memberof tendermint.types.Validator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Validator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Validator;
        })();

        types.SimpleValidator = (function() {

            /**
             * Properties of a SimpleValidator.
             * @memberof tendermint.types
             * @interface ISimpleValidator
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] SimpleValidator pub_key
             * @property {number|null} [voting_power] SimpleValidator voting_power
             */

            /**
             * Constructs a new SimpleValidator.
             * @memberof tendermint.types
             * @classdesc Represents a SimpleValidator.
             * @implements ISimpleValidator
             * @constructor
             * @param {tendermint.types.ISimpleValidator=} [properties] Properties to set
             */
            function SimpleValidator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SimpleValidator pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.SimpleValidator
             * @instance
             */
            SimpleValidator.prototype.pub_key = null;

            /**
             * SimpleValidator voting_power.
             * @member {number} voting_power
             * @memberof tendermint.types.SimpleValidator
             * @instance
             */
            SimpleValidator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified SimpleValidator message. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.ISimpleValidator} message SimpleValidator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SimpleValidator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.voting_power != null && Object.hasOwnProperty.call(message, "voting_power"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.voting_power);
                return writer;
            };

            /**
             * Encodes the specified SimpleValidator message, length delimited. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.ISimpleValidator} message SimpleValidator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SimpleValidator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SimpleValidator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SimpleValidator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.SimpleValidator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.voting_power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SimpleValidator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SimpleValidator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SimpleValidator message.
             * @function verify
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SimpleValidator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (!$util.isInteger(message.voting_power) && !(message.voting_power && $util.isInteger(message.voting_power.low) && $util.isInteger(message.voting_power.high)))
                        return "voting_power: integer|Long expected";
                return null;
            };

            /**
             * Creates a SimpleValidator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             */
            SimpleValidator.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.SimpleValidator)
                    return object;
                let message = new $root.tendermint.types.SimpleValidator();
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.types.SimpleValidator.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.voting_power != null)
                    if ($util.Long)
                        (message.voting_power = $util.Long.fromValue(object.voting_power)).unsigned = false;
                    else if (typeof object.voting_power === "string")
                        message.voting_power = parseInt(object.voting_power, 10);
                    else if (typeof object.voting_power === "number")
                        message.voting_power = object.voting_power;
                    else if (typeof object.voting_power === "object")
                        message.voting_power = new $util.LongBits(object.voting_power.low >>> 0, object.voting_power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a SimpleValidator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.SimpleValidator} message SimpleValidator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SimpleValidator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pub_key = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.voting_power = options.longs === String ? "0" : 0;
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (typeof message.voting_power === "number")
                        object.voting_power = options.longs === String ? String(message.voting_power) : message.voting_power;
                    else
                        object.voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.voting_power) : options.longs === Number ? new $util.LongBits(message.voting_power.low >>> 0, message.voting_power.high >>> 0).toNumber() : message.voting_power;
                return object;
            };

            /**
             * Converts this SimpleValidator to JSON.
             * @function toJSON
             * @memberof tendermint.types.SimpleValidator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SimpleValidator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SimpleValidator;
        })();

        return types;
    })();

    tendermint.libs = (function() {

        /**
         * Namespace libs.
         * @memberof tendermint
         * @namespace
         */
        const libs = {};

        libs.bits = (function() {

            /**
             * Namespace bits.
             * @memberof tendermint.libs
             * @namespace
             */
            const bits = {};

            bits.BitArray = (function() {

                /**
                 * Properties of a BitArray.
                 * @memberof tendermint.libs.bits
                 * @interface IBitArray
                 * @property {number|null} [bits] BitArray bits
                 * @property {Array.<number>|null} [elems] BitArray elems
                 */

                /**
                 * Constructs a new BitArray.
                 * @memberof tendermint.libs.bits
                 * @classdesc Represents a BitArray.
                 * @implements IBitArray
                 * @constructor
                 * @param {tendermint.libs.bits.IBitArray=} [properties] Properties to set
                 */
                function BitArray(properties) {
                    this.elems = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * BitArray bits.
                 * @member {number} bits
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 */
                BitArray.prototype.bits = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * BitArray elems.
                 * @member {Array.<number>} elems
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 */
                BitArray.prototype.elems = $util.emptyArray;

                /**
                 * Encodes the specified BitArray message. Does not implicitly {@link tendermint.libs.bits.BitArray.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.IBitArray} message BitArray message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BitArray.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.bits != null && Object.hasOwnProperty.call(message, "bits"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.bits);
                    if (message.elems != null && message.elems.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.elems.length; ++i)
                            writer.uint64(message.elems[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified BitArray message, length delimited. Does not implicitly {@link tendermint.libs.bits.BitArray.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.IBitArray} message BitArray message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BitArray.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a BitArray message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BitArray.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.libs.bits.BitArray();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.bits = reader.int64();
                            break;
                        case 2:
                            if (!(message.elems && message.elems.length))
                                message.elems = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.elems.push(reader.uint64());
                            } else
                                message.elems.push(reader.uint64());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a BitArray message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BitArray.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a BitArray message.
                 * @function verify
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BitArray.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.bits != null && message.hasOwnProperty("bits"))
                        if (!$util.isInteger(message.bits) && !(message.bits && $util.isInteger(message.bits.low) && $util.isInteger(message.bits.high)))
                            return "bits: integer|Long expected";
                    if (message.elems != null && message.hasOwnProperty("elems")) {
                        if (!Array.isArray(message.elems))
                            return "elems: array expected";
                        for (let i = 0; i < message.elems.length; ++i)
                            if (!$util.isInteger(message.elems[i]) && !(message.elems[i] && $util.isInteger(message.elems[i].low) && $util.isInteger(message.elems[i].high)))
                                return "elems: integer|Long[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a BitArray message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 */
                BitArray.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.libs.bits.BitArray)
                        return object;
                    let message = new $root.tendermint.libs.bits.BitArray();
                    if (object.bits != null)
                        if ($util.Long)
                            (message.bits = $util.Long.fromValue(object.bits)).unsigned = false;
                        else if (typeof object.bits === "string")
                            message.bits = parseInt(object.bits, 10);
                        else if (typeof object.bits === "number")
                            message.bits = object.bits;
                        else if (typeof object.bits === "object")
                            message.bits = new $util.LongBits(object.bits.low >>> 0, object.bits.high >>> 0).toNumber();
                    if (object.elems) {
                        if (!Array.isArray(object.elems))
                            throw TypeError(".tendermint.libs.bits.BitArray.elems: array expected");
                        message.elems = [];
                        for (let i = 0; i < object.elems.length; ++i)
                            if ($util.Long)
                                (message.elems[i] = $util.Long.fromValue(object.elems[i])).unsigned = true;
                            else if (typeof object.elems[i] === "string")
                                message.elems[i] = parseInt(object.elems[i], 10);
                            else if (typeof object.elems[i] === "number")
                                message.elems[i] = object.elems[i];
                            else if (typeof object.elems[i] === "object")
                                message.elems[i] = new $util.LongBits(object.elems[i].low >>> 0, object.elems[i].high >>> 0).toNumber(true);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a BitArray message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.BitArray} message BitArray
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BitArray.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.elems = [];
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.bits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.bits = options.longs === String ? "0" : 0;
                    if (message.bits != null && message.hasOwnProperty("bits"))
                        if (typeof message.bits === "number")
                            object.bits = options.longs === String ? String(message.bits) : message.bits;
                        else
                            object.bits = options.longs === String ? $util.Long.prototype.toString.call(message.bits) : options.longs === Number ? new $util.LongBits(message.bits.low >>> 0, message.bits.high >>> 0).toNumber() : message.bits;
                    if (message.elems && message.elems.length) {
                        object.elems = [];
                        for (let j = 0; j < message.elems.length; ++j)
                            if (typeof message.elems[j] === "number")
                                object.elems[j] = options.longs === String ? String(message.elems[j]) : message.elems[j];
                            else
                                object.elems[j] = options.longs === String ? $util.Long.prototype.toString.call(message.elems[j]) : options.longs === Number ? new $util.LongBits(message.elems[j].low >>> 0, message.elems[j].high >>> 0).toNumber(true) : message.elems[j];
                    }
                    return object;
                };

                /**
                 * Converts this BitArray to JSON.
                 * @function toJSON
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BitArray.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return BitArray;
            })();

            return bits;
        })();

        return libs;
    })();

    tendermint.version = (function() {

        /**
         * Namespace version.
         * @memberof tendermint
         * @namespace
         */
        const version = {};

        version.App = (function() {

            /**
             * Properties of an App.
             * @memberof tendermint.version
             * @interface IApp
             * @property {number|null} [protocol] App protocol
             * @property {string|null} [software] App software
             */

            /**
             * Constructs a new App.
             * @memberof tendermint.version
             * @classdesc Represents an App.
             * @implements IApp
             * @constructor
             * @param {tendermint.version.IApp=} [properties] Properties to set
             */
            function App(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * App protocol.
             * @member {number} protocol
             * @memberof tendermint.version.App
             * @instance
             */
            App.prototype.protocol = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * App software.
             * @member {string} software
             * @memberof tendermint.version.App
             * @instance
             */
            App.prototype.software = "";

            /**
             * Encodes the specified App message. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
             * @function encode
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.IApp} message App message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            App.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.protocol);
                if (message.software != null && Object.hasOwnProperty.call(message, "software"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.software);
                return writer;
            };

            /**
             * Encodes the specified App message, length delimited. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.IApp} message App message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            App.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an App message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.version.App
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.version.App} App
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            App.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.version.App();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.protocol = reader.uint64();
                        break;
                    case 2:
                        message.software = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an App message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.version.App
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.version.App} App
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            App.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an App message.
             * @function verify
             * @memberof tendermint.version.App
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            App.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    if (!$util.isInteger(message.protocol) && !(message.protocol && $util.isInteger(message.protocol.low) && $util.isInteger(message.protocol.high)))
                        return "protocol: integer|Long expected";
                if (message.software != null && message.hasOwnProperty("software"))
                    if (!$util.isString(message.software))
                        return "software: string expected";
                return null;
            };

            /**
             * Creates an App message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.version.App
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.version.App} App
             */
            App.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.version.App)
                    return object;
                let message = new $root.tendermint.version.App();
                if (object.protocol != null)
                    if ($util.Long)
                        (message.protocol = $util.Long.fromValue(object.protocol)).unsigned = true;
                    else if (typeof object.protocol === "string")
                        message.protocol = parseInt(object.protocol, 10);
                    else if (typeof object.protocol === "number")
                        message.protocol = object.protocol;
                    else if (typeof object.protocol === "object")
                        message.protocol = new $util.LongBits(object.protocol.low >>> 0, object.protocol.high >>> 0).toNumber(true);
                if (object.software != null)
                    message.software = String(object.software);
                return message;
            };

            /**
             * Creates a plain object from an App message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.App} message App
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            App.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.protocol = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.protocol = options.longs === String ? "0" : 0;
                    object.software = "";
                }
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    if (typeof message.protocol === "number")
                        object.protocol = options.longs === String ? String(message.protocol) : message.protocol;
                    else
                        object.protocol = options.longs === String ? $util.Long.prototype.toString.call(message.protocol) : options.longs === Number ? new $util.LongBits(message.protocol.low >>> 0, message.protocol.high >>> 0).toNumber(true) : message.protocol;
                if (message.software != null && message.hasOwnProperty("software"))
                    object.software = message.software;
                return object;
            };

            /**
             * Converts this App to JSON.
             * @function toJSON
             * @memberof tendermint.version.App
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            App.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return App;
        })();

        version.Consensus = (function() {

            /**
             * Properties of a Consensus.
             * @memberof tendermint.version
             * @interface IConsensus
             * @property {number|null} [block] Consensus block
             * @property {number|null} [app] Consensus app
             */

            /**
             * Constructs a new Consensus.
             * @memberof tendermint.version
             * @classdesc Represents a Consensus.
             * @implements IConsensus
             * @constructor
             * @param {tendermint.version.IConsensus=} [properties] Properties to set
             */
            function Consensus(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Consensus block.
             * @member {number} block
             * @memberof tendermint.version.Consensus
             * @instance
             */
            Consensus.prototype.block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Consensus app.
             * @member {number} app
             * @memberof tendermint.version.Consensus
             * @instance
             */
            Consensus.prototype.app = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified Consensus message. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
             * @function encode
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.IConsensus} message Consensus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Consensus.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.block);
                if (message.app != null && Object.hasOwnProperty.call(message, "app"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.app);
                return writer;
            };

            /**
             * Encodes the specified Consensus message, length delimited. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.IConsensus} message Consensus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Consensus.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Consensus message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.version.Consensus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.version.Consensus} Consensus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Consensus.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.version.Consensus();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = reader.uint64();
                        break;
                    case 2:
                        message.app = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Consensus message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.version.Consensus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.version.Consensus} Consensus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Consensus.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Consensus message.
             * @function verify
             * @memberof tendermint.version.Consensus
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Consensus.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block"))
                    if (!$util.isInteger(message.block) && !(message.block && $util.isInteger(message.block.low) && $util.isInteger(message.block.high)))
                        return "block: integer|Long expected";
                if (message.app != null && message.hasOwnProperty("app"))
                    if (!$util.isInteger(message.app) && !(message.app && $util.isInteger(message.app.low) && $util.isInteger(message.app.high)))
                        return "app: integer|Long expected";
                return null;
            };

            /**
             * Creates a Consensus message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.version.Consensus
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.version.Consensus} Consensus
             */
            Consensus.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.version.Consensus)
                    return object;
                let message = new $root.tendermint.version.Consensus();
                if (object.block != null)
                    if ($util.Long)
                        (message.block = $util.Long.fromValue(object.block)).unsigned = true;
                    else if (typeof object.block === "string")
                        message.block = parseInt(object.block, 10);
                    else if (typeof object.block === "number")
                        message.block = object.block;
                    else if (typeof object.block === "object")
                        message.block = new $util.LongBits(object.block.low >>> 0, object.block.high >>> 0).toNumber(true);
                if (object.app != null)
                    if ($util.Long)
                        (message.app = $util.Long.fromValue(object.app)).unsigned = true;
                    else if (typeof object.app === "string")
                        message.app = parseInt(object.app, 10);
                    else if (typeof object.app === "number")
                        message.app = object.app;
                    else if (typeof object.app === "object")
                        message.app = new $util.LongBits(object.app.low >>> 0, object.app.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a Consensus message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.Consensus} message Consensus
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Consensus.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.app = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.app = options.longs === String ? "0" : 0;
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    if (typeof message.block === "number")
                        object.block = options.longs === String ? String(message.block) : message.block;
                    else
                        object.block = options.longs === String ? $util.Long.prototype.toString.call(message.block) : options.longs === Number ? new $util.LongBits(message.block.low >>> 0, message.block.high >>> 0).toNumber(true) : message.block;
                if (message.app != null && message.hasOwnProperty("app"))
                    if (typeof message.app === "number")
                        object.app = options.longs === String ? String(message.app) : message.app;
                    else
                        object.app = options.longs === String ? $util.Long.prototype.toString.call(message.app) : options.longs === Number ? new $util.LongBits(message.app.low >>> 0, message.app.high >>> 0).toNumber(true) : message.app;
                return object;
            };

            /**
             * Converts this Consensus to JSON.
             * @function toJSON
             * @memberof tendermint.version.Consensus
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Consensus.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Consensus;
        })();

        return version;
    })();

    return tendermint;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (let i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
             * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.public_dependency = [];
                this.weak_dependency = [];
                this.message_type = [];
                this.enum_type = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto public_dependency.
             * @member {Array.<number>} public_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.public_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto weak_dependency.
             * @member {Array.<number>} weak_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto message_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} message_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.message_type = $util.emptyArray;

            /**
             * FileDescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto source_code_info.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.source_code_info = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (let i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.message_type != null && message.message_type.length)
                    for (let i = 0; i < message.message_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (let i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.public_dependency != null && message.public_dependency.length)
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                if (message.weak_dependency != null && message.weak_dependency.length)
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.public_dependency && message.public_dependency.length))
                            message.public_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.public_dependency.push(reader.int32());
                        } else
                            message.public_dependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weak_dependency && message.weak_dependency.length))
                            message.weak_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weak_dependency.push(reader.int32());
                        } else
                            message.weak_dependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.message_type && message.message_type.length))
                            message.message_type = [];
                        message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                    if (!Array.isArray(message.public_dependency))
                        return "public_dependency: array expected";
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        if (!$util.isInteger(message.public_dependency[i]))
                            return "public_dependency: integer[] expected";
                }
                if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                    if (!Array.isArray(message.weak_dependency))
                        return "weak_dependency: array expected";
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        if (!$util.isInteger(message.weak_dependency[i]))
                            return "weak_dependency: integer[] expected";
                }
                if (message.message_type != null && message.hasOwnProperty("message_type")) {
                    if (!Array.isArray(message.message_type))
                        return "message_type: array expected";
                    for (let i = 0; i < message.message_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                        if (error)
                            return "message_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                    if (error)
                        return "source_code_info." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.public_dependency) {
                    if (!Array.isArray(object.public_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                    message.public_dependency = [];
                    for (let i = 0; i < object.public_dependency.length; ++i)
                        message.public_dependency[i] = object.public_dependency[i] | 0;
                }
                if (object.weak_dependency) {
                    if (!Array.isArray(object.weak_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                    message.weak_dependency = [];
                    for (let i = 0; i < object.weak_dependency.length; ++i)
                        message.weak_dependency[i] = object.weak_dependency[i] | 0;
                }
                if (object.message_type) {
                    if (!Array.isArray(object.message_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                    message.message_type = [];
                    for (let i = 0; i < object.message_type.length; ++i) {
                        if (typeof object.message_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                        message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.source_code_info != null) {
                    if (typeof object.source_code_info !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                    message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.message_type = [];
                    object.enum_type = [];
                    object.service = [];
                    object.extension = [];
                    object.public_dependency = [];
                    object.weak_dependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.source_code_info = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.message_type && message.message_type.length) {
                    object.message_type = [];
                    for (let j = 0; j < message.message_type.length; ++j)
                        object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                    object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                if (message.public_dependency && message.public_dependency.length) {
                    object.public_dependency = [];
                    for (let j = 0; j < message.public_dependency.length; ++j)
                        object.public_dependency[j] = message.public_dependency[j];
                }
                if (message.weak_dependency && message.weak_dependency.length) {
                    object.weak_dependency = [];
                    for (let j = 0; j < message.weak_dependency.length; ++j)
                        object.weak_dependency[j] = message.weak_dependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
             * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nested_type = [];
                this.enum_type = [];
                this.extension_range = [];
                this.oneof_decl = [];
                this.reserved_range = [];
                this.reserved_name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nested_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nested_type = $util.emptyArray;

            /**
             * DescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * DescriptorProto extension_range.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension_range = $util.emptyArray;

            /**
             * DescriptorProto oneof_decl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneof_decl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reserved_range.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_range = $util.emptyArray;

            /**
             * DescriptorProto reserved_name.
             * @member {Array.<string>} reserved_name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_name = $util.emptyArray;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (let i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nested_type != null && message.nested_type.length)
                    for (let i = 0; i < message.nested_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extension_range != null && message.extension_range.length)
                    for (let i = 0; i < message.extension_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneof_decl != null && message.oneof_decl.length)
                    for (let i = 0; i < message.oneof_decl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reserved_range != null && message.reserved_range.length)
                    for (let i = 0; i < message.reserved_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reserved_name != null && message.reserved_name.length)
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nested_type && message.nested_type.length))
                            message.nested_type = [];
                        message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extension_range && message.extension_range.length))
                            message.extension_range = [];
                        message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneof_decl && message.oneof_decl.length))
                            message.oneof_decl = [];
                        message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reserved_range && message.reserved_range.length))
                            message.reserved_range = [];
                        message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reserved_name && message.reserved_name.length))
                            message.reserved_name = [];
                        message.reserved_name.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                    if (!Array.isArray(message.nested_type))
                        return "nested_type: array expected";
                    for (let i = 0; i < message.nested_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                        if (error)
                            return "nested_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                    if (!Array.isArray(message.extension_range))
                        return "extension_range: array expected";
                    for (let i = 0; i < message.extension_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                        if (error)
                            return "extension_range." + error;
                    }
                }
                if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                    if (!Array.isArray(message.oneof_decl))
                        return "oneof_decl: array expected";
                    for (let i = 0; i < message.oneof_decl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                        if (error)
                            return "oneof_decl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                    if (!Array.isArray(message.reserved_range))
                        return "reserved_range: array expected";
                    for (let i = 0; i < message.reserved_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                        if (error)
                            return "reserved_range." + error;
                    }
                }
                if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                    if (!Array.isArray(message.reserved_name))
                        return "reserved_name: array expected";
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        if (!$util.isString(message.reserved_name[i]))
                            return "reserved_name: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nested_type) {
                    if (!Array.isArray(object.nested_type))
                        throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                    message.nested_type = [];
                    for (let i = 0; i < object.nested_type.length; ++i) {
                        if (typeof object.nested_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                        message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.extension_range) {
                    if (!Array.isArray(object.extension_range))
                        throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                    message.extension_range = [];
                    for (let i = 0; i < object.extension_range.length; ++i) {
                        if (typeof object.extension_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                        message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                    }
                }
                if (object.oneof_decl) {
                    if (!Array.isArray(object.oneof_decl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                    message.oneof_decl = [];
                    for (let i = 0; i < object.oneof_decl.length; ++i) {
                        if (typeof object.oneof_decl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                        message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reserved_range) {
                    if (!Array.isArray(object.reserved_range))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                    message.reserved_range = [];
                    for (let i = 0; i < object.reserved_range.length; ++i) {
                        if (typeof object.reserved_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                        message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                    }
                }
                if (object.reserved_name) {
                    if (!Array.isArray(object.reserved_name))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                    message.reserved_name = [];
                    for (let i = 0; i < object.reserved_name.length; ++i)
                        message.reserved_name[i] = String(object.reserved_name[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nested_type = [];
                    object.enum_type = [];
                    object.extension_range = [];
                    object.extension = [];
                    object.oneof_decl = [];
                    object.reserved_range = [];
                    object.reserved_name = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nested_type && message.nested_type.length) {
                    object.nested_type = [];
                    for (let j = 0; j < message.nested_type.length; ++j)
                        object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.extension_range && message.extension_range.length) {
                    object.extension_range = [];
                    for (let j = 0; j < message.extension_range.length; ++j)
                        object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneof_decl && message.oneof_decl.length) {
                    object.oneof_decl = [];
                    for (let j = 0; j < message.oneof_decl.length; ++j)
                        object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                }
                if (message.reserved_range && message.reserved_range.length) {
                    object.reserved_range = [];
                    for (let j = 0; j < message.reserved_range.length; ++j)
                        object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                }
                if (message.reserved_name && message.reserved_name.length) {
                    object.reserved_name = [];
                    for (let j = 0; j < message.reserved_name.length; ++j)
                        object.reserved_name[j] = message.reserved_name[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [type_name] FieldDescriptorProto type_name
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [default_value] FieldDescriptorProto default_value
             * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
             * @property {string|null} [json_name] FieldDescriptorProto json_name
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto type_name.
             * @member {string} type_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type_name = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto default_value.
             * @member {string} default_value
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.default_value = "";

            /**
             * FieldDescriptorProto oneof_index.
             * @member {number} oneof_index
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneof_index = 0;

            /**
             * FieldDescriptorProto json_name.
             * @member {string} json_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.json_name = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.type_name = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.default_value = reader.string();
                        break;
                    case 9:
                        message.oneof_index = reader.int32();
                        break;
                    case 10:
                        message.json_name = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    if (!$util.isString(message.type_name))
                        return "type_name: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    if (!$util.isString(message.default_value))
                        return "default_value: string expected";
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    if (!$util.isInteger(message.oneof_index))
                        return "oneof_index: integer expected";
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    if (!$util.isString(message.json_name))
                        return "json_name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.type_name != null)
                    message.type_name = String(object.type_name);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.default_value != null)
                    message.default_value = String(object.default_value);
                if (object.oneof_index != null)
                    message.oneof_index = object.oneof_index | 0;
                if (object.json_name != null)
                    message.json_name = String(object.json_name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.type_name = "";
                    object.default_value = "";
                    object.options = null;
                    object.oneof_index = 0;
                    object.json_name = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    object.type_name = message.type_name;
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    object.default_value = message.default_value;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    object.oneof_index = message.oneof_index;
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    object.json_name = message.json_name;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (let i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.value = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (let i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [input_type] MethodDescriptorProto input_type
             * @property {string|null} [output_type] MethodDescriptorProto output_type
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
             * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto input_type.
             * @member {string} input_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.input_type = "";

            /**
             * MethodDescriptorProto output_type.
             * @member {string} output_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.output_type = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto client_streaming.
             * @member {boolean} client_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.client_streaming = false;

            /**
             * MethodDescriptorProto server_streaming.
             * @member {boolean} server_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.server_streaming = false;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.input_type = reader.string();
                        break;
                    case 3:
                        message.output_type = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.client_streaming = reader.bool();
                        break;
                    case 6:
                        message.server_streaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    if (!$util.isString(message.input_type))
                        return "input_type: string expected";
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    if (!$util.isString(message.output_type))
                        return "output_type: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    if (typeof message.client_streaming !== "boolean")
                        return "client_streaming: boolean expected";
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    if (typeof message.server_streaming !== "boolean")
                        return "server_streaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.input_type != null)
                    message.input_type = String(object.input_type);
                if (object.output_type != null)
                    message.output_type = String(object.output_type);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.client_streaming != null)
                    message.client_streaming = Boolean(object.client_streaming);
                if (object.server_streaming != null)
                    message.server_streaming = Boolean(object.server_streaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.input_type = "";
                    object.output_type = "";
                    object.options = null;
                    object.client_streaming = false;
                    object.server_streaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    object.input_type = message.input_type;
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    object.output_type = message.output_type;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    object.client_streaming = message.client_streaming;
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    object.server_streaming = message.server_streaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [java_package] FileOptions java_package
             * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
             * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
             * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
             * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
             * @property {string|null} [go_package] FileOptions go_package
             * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
             * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
             * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
             * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
             * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters_all"] FileOptions .gogoproto.goproto_getters_all
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix_all"] FileOptions .gogoproto.goproto_enum_prefix_all
             * @property {boolean|null} [".gogoproto.goproto_stringer_all"] FileOptions .gogoproto.goproto_stringer_all
             * @property {boolean|null} [".gogoproto.verbose_equal_all"] FileOptions .gogoproto.verbose_equal_all
             * @property {boolean|null} [".gogoproto.face_all"] FileOptions .gogoproto.face_all
             * @property {boolean|null} [".gogoproto.gostring_all"] FileOptions .gogoproto.gostring_all
             * @property {boolean|null} [".gogoproto.populate_all"] FileOptions .gogoproto.populate_all
             * @property {boolean|null} [".gogoproto.stringer_all"] FileOptions .gogoproto.stringer_all
             * @property {boolean|null} [".gogoproto.onlyone_all"] FileOptions .gogoproto.onlyone_all
             * @property {boolean|null} [".gogoproto.equal_all"] FileOptions .gogoproto.equal_all
             * @property {boolean|null} [".gogoproto.description_all"] FileOptions .gogoproto.description_all
             * @property {boolean|null} [".gogoproto.testgen_all"] FileOptions .gogoproto.testgen_all
             * @property {boolean|null} [".gogoproto.benchgen_all"] FileOptions .gogoproto.benchgen_all
             * @property {boolean|null} [".gogoproto.marshaler_all"] FileOptions .gogoproto.marshaler_all
             * @property {boolean|null} [".gogoproto.unmarshaler_all"] FileOptions .gogoproto.unmarshaler_all
             * @property {boolean|null} [".gogoproto.stable_marshaler_all"] FileOptions .gogoproto.stable_marshaler_all
             * @property {boolean|null} [".gogoproto.sizer_all"] FileOptions .gogoproto.sizer_all
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer_all"] FileOptions .gogoproto.goproto_enum_stringer_all
             * @property {boolean|null} [".gogoproto.enum_stringer_all"] FileOptions .gogoproto.enum_stringer_all
             * @property {boolean|null} [".gogoproto.unsafe_marshaler_all"] FileOptions .gogoproto.unsafe_marshaler_all
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler_all"] FileOptions .gogoproto.unsafe_unmarshaler_all
             * @property {boolean|null} [".gogoproto.goproto_extensions_map_all"] FileOptions .gogoproto.goproto_extensions_map_all
             * @property {boolean|null} [".gogoproto.goproto_unrecognized_all"] FileOptions .gogoproto.goproto_unrecognized_all
             * @property {boolean|null} [".gogoproto.gogoproto_import"] FileOptions .gogoproto.gogoproto_import
             * @property {boolean|null} [".gogoproto.protosizer_all"] FileOptions .gogoproto.protosizer_all
             * @property {boolean|null} [".gogoproto.compare_all"] FileOptions .gogoproto.compare_all
             * @property {boolean|null} [".gogoproto.typedecl_all"] FileOptions .gogoproto.typedecl_all
             * @property {boolean|null} [".gogoproto.enumdecl_all"] FileOptions .gogoproto.enumdecl_all
             * @property {boolean|null} [".gogoproto.goproto_registration"] FileOptions .gogoproto.goproto_registration
             * @property {boolean|null} [".gogoproto.messagename_all"] FileOptions .gogoproto.messagename_all
             * @property {boolean|null} [".gogoproto.goproto_sizecache_all"] FileOptions .gogoproto.goproto_sizecache_all
             * @property {boolean|null} [".gogoproto.goproto_unkeyed_all"] FileOptions .gogoproto.goproto_unkeyed_all
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions java_package.
             * @member {string} java_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_package = "";

            /**
             * FileOptions java_outer_classname.
             * @member {string} java_outer_classname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_outer_classname = "";

            /**
             * FileOptions java_multiple_files.
             * @member {boolean} java_multiple_files
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_multiple_files = false;

            /**
             * FileOptions java_generate_equals_and_hash.
             * @member {boolean} java_generate_equals_and_hash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generate_equals_and_hash = false;

            /**
             * FileOptions java_string_check_utf8.
             * @member {boolean} java_string_check_utf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_string_check_utf8 = false;

            /**
             * FileOptions optimize_for.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimize_for = 1;

            /**
             * FileOptions go_package.
             * @member {string} go_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.go_package = "";

            /**
             * FileOptions cc_generic_services.
             * @member {boolean} cc_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_generic_services = false;

            /**
             * FileOptions java_generic_services.
             * @member {boolean} java_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generic_services = false;

            /**
             * FileOptions py_generic_services.
             * @member {boolean} py_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.py_generic_services = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions cc_enable_arenas.
             * @member {boolean} cc_enable_arenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_enable_arenas = false;

            /**
             * FileOptions objc_class_prefix.
             * @member {string} objc_class_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objc_class_prefix = "";

            /**
             * FileOptions csharp_namespace.
             * @member {string} csharp_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharp_namespace = "";

            /**
             * FileOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FileOptions .gogoproto.goproto_getters_all.
             * @member {boolean} .gogoproto.goproto_getters_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_getters_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_prefix_all.
             * @member {boolean} .gogoproto.goproto_enum_prefix_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_prefix_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_stringer_all.
             * @member {boolean} .gogoproto.goproto_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.verbose_equal_all.
             * @member {boolean} .gogoproto.verbose_equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.verbose_equal_all"] = false;

            /**
             * FileOptions .gogoproto.face_all.
             * @member {boolean} .gogoproto.face_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.face_all"] = false;

            /**
             * FileOptions .gogoproto.gostring_all.
             * @member {boolean} .gogoproto.gostring_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gostring_all"] = false;

            /**
             * FileOptions .gogoproto.populate_all.
             * @member {boolean} .gogoproto.populate_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.populate_all"] = false;

            /**
             * FileOptions .gogoproto.stringer_all.
             * @member {boolean} .gogoproto.stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stringer_all"] = false;

            /**
             * FileOptions .gogoproto.onlyone_all.
             * @member {boolean} .gogoproto.onlyone_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.onlyone_all"] = false;

            /**
             * FileOptions .gogoproto.equal_all.
             * @member {boolean} .gogoproto.equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.equal_all"] = false;

            /**
             * FileOptions .gogoproto.description_all.
             * @member {boolean} .gogoproto.description_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.description_all"] = false;

            /**
             * FileOptions .gogoproto.testgen_all.
             * @member {boolean} .gogoproto.testgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.testgen_all"] = false;

            /**
             * FileOptions .gogoproto.benchgen_all.
             * @member {boolean} .gogoproto.benchgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.benchgen_all"] = false;

            /**
             * FileOptions .gogoproto.marshaler_all.
             * @member {boolean} .gogoproto.marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unmarshaler_all.
             * @member {boolean} .gogoproto.unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.stable_marshaler_all.
             * @member {boolean} .gogoproto.stable_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stable_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.sizer_all.
             * @member {boolean} .gogoproto.sizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.sizer_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_stringer_all.
             * @member {boolean} .gogoproto.goproto_enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.enum_stringer_all.
             * @member {boolean} .gogoproto.enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_marshaler_all.
             * @member {boolean} .gogoproto.unsafe_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_unmarshaler_all.
             * @member {boolean} .gogoproto.unsafe_unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_extensions_map_all.
             * @member {boolean} .gogoproto.goproto_extensions_map_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_extensions_map_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unrecognized_all.
             * @member {boolean} .gogoproto.goproto_unrecognized_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unrecognized_all"] = false;

            /**
             * FileOptions .gogoproto.gogoproto_import.
             * @member {boolean} .gogoproto.gogoproto_import
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gogoproto_import"] = false;

            /**
             * FileOptions .gogoproto.protosizer_all.
             * @member {boolean} .gogoproto.protosizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.protosizer_all"] = false;

            /**
             * FileOptions .gogoproto.compare_all.
             * @member {boolean} .gogoproto.compare_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.compare_all"] = false;

            /**
             * FileOptions .gogoproto.typedecl_all.
             * @member {boolean} .gogoproto.typedecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.typedecl_all"] = false;

            /**
             * FileOptions .gogoproto.enumdecl_all.
             * @member {boolean} .gogoproto.enumdecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enumdecl_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_registration.
             * @member {boolean} .gogoproto.goproto_registration
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_registration"] = false;

            /**
             * FileOptions .gogoproto.messagename_all.
             * @member {boolean} .gogoproto.messagename_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.messagename_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_sizecache_all.
             * @member {boolean} .gogoproto.goproto_sizecache_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_sizecache_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unkeyed_all.
             * @member {boolean} .gogoproto.goproto_unkeyed_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unkeyed_all"] = false;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_getters_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters_all"))
                    writer.uint32(/* id 63001, wireType 0 =*/504008).bool(message[".gogoproto.goproto_getters_all"]);
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix_all"))
                    writer.uint32(/* id 63002, wireType 0 =*/504016).bool(message[".gogoproto.goproto_enum_prefix_all"]);
                if (message[".gogoproto.goproto_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer_all"))
                    writer.uint32(/* id 63003, wireType 0 =*/504024).bool(message[".gogoproto.goproto_stringer_all"]);
                if (message[".gogoproto.verbose_equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal_all"))
                    writer.uint32(/* id 63004, wireType 0 =*/504032).bool(message[".gogoproto.verbose_equal_all"]);
                if (message[".gogoproto.face_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face_all"))
                    writer.uint32(/* id 63005, wireType 0 =*/504040).bool(message[".gogoproto.face_all"]);
                if (message[".gogoproto.gostring_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring_all"))
                    writer.uint32(/* id 63006, wireType 0 =*/504048).bool(message[".gogoproto.gostring_all"]);
                if (message[".gogoproto.populate_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate_all"))
                    writer.uint32(/* id 63007, wireType 0 =*/504056).bool(message[".gogoproto.populate_all"]);
                if (message[".gogoproto.stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer_all"))
                    writer.uint32(/* id 63008, wireType 0 =*/504064).bool(message[".gogoproto.stringer_all"]);
                if (message[".gogoproto.onlyone_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone_all"))
                    writer.uint32(/* id 63009, wireType 0 =*/504072).bool(message[".gogoproto.onlyone_all"]);
                if (message[".gogoproto.equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal_all"))
                    writer.uint32(/* id 63013, wireType 0 =*/504104).bool(message[".gogoproto.equal_all"]);
                if (message[".gogoproto.description_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description_all"))
                    writer.uint32(/* id 63014, wireType 0 =*/504112).bool(message[".gogoproto.description_all"]);
                if (message[".gogoproto.testgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen_all"))
                    writer.uint32(/* id 63015, wireType 0 =*/504120).bool(message[".gogoproto.testgen_all"]);
                if (message[".gogoproto.benchgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen_all"))
                    writer.uint32(/* id 63016, wireType 0 =*/504128).bool(message[".gogoproto.benchgen_all"]);
                if (message[".gogoproto.marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler_all"))
                    writer.uint32(/* id 63017, wireType 0 =*/504136).bool(message[".gogoproto.marshaler_all"]);
                if (message[".gogoproto.unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler_all"))
                    writer.uint32(/* id 63018, wireType 0 =*/504144).bool(message[".gogoproto.unmarshaler_all"]);
                if (message[".gogoproto.stable_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler_all"))
                    writer.uint32(/* id 63019, wireType 0 =*/504152).bool(message[".gogoproto.stable_marshaler_all"]);
                if (message[".gogoproto.sizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer_all"))
                    writer.uint32(/* id 63020, wireType 0 =*/504160).bool(message[".gogoproto.sizer_all"]);
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer_all"))
                    writer.uint32(/* id 63021, wireType 0 =*/504168).bool(message[".gogoproto.goproto_enum_stringer_all"]);
                if (message[".gogoproto.enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer_all"))
                    writer.uint32(/* id 63022, wireType 0 =*/504176).bool(message[".gogoproto.enum_stringer_all"]);
                if (message[".gogoproto.unsafe_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler_all"))
                    writer.uint32(/* id 63023, wireType 0 =*/504184).bool(message[".gogoproto.unsafe_marshaler_all"]);
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler_all"))
                    writer.uint32(/* id 63024, wireType 0 =*/504192).bool(message[".gogoproto.unsafe_unmarshaler_all"]);
                if (message[".gogoproto.goproto_extensions_map_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map_all"))
                    writer.uint32(/* id 63025, wireType 0 =*/504200).bool(message[".gogoproto.goproto_extensions_map_all"]);
                if (message[".gogoproto.goproto_unrecognized_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized_all"))
                    writer.uint32(/* id 63026, wireType 0 =*/504208).bool(message[".gogoproto.goproto_unrecognized_all"]);
                if (message[".gogoproto.gogoproto_import"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gogoproto_import"))
                    writer.uint32(/* id 63027, wireType 0 =*/504216).bool(message[".gogoproto.gogoproto_import"]);
                if (message[".gogoproto.protosizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer_all"))
                    writer.uint32(/* id 63028, wireType 0 =*/504224).bool(message[".gogoproto.protosizer_all"]);
                if (message[".gogoproto.compare_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare_all"))
                    writer.uint32(/* id 63029, wireType 0 =*/504232).bool(message[".gogoproto.compare_all"]);
                if (message[".gogoproto.typedecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl_all"))
                    writer.uint32(/* id 63030, wireType 0 =*/504240).bool(message[".gogoproto.typedecl_all"]);
                if (message[".gogoproto.enumdecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl_all"))
                    writer.uint32(/* id 63031, wireType 0 =*/504248).bool(message[".gogoproto.enumdecl_all"]);
                if (message[".gogoproto.goproto_registration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_registration"))
                    writer.uint32(/* id 63032, wireType 0 =*/504256).bool(message[".gogoproto.goproto_registration"]);
                if (message[".gogoproto.messagename_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename_all"))
                    writer.uint32(/* id 63033, wireType 0 =*/504264).bool(message[".gogoproto.messagename_all"]);
                if (message[".gogoproto.goproto_sizecache_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache_all"))
                    writer.uint32(/* id 63034, wireType 0 =*/504272).bool(message[".gogoproto.goproto_sizecache_all"]);
                if (message[".gogoproto.goproto_unkeyed_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed_all"))
                    writer.uint32(/* id 63035, wireType 0 =*/504280).bool(message[".gogoproto.goproto_unkeyed_all"]);
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.java_package = reader.string();
                        break;
                    case 8:
                        message.java_outer_classname = reader.string();
                        break;
                    case 10:
                        message.java_multiple_files = reader.bool();
                        break;
                    case 20:
                        message.java_generate_equals_and_hash = reader.bool();
                        break;
                    case 27:
                        message.java_string_check_utf8 = reader.bool();
                        break;
                    case 9:
                        message.optimize_for = reader.int32();
                        break;
                    case 11:
                        message.go_package = reader.string();
                        break;
                    case 16:
                        message.cc_generic_services = reader.bool();
                        break;
                    case 17:
                        message.java_generic_services = reader.bool();
                        break;
                    case 18:
                        message.py_generic_services = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.cc_enable_arenas = reader.bool();
                        break;
                    case 36:
                        message.objc_class_prefix = reader.string();
                        break;
                    case 37:
                        message.csharp_namespace = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 63001:
                        message[".gogoproto.goproto_getters_all"] = reader.bool();
                        break;
                    case 63002:
                        message[".gogoproto.goproto_enum_prefix_all"] = reader.bool();
                        break;
                    case 63003:
                        message[".gogoproto.goproto_stringer_all"] = reader.bool();
                        break;
                    case 63004:
                        message[".gogoproto.verbose_equal_all"] = reader.bool();
                        break;
                    case 63005:
                        message[".gogoproto.face_all"] = reader.bool();
                        break;
                    case 63006:
                        message[".gogoproto.gostring_all"] = reader.bool();
                        break;
                    case 63007:
                        message[".gogoproto.populate_all"] = reader.bool();
                        break;
                    case 63008:
                        message[".gogoproto.stringer_all"] = reader.bool();
                        break;
                    case 63009:
                        message[".gogoproto.onlyone_all"] = reader.bool();
                        break;
                    case 63013:
                        message[".gogoproto.equal_all"] = reader.bool();
                        break;
                    case 63014:
                        message[".gogoproto.description_all"] = reader.bool();
                        break;
                    case 63015:
                        message[".gogoproto.testgen_all"] = reader.bool();
                        break;
                    case 63016:
                        message[".gogoproto.benchgen_all"] = reader.bool();
                        break;
                    case 63017:
                        message[".gogoproto.marshaler_all"] = reader.bool();
                        break;
                    case 63018:
                        message[".gogoproto.unmarshaler_all"] = reader.bool();
                        break;
                    case 63019:
                        message[".gogoproto.stable_marshaler_all"] = reader.bool();
                        break;
                    case 63020:
                        message[".gogoproto.sizer_all"] = reader.bool();
                        break;
                    case 63021:
                        message[".gogoproto.goproto_enum_stringer_all"] = reader.bool();
                        break;
                    case 63022:
                        message[".gogoproto.enum_stringer_all"] = reader.bool();
                        break;
                    case 63023:
                        message[".gogoproto.unsafe_marshaler_all"] = reader.bool();
                        break;
                    case 63024:
                        message[".gogoproto.unsafe_unmarshaler_all"] = reader.bool();
                        break;
                    case 63025:
                        message[".gogoproto.goproto_extensions_map_all"] = reader.bool();
                        break;
                    case 63026:
                        message[".gogoproto.goproto_unrecognized_all"] = reader.bool();
                        break;
                    case 63027:
                        message[".gogoproto.gogoproto_import"] = reader.bool();
                        break;
                    case 63028:
                        message[".gogoproto.protosizer_all"] = reader.bool();
                        break;
                    case 63029:
                        message[".gogoproto.compare_all"] = reader.bool();
                        break;
                    case 63030:
                        message[".gogoproto.typedecl_all"] = reader.bool();
                        break;
                    case 63031:
                        message[".gogoproto.enumdecl_all"] = reader.bool();
                        break;
                    case 63032:
                        message[".gogoproto.goproto_registration"] = reader.bool();
                        break;
                    case 63033:
                        message[".gogoproto.messagename_all"] = reader.bool();
                        break;
                    case 63034:
                        message[".gogoproto.goproto_sizecache_all"] = reader.bool();
                        break;
                    case 63035:
                        message[".gogoproto.goproto_unkeyed_all"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    if (!$util.isString(message.java_package))
                        return "java_package: string expected";
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    if (!$util.isString(message.java_outer_classname))
                        return "java_outer_classname: string expected";
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    if (typeof message.java_multiple_files !== "boolean")
                        return "java_multiple_files: boolean expected";
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    if (typeof message.java_generate_equals_and_hash !== "boolean")
                        return "java_generate_equals_and_hash: boolean expected";
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    if (typeof message.java_string_check_utf8 !== "boolean")
                        return "java_string_check_utf8: boolean expected";
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    switch (message.optimize_for) {
                    default:
                        return "optimize_for: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    if (!$util.isString(message.go_package))
                        return "go_package: string expected";
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    if (typeof message.cc_generic_services !== "boolean")
                        return "cc_generic_services: boolean expected";
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    if (typeof message.java_generic_services !== "boolean")
                        return "java_generic_services: boolean expected";
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    if (typeof message.py_generic_services !== "boolean")
                        return "py_generic_services: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    if (typeof message.cc_enable_arenas !== "boolean")
                        return "cc_enable_arenas: boolean expected";
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    if (!$util.isString(message.objc_class_prefix))
                        return "objc_class_prefix: string expected";
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    if (!$util.isString(message.csharp_namespace))
                        return "csharp_namespace: string expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                    if (typeof message[".gogoproto.goproto_getters_all"] !== "boolean")
                        return ".gogoproto.goproto_getters_all: boolean expected";
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                    if (typeof message[".gogoproto.goproto_enum_prefix_all"] !== "boolean")
                        return ".gogoproto.goproto_enum_prefix_all: boolean expected";
                if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                    if (typeof message[".gogoproto.goproto_stringer_all"] !== "boolean")
                        return ".gogoproto.goproto_stringer_all: boolean expected";
                if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                    if (typeof message[".gogoproto.verbose_equal_all"] !== "boolean")
                        return ".gogoproto.verbose_equal_all: boolean expected";
                if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                    if (typeof message[".gogoproto.face_all"] !== "boolean")
                        return ".gogoproto.face_all: boolean expected";
                if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                    if (typeof message[".gogoproto.gostring_all"] !== "boolean")
                        return ".gogoproto.gostring_all: boolean expected";
                if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                    if (typeof message[".gogoproto.populate_all"] !== "boolean")
                        return ".gogoproto.populate_all: boolean expected";
                if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                    if (typeof message[".gogoproto.stringer_all"] !== "boolean")
                        return ".gogoproto.stringer_all: boolean expected";
                if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                    if (typeof message[".gogoproto.onlyone_all"] !== "boolean")
                        return ".gogoproto.onlyone_all: boolean expected";
                if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                    if (typeof message[".gogoproto.equal_all"] !== "boolean")
                        return ".gogoproto.equal_all: boolean expected";
                if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                    if (typeof message[".gogoproto.description_all"] !== "boolean")
                        return ".gogoproto.description_all: boolean expected";
                if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                    if (typeof message[".gogoproto.testgen_all"] !== "boolean")
                        return ".gogoproto.testgen_all: boolean expected";
                if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                    if (typeof message[".gogoproto.benchgen_all"] !== "boolean")
                        return ".gogoproto.benchgen_all: boolean expected";
                if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                    if (typeof message[".gogoproto.marshaler_all"] !== "boolean")
                        return ".gogoproto.marshaler_all: boolean expected";
                if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                    if (typeof message[".gogoproto.unmarshaler_all"] !== "boolean")
                        return ".gogoproto.unmarshaler_all: boolean expected";
                if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                    if (typeof message[".gogoproto.stable_marshaler_all"] !== "boolean")
                        return ".gogoproto.stable_marshaler_all: boolean expected";
                if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                    if (typeof message[".gogoproto.sizer_all"] !== "boolean")
                        return ".gogoproto.sizer_all: boolean expected";
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                    if (typeof message[".gogoproto.goproto_enum_stringer_all"] !== "boolean")
                        return ".gogoproto.goproto_enum_stringer_all: boolean expected";
                if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                    if (typeof message[".gogoproto.enum_stringer_all"] !== "boolean")
                        return ".gogoproto.enum_stringer_all: boolean expected";
                if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                    if (typeof message[".gogoproto.unsafe_marshaler_all"] !== "boolean")
                        return ".gogoproto.unsafe_marshaler_all: boolean expected";
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                    if (typeof message[".gogoproto.unsafe_unmarshaler_all"] !== "boolean")
                        return ".gogoproto.unsafe_unmarshaler_all: boolean expected";
                if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                    if (typeof message[".gogoproto.goproto_extensions_map_all"] !== "boolean")
                        return ".gogoproto.goproto_extensions_map_all: boolean expected";
                if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                    if (typeof message[".gogoproto.goproto_unrecognized_all"] !== "boolean")
                        return ".gogoproto.goproto_unrecognized_all: boolean expected";
                if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                    if (typeof message[".gogoproto.gogoproto_import"] !== "boolean")
                        return ".gogoproto.gogoproto_import: boolean expected";
                if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                    if (typeof message[".gogoproto.protosizer_all"] !== "boolean")
                        return ".gogoproto.protosizer_all: boolean expected";
                if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                    if (typeof message[".gogoproto.compare_all"] !== "boolean")
                        return ".gogoproto.compare_all: boolean expected";
                if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                    if (typeof message[".gogoproto.typedecl_all"] !== "boolean")
                        return ".gogoproto.typedecl_all: boolean expected";
                if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                    if (typeof message[".gogoproto.enumdecl_all"] !== "boolean")
                        return ".gogoproto.enumdecl_all: boolean expected";
                if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                    if (typeof message[".gogoproto.goproto_registration"] !== "boolean")
                        return ".gogoproto.goproto_registration: boolean expected";
                if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                    if (typeof message[".gogoproto.messagename_all"] !== "boolean")
                        return ".gogoproto.messagename_all: boolean expected";
                if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                    if (typeof message[".gogoproto.goproto_sizecache_all"] !== "boolean")
                        return ".gogoproto.goproto_sizecache_all: boolean expected";
                if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                    if (typeof message[".gogoproto.goproto_unkeyed_all"] !== "boolean")
                        return ".gogoproto.goproto_unkeyed_all: boolean expected";
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.java_package != null)
                    message.java_package = String(object.java_package);
                if (object.java_outer_classname != null)
                    message.java_outer_classname = String(object.java_outer_classname);
                if (object.java_multiple_files != null)
                    message.java_multiple_files = Boolean(object.java_multiple_files);
                if (object.java_generate_equals_and_hash != null)
                    message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                if (object.java_string_check_utf8 != null)
                    message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                switch (object.optimize_for) {
                case "SPEED":
                case 1:
                    message.optimize_for = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimize_for = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimize_for = 3;
                    break;
                }
                if (object.go_package != null)
                    message.go_package = String(object.go_package);
                if (object.cc_generic_services != null)
                    message.cc_generic_services = Boolean(object.cc_generic_services);
                if (object.java_generic_services != null)
                    message.java_generic_services = Boolean(object.java_generic_services);
                if (object.py_generic_services != null)
                    message.py_generic_services = Boolean(object.py_generic_services);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.cc_enable_arenas != null)
                    message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                if (object.objc_class_prefix != null)
                    message.objc_class_prefix = String(object.objc_class_prefix);
                if (object.csharp_namespace != null)
                    message.csharp_namespace = String(object.csharp_namespace);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_getters_all"] != null)
                    message[".gogoproto.goproto_getters_all"] = Boolean(object[".gogoproto.goproto_getters_all"]);
                if (object[".gogoproto.goproto_enum_prefix_all"] != null)
                    message[".gogoproto.goproto_enum_prefix_all"] = Boolean(object[".gogoproto.goproto_enum_prefix_all"]);
                if (object[".gogoproto.goproto_stringer_all"] != null)
                    message[".gogoproto.goproto_stringer_all"] = Boolean(object[".gogoproto.goproto_stringer_all"]);
                if (object[".gogoproto.verbose_equal_all"] != null)
                    message[".gogoproto.verbose_equal_all"] = Boolean(object[".gogoproto.verbose_equal_all"]);
                if (object[".gogoproto.face_all"] != null)
                    message[".gogoproto.face_all"] = Boolean(object[".gogoproto.face_all"]);
                if (object[".gogoproto.gostring_all"] != null)
                    message[".gogoproto.gostring_all"] = Boolean(object[".gogoproto.gostring_all"]);
                if (object[".gogoproto.populate_all"] != null)
                    message[".gogoproto.populate_all"] = Boolean(object[".gogoproto.populate_all"]);
                if (object[".gogoproto.stringer_all"] != null)
                    message[".gogoproto.stringer_all"] = Boolean(object[".gogoproto.stringer_all"]);
                if (object[".gogoproto.onlyone_all"] != null)
                    message[".gogoproto.onlyone_all"] = Boolean(object[".gogoproto.onlyone_all"]);
                if (object[".gogoproto.equal_all"] != null)
                    message[".gogoproto.equal_all"] = Boolean(object[".gogoproto.equal_all"]);
                if (object[".gogoproto.description_all"] != null)
                    message[".gogoproto.description_all"] = Boolean(object[".gogoproto.description_all"]);
                if (object[".gogoproto.testgen_all"] != null)
                    message[".gogoproto.testgen_all"] = Boolean(object[".gogoproto.testgen_all"]);
                if (object[".gogoproto.benchgen_all"] != null)
                    message[".gogoproto.benchgen_all"] = Boolean(object[".gogoproto.benchgen_all"]);
                if (object[".gogoproto.marshaler_all"] != null)
                    message[".gogoproto.marshaler_all"] = Boolean(object[".gogoproto.marshaler_all"]);
                if (object[".gogoproto.unmarshaler_all"] != null)
                    message[".gogoproto.unmarshaler_all"] = Boolean(object[".gogoproto.unmarshaler_all"]);
                if (object[".gogoproto.stable_marshaler_all"] != null)
                    message[".gogoproto.stable_marshaler_all"] = Boolean(object[".gogoproto.stable_marshaler_all"]);
                if (object[".gogoproto.sizer_all"] != null)
                    message[".gogoproto.sizer_all"] = Boolean(object[".gogoproto.sizer_all"]);
                if (object[".gogoproto.goproto_enum_stringer_all"] != null)
                    message[".gogoproto.goproto_enum_stringer_all"] = Boolean(object[".gogoproto.goproto_enum_stringer_all"]);
                if (object[".gogoproto.enum_stringer_all"] != null)
                    message[".gogoproto.enum_stringer_all"] = Boolean(object[".gogoproto.enum_stringer_all"]);
                if (object[".gogoproto.unsafe_marshaler_all"] != null)
                    message[".gogoproto.unsafe_marshaler_all"] = Boolean(object[".gogoproto.unsafe_marshaler_all"]);
                if (object[".gogoproto.unsafe_unmarshaler_all"] != null)
                    message[".gogoproto.unsafe_unmarshaler_all"] = Boolean(object[".gogoproto.unsafe_unmarshaler_all"]);
                if (object[".gogoproto.goproto_extensions_map_all"] != null)
                    message[".gogoproto.goproto_extensions_map_all"] = Boolean(object[".gogoproto.goproto_extensions_map_all"]);
                if (object[".gogoproto.goproto_unrecognized_all"] != null)
                    message[".gogoproto.goproto_unrecognized_all"] = Boolean(object[".gogoproto.goproto_unrecognized_all"]);
                if (object[".gogoproto.gogoproto_import"] != null)
                    message[".gogoproto.gogoproto_import"] = Boolean(object[".gogoproto.gogoproto_import"]);
                if (object[".gogoproto.protosizer_all"] != null)
                    message[".gogoproto.protosizer_all"] = Boolean(object[".gogoproto.protosizer_all"]);
                if (object[".gogoproto.compare_all"] != null)
                    message[".gogoproto.compare_all"] = Boolean(object[".gogoproto.compare_all"]);
                if (object[".gogoproto.typedecl_all"] != null)
                    message[".gogoproto.typedecl_all"] = Boolean(object[".gogoproto.typedecl_all"]);
                if (object[".gogoproto.enumdecl_all"] != null)
                    message[".gogoproto.enumdecl_all"] = Boolean(object[".gogoproto.enumdecl_all"]);
                if (object[".gogoproto.goproto_registration"] != null)
                    message[".gogoproto.goproto_registration"] = Boolean(object[".gogoproto.goproto_registration"]);
                if (object[".gogoproto.messagename_all"] != null)
                    message[".gogoproto.messagename_all"] = Boolean(object[".gogoproto.messagename_all"]);
                if (object[".gogoproto.goproto_sizecache_all"] != null)
                    message[".gogoproto.goproto_sizecache_all"] = Boolean(object[".gogoproto.goproto_sizecache_all"]);
                if (object[".gogoproto.goproto_unkeyed_all"] != null)
                    message[".gogoproto.goproto_unkeyed_all"] = Boolean(object[".gogoproto.goproto_unkeyed_all"]);
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.java_package = "";
                    object.java_outer_classname = "";
                    object.optimize_for = options.enums === String ? "SPEED" : 1;
                    object.java_multiple_files = false;
                    object.go_package = "";
                    object.cc_generic_services = false;
                    object.java_generic_services = false;
                    object.py_generic_services = false;
                    object.java_generate_equals_and_hash = false;
                    object.deprecated = false;
                    object.java_string_check_utf8 = false;
                    object.cc_enable_arenas = false;
                    object.objc_class_prefix = "";
                    object.csharp_namespace = "";
                    object[".gogoproto.goproto_getters_all"] = false;
                    object[".gogoproto.goproto_enum_prefix_all"] = false;
                    object[".gogoproto.goproto_stringer_all"] = false;
                    object[".gogoproto.verbose_equal_all"] = false;
                    object[".gogoproto.face_all"] = false;
                    object[".gogoproto.gostring_all"] = false;
                    object[".gogoproto.populate_all"] = false;
                    object[".gogoproto.stringer_all"] = false;
                    object[".gogoproto.onlyone_all"] = false;
                    object[".gogoproto.equal_all"] = false;
                    object[".gogoproto.description_all"] = false;
                    object[".gogoproto.testgen_all"] = false;
                    object[".gogoproto.benchgen_all"] = false;
                    object[".gogoproto.marshaler_all"] = false;
                    object[".gogoproto.unmarshaler_all"] = false;
                    object[".gogoproto.stable_marshaler_all"] = false;
                    object[".gogoproto.sizer_all"] = false;
                    object[".gogoproto.goproto_enum_stringer_all"] = false;
                    object[".gogoproto.enum_stringer_all"] = false;
                    object[".gogoproto.unsafe_marshaler_all"] = false;
                    object[".gogoproto.unsafe_unmarshaler_all"] = false;
                    object[".gogoproto.goproto_extensions_map_all"] = false;
                    object[".gogoproto.goproto_unrecognized_all"] = false;
                    object[".gogoproto.gogoproto_import"] = false;
                    object[".gogoproto.protosizer_all"] = false;
                    object[".gogoproto.compare_all"] = false;
                    object[".gogoproto.typedecl_all"] = false;
                    object[".gogoproto.enumdecl_all"] = false;
                    object[".gogoproto.goproto_registration"] = false;
                    object[".gogoproto.messagename_all"] = false;
                    object[".gogoproto.goproto_sizecache_all"] = false;
                    object[".gogoproto.goproto_unkeyed_all"] = false;
                }
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    object.java_package = message.java_package;
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    object.java_outer_classname = message.java_outer_classname;
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    object.java_multiple_files = message.java_multiple_files;
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    object.go_package = message.go_package;
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    object.cc_generic_services = message.cc_generic_services;
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    object.java_generic_services = message.java_generic_services;
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    object.py_generic_services = message.py_generic_services;
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    object.java_string_check_utf8 = message.java_string_check_utf8;
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    object.cc_enable_arenas = message.cc_enable_arenas;
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    object.objc_class_prefix = message.objc_class_prefix;
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    object.csharp_namespace = message.csharp_namespace;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                    object[".gogoproto.goproto_getters_all"] = message[".gogoproto.goproto_getters_all"];
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                    object[".gogoproto.goproto_enum_prefix_all"] = message[".gogoproto.goproto_enum_prefix_all"];
                if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                    object[".gogoproto.goproto_stringer_all"] = message[".gogoproto.goproto_stringer_all"];
                if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                    object[".gogoproto.verbose_equal_all"] = message[".gogoproto.verbose_equal_all"];
                if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                    object[".gogoproto.face_all"] = message[".gogoproto.face_all"];
                if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                    object[".gogoproto.gostring_all"] = message[".gogoproto.gostring_all"];
                if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                    object[".gogoproto.populate_all"] = message[".gogoproto.populate_all"];
                if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                    object[".gogoproto.stringer_all"] = message[".gogoproto.stringer_all"];
                if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                    object[".gogoproto.onlyone_all"] = message[".gogoproto.onlyone_all"];
                if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                    object[".gogoproto.equal_all"] = message[".gogoproto.equal_all"];
                if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                    object[".gogoproto.description_all"] = message[".gogoproto.description_all"];
                if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                    object[".gogoproto.testgen_all"] = message[".gogoproto.testgen_all"];
                if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                    object[".gogoproto.benchgen_all"] = message[".gogoproto.benchgen_all"];
                if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                    object[".gogoproto.marshaler_all"] = message[".gogoproto.marshaler_all"];
                if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                    object[".gogoproto.unmarshaler_all"] = message[".gogoproto.unmarshaler_all"];
                if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                    object[".gogoproto.stable_marshaler_all"] = message[".gogoproto.stable_marshaler_all"];
                if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                    object[".gogoproto.sizer_all"] = message[".gogoproto.sizer_all"];
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                    object[".gogoproto.goproto_enum_stringer_all"] = message[".gogoproto.goproto_enum_stringer_all"];
                if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                    object[".gogoproto.enum_stringer_all"] = message[".gogoproto.enum_stringer_all"];
                if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                    object[".gogoproto.unsafe_marshaler_all"] = message[".gogoproto.unsafe_marshaler_all"];
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                    object[".gogoproto.unsafe_unmarshaler_all"] = message[".gogoproto.unsafe_unmarshaler_all"];
                if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                    object[".gogoproto.goproto_extensions_map_all"] = message[".gogoproto.goproto_extensions_map_all"];
                if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                    object[".gogoproto.goproto_unrecognized_all"] = message[".gogoproto.goproto_unrecognized_all"];
                if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                    object[".gogoproto.gogoproto_import"] = message[".gogoproto.gogoproto_import"];
                if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                    object[".gogoproto.protosizer_all"] = message[".gogoproto.protosizer_all"];
                if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                    object[".gogoproto.compare_all"] = message[".gogoproto.compare_all"];
                if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                    object[".gogoproto.typedecl_all"] = message[".gogoproto.typedecl_all"];
                if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                    object[".gogoproto.enumdecl_all"] = message[".gogoproto.enumdecl_all"];
                if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                    object[".gogoproto.goproto_registration"] = message[".gogoproto.goproto_registration"];
                if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                    object[".gogoproto.messagename_all"] = message[".gogoproto.messagename_all"];
                if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                    object[".gogoproto.goproto_sizecache_all"] = message[".gogoproto.goproto_sizecache_all"];
                if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                    object[".gogoproto.goproto_unkeyed_all"] = message[".gogoproto.goproto_unkeyed_all"];
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
             * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [map_entry] MessageOptions map_entry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters"] MessageOptions .gogoproto.goproto_getters
             * @property {boolean|null} [".gogoproto.goproto_stringer"] MessageOptions .gogoproto.goproto_stringer
             * @property {boolean|null} [".gogoproto.verbose_equal"] MessageOptions .gogoproto.verbose_equal
             * @property {boolean|null} [".gogoproto.face"] MessageOptions .gogoproto.face
             * @property {boolean|null} [".gogoproto.gostring"] MessageOptions .gogoproto.gostring
             * @property {boolean|null} [".gogoproto.populate"] MessageOptions .gogoproto.populate
             * @property {boolean|null} [".gogoproto.stringer"] MessageOptions .gogoproto.stringer
             * @property {boolean|null} [".gogoproto.onlyone"] MessageOptions .gogoproto.onlyone
             * @property {boolean|null} [".gogoproto.equal"] MessageOptions .gogoproto.equal
             * @property {boolean|null} [".gogoproto.description"] MessageOptions .gogoproto.description
             * @property {boolean|null} [".gogoproto.testgen"] MessageOptions .gogoproto.testgen
             * @property {boolean|null} [".gogoproto.benchgen"] MessageOptions .gogoproto.benchgen
             * @property {boolean|null} [".gogoproto.marshaler"] MessageOptions .gogoproto.marshaler
             * @property {boolean|null} [".gogoproto.unmarshaler"] MessageOptions .gogoproto.unmarshaler
             * @property {boolean|null} [".gogoproto.stable_marshaler"] MessageOptions .gogoproto.stable_marshaler
             * @property {boolean|null} [".gogoproto.sizer"] MessageOptions .gogoproto.sizer
             * @property {boolean|null} [".gogoproto.unsafe_marshaler"] MessageOptions .gogoproto.unsafe_marshaler
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler"] MessageOptions .gogoproto.unsafe_unmarshaler
             * @property {boolean|null} [".gogoproto.goproto_extensions_map"] MessageOptions .gogoproto.goproto_extensions_map
             * @property {boolean|null} [".gogoproto.goproto_unrecognized"] MessageOptions .gogoproto.goproto_unrecognized
             * @property {boolean|null} [".gogoproto.protosizer"] MessageOptions .gogoproto.protosizer
             * @property {boolean|null} [".gogoproto.compare"] MessageOptions .gogoproto.compare
             * @property {boolean|null} [".gogoproto.typedecl"] MessageOptions .gogoproto.typedecl
             * @property {boolean|null} [".gogoproto.messagename"] MessageOptions .gogoproto.messagename
             * @property {boolean|null} [".gogoproto.goproto_sizecache"] MessageOptions .gogoproto.goproto_sizecache
             * @property {boolean|null} [".gogoproto.goproto_unkeyed"] MessageOptions .gogoproto.goproto_unkeyed
             * @property {string|null} [".cosmos_proto.interface_type"] MessageOptions .cosmos_proto.interface_type
             * @property {string|null} [".cosmos_proto.implements_interface"] MessageOptions .cosmos_proto.implements_interface
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions message_set_wire_format.
             * @member {boolean} message_set_wire_format
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.message_set_wire_format = false;

            /**
             * MessageOptions no_standard_descriptor_accessor.
             * @member {boolean} no_standard_descriptor_accessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.no_standard_descriptor_accessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions map_entry.
             * @member {boolean} map_entry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.map_entry = false;

            /**
             * MessageOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MessageOptions .gogoproto.goproto_getters.
             * @member {boolean} .gogoproto.goproto_getters
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_getters"] = false;

            /**
             * MessageOptions .gogoproto.goproto_stringer.
             * @member {boolean} .gogoproto.goproto_stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_stringer"] = false;

            /**
             * MessageOptions .gogoproto.verbose_equal.
             * @member {boolean} .gogoproto.verbose_equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.verbose_equal"] = false;

            /**
             * MessageOptions .gogoproto.face.
             * @member {boolean} .gogoproto.face
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.face"] = false;

            /**
             * MessageOptions .gogoproto.gostring.
             * @member {boolean} .gogoproto.gostring
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.gostring"] = false;

            /**
             * MessageOptions .gogoproto.populate.
             * @member {boolean} .gogoproto.populate
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.populate"] = false;

            /**
             * MessageOptions .gogoproto.stringer.
             * @member {boolean} .gogoproto.stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stringer"] = false;

            /**
             * MessageOptions .gogoproto.onlyone.
             * @member {boolean} .gogoproto.onlyone
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.onlyone"] = false;

            /**
             * MessageOptions .gogoproto.equal.
             * @member {boolean} .gogoproto.equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.equal"] = false;

            /**
             * MessageOptions .gogoproto.description.
             * @member {boolean} .gogoproto.description
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.description"] = false;

            /**
             * MessageOptions .gogoproto.testgen.
             * @member {boolean} .gogoproto.testgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.testgen"] = false;

            /**
             * MessageOptions .gogoproto.benchgen.
             * @member {boolean} .gogoproto.benchgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.benchgen"] = false;

            /**
             * MessageOptions .gogoproto.marshaler.
             * @member {boolean} .gogoproto.marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unmarshaler.
             * @member {boolean} .gogoproto.unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.stable_marshaler.
             * @member {boolean} .gogoproto.stable_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stable_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.sizer.
             * @member {boolean} .gogoproto.sizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.sizer"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_marshaler.
             * @member {boolean} .gogoproto.unsafe_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_unmarshaler.
             * @member {boolean} .gogoproto.unsafe_unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.goproto_extensions_map.
             * @member {boolean} .gogoproto.goproto_extensions_map
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_extensions_map"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unrecognized.
             * @member {boolean} .gogoproto.goproto_unrecognized
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unrecognized"] = false;

            /**
             * MessageOptions .gogoproto.protosizer.
             * @member {boolean} .gogoproto.protosizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.protosizer"] = false;

            /**
             * MessageOptions .gogoproto.compare.
             * @member {boolean} .gogoproto.compare
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.compare"] = false;

            /**
             * MessageOptions .gogoproto.typedecl.
             * @member {boolean} .gogoproto.typedecl
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.typedecl"] = false;

            /**
             * MessageOptions .gogoproto.messagename.
             * @member {boolean} .gogoproto.messagename
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.messagename"] = false;

            /**
             * MessageOptions .gogoproto.goproto_sizecache.
             * @member {boolean} .gogoproto.goproto_sizecache
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_sizecache"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unkeyed.
             * @member {boolean} .gogoproto.goproto_unkeyed
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unkeyed"] = false;

            /**
             * MessageOptions .cosmos_proto.interface_type.
             * @member {string} .cosmos_proto.interface_type
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".cosmos_proto.interface_type"] = "";

            /**
             * MessageOptions .cosmos_proto.implements_interface.
             * @member {string} .cosmos_proto.implements_interface
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".cosmos_proto.implements_interface"] = "";

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_getters"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters"))
                    writer.uint32(/* id 64001, wireType 0 =*/512008).bool(message[".gogoproto.goproto_getters"]);
                if (message[".gogoproto.goproto_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer"))
                    writer.uint32(/* id 64003, wireType 0 =*/512024).bool(message[".gogoproto.goproto_stringer"]);
                if (message[".gogoproto.verbose_equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal"))
                    writer.uint32(/* id 64004, wireType 0 =*/512032).bool(message[".gogoproto.verbose_equal"]);
                if (message[".gogoproto.face"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face"))
                    writer.uint32(/* id 64005, wireType 0 =*/512040).bool(message[".gogoproto.face"]);
                if (message[".gogoproto.gostring"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring"))
                    writer.uint32(/* id 64006, wireType 0 =*/512048).bool(message[".gogoproto.gostring"]);
                if (message[".gogoproto.populate"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate"))
                    writer.uint32(/* id 64007, wireType 0 =*/512056).bool(message[".gogoproto.populate"]);
                if (message[".gogoproto.onlyone"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone"))
                    writer.uint32(/* id 64009, wireType 0 =*/512072).bool(message[".gogoproto.onlyone"]);
                if (message[".gogoproto.equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal"))
                    writer.uint32(/* id 64013, wireType 0 =*/512104).bool(message[".gogoproto.equal"]);
                if (message[".gogoproto.description"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description"))
                    writer.uint32(/* id 64014, wireType 0 =*/512112).bool(message[".gogoproto.description"]);
                if (message[".gogoproto.testgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen"))
                    writer.uint32(/* id 64015, wireType 0 =*/512120).bool(message[".gogoproto.testgen"]);
                if (message[".gogoproto.benchgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen"))
                    writer.uint32(/* id 64016, wireType 0 =*/512128).bool(message[".gogoproto.benchgen"]);
                if (message[".gogoproto.marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler"))
                    writer.uint32(/* id 64017, wireType 0 =*/512136).bool(message[".gogoproto.marshaler"]);
                if (message[".gogoproto.unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler"))
                    writer.uint32(/* id 64018, wireType 0 =*/512144).bool(message[".gogoproto.unmarshaler"]);
                if (message[".gogoproto.stable_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler"))
                    writer.uint32(/* id 64019, wireType 0 =*/512152).bool(message[".gogoproto.stable_marshaler"]);
                if (message[".gogoproto.sizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer"))
                    writer.uint32(/* id 64020, wireType 0 =*/512160).bool(message[".gogoproto.sizer"]);
                if (message[".gogoproto.unsafe_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler"))
                    writer.uint32(/* id 64023, wireType 0 =*/512184).bool(message[".gogoproto.unsafe_marshaler"]);
                if (message[".gogoproto.unsafe_unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler"))
                    writer.uint32(/* id 64024, wireType 0 =*/512192).bool(message[".gogoproto.unsafe_unmarshaler"]);
                if (message[".gogoproto.goproto_extensions_map"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map"))
                    writer.uint32(/* id 64025, wireType 0 =*/512200).bool(message[".gogoproto.goproto_extensions_map"]);
                if (message[".gogoproto.goproto_unrecognized"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized"))
                    writer.uint32(/* id 64026, wireType 0 =*/512208).bool(message[".gogoproto.goproto_unrecognized"]);
                if (message[".gogoproto.protosizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer"))
                    writer.uint32(/* id 64028, wireType 0 =*/512224).bool(message[".gogoproto.protosizer"]);
                if (message[".gogoproto.compare"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare"))
                    writer.uint32(/* id 64029, wireType 0 =*/512232).bool(message[".gogoproto.compare"]);
                if (message[".gogoproto.typedecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl"))
                    writer.uint32(/* id 64030, wireType 0 =*/512240).bool(message[".gogoproto.typedecl"]);
                if (message[".gogoproto.messagename"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename"))
                    writer.uint32(/* id 64033, wireType 0 =*/512264).bool(message[".gogoproto.messagename"]);
                if (message[".gogoproto.goproto_sizecache"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache"))
                    writer.uint32(/* id 64034, wireType 0 =*/512272).bool(message[".gogoproto.goproto_sizecache"]);
                if (message[".gogoproto.goproto_unkeyed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed"))
                    writer.uint32(/* id 64035, wireType 0 =*/512280).bool(message[".gogoproto.goproto_unkeyed"]);
                if (message[".gogoproto.stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer"))
                    writer.uint32(/* id 67008, wireType 0 =*/536064).bool(message[".gogoproto.stringer"]);
                if (message[".cosmos_proto.interface_type"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.interface_type"))
                    writer.uint32(/* id 93001, wireType 2 =*/744010).string(message[".cosmos_proto.interface_type"]);
                if (message[".cosmos_proto.implements_interface"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.implements_interface"))
                    writer.uint32(/* id 93002, wireType 2 =*/744018).string(message[".cosmos_proto.implements_interface"]);
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message_set_wire_format = reader.bool();
                        break;
                    case 2:
                        message.no_standard_descriptor_accessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.map_entry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 64001:
                        message[".gogoproto.goproto_getters"] = reader.bool();
                        break;
                    case 64003:
                        message[".gogoproto.goproto_stringer"] = reader.bool();
                        break;
                    case 64004:
                        message[".gogoproto.verbose_equal"] = reader.bool();
                        break;
                    case 64005:
                        message[".gogoproto.face"] = reader.bool();
                        break;
                    case 64006:
                        message[".gogoproto.gostring"] = reader.bool();
                        break;
                    case 64007:
                        message[".gogoproto.populate"] = reader.bool();
                        break;
                    case 67008:
                        message[".gogoproto.stringer"] = reader.bool();
                        break;
                    case 64009:
                        message[".gogoproto.onlyone"] = reader.bool();
                        break;
                    case 64013:
                        message[".gogoproto.equal"] = reader.bool();
                        break;
                    case 64014:
                        message[".gogoproto.description"] = reader.bool();
                        break;
                    case 64015:
                        message[".gogoproto.testgen"] = reader.bool();
                        break;
                    case 64016:
                        message[".gogoproto.benchgen"] = reader.bool();
                        break;
                    case 64017:
                        message[".gogoproto.marshaler"] = reader.bool();
                        break;
                    case 64018:
                        message[".gogoproto.unmarshaler"] = reader.bool();
                        break;
                    case 64019:
                        message[".gogoproto.stable_marshaler"] = reader.bool();
                        break;
                    case 64020:
                        message[".gogoproto.sizer"] = reader.bool();
                        break;
                    case 64023:
                        message[".gogoproto.unsafe_marshaler"] = reader.bool();
                        break;
                    case 64024:
                        message[".gogoproto.unsafe_unmarshaler"] = reader.bool();
                        break;
                    case 64025:
                        message[".gogoproto.goproto_extensions_map"] = reader.bool();
                        break;
                    case 64026:
                        message[".gogoproto.goproto_unrecognized"] = reader.bool();
                        break;
                    case 64028:
                        message[".gogoproto.protosizer"] = reader.bool();
                        break;
                    case 64029:
                        message[".gogoproto.compare"] = reader.bool();
                        break;
                    case 64030:
                        message[".gogoproto.typedecl"] = reader.bool();
                        break;
                    case 64033:
                        message[".gogoproto.messagename"] = reader.bool();
                        break;
                    case 64034:
                        message[".gogoproto.goproto_sizecache"] = reader.bool();
                        break;
                    case 64035:
                        message[".gogoproto.goproto_unkeyed"] = reader.bool();
                        break;
                    case 93001:
                        message[".cosmos_proto.interface_type"] = reader.string();
                        break;
                    case 93002:
                        message[".cosmos_proto.implements_interface"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    if (typeof message.message_set_wire_format !== "boolean")
                        return "message_set_wire_format: boolean expected";
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    if (typeof message.no_standard_descriptor_accessor !== "boolean")
                        return "no_standard_descriptor_accessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    if (typeof message.map_entry !== "boolean")
                        return "map_entry: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                    if (typeof message[".gogoproto.goproto_getters"] !== "boolean")
                        return ".gogoproto.goproto_getters: boolean expected";
                if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                    if (typeof message[".gogoproto.goproto_stringer"] !== "boolean")
                        return ".gogoproto.goproto_stringer: boolean expected";
                if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                    if (typeof message[".gogoproto.verbose_equal"] !== "boolean")
                        return ".gogoproto.verbose_equal: boolean expected";
                if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                    if (typeof message[".gogoproto.face"] !== "boolean")
                        return ".gogoproto.face: boolean expected";
                if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                    if (typeof message[".gogoproto.gostring"] !== "boolean")
                        return ".gogoproto.gostring: boolean expected";
                if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                    if (typeof message[".gogoproto.populate"] !== "boolean")
                        return ".gogoproto.populate: boolean expected";
                if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                    if (typeof message[".gogoproto.stringer"] !== "boolean")
                        return ".gogoproto.stringer: boolean expected";
                if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                    if (typeof message[".gogoproto.onlyone"] !== "boolean")
                        return ".gogoproto.onlyone: boolean expected";
                if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                    if (typeof message[".gogoproto.equal"] !== "boolean")
                        return ".gogoproto.equal: boolean expected";
                if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                    if (typeof message[".gogoproto.description"] !== "boolean")
                        return ".gogoproto.description: boolean expected";
                if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                    if (typeof message[".gogoproto.testgen"] !== "boolean")
                        return ".gogoproto.testgen: boolean expected";
                if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                    if (typeof message[".gogoproto.benchgen"] !== "boolean")
                        return ".gogoproto.benchgen: boolean expected";
                if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                    if (typeof message[".gogoproto.marshaler"] !== "boolean")
                        return ".gogoproto.marshaler: boolean expected";
                if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                    if (typeof message[".gogoproto.unmarshaler"] !== "boolean")
                        return ".gogoproto.unmarshaler: boolean expected";
                if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                    if (typeof message[".gogoproto.stable_marshaler"] !== "boolean")
                        return ".gogoproto.stable_marshaler: boolean expected";
                if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                    if (typeof message[".gogoproto.sizer"] !== "boolean")
                        return ".gogoproto.sizer: boolean expected";
                if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                    if (typeof message[".gogoproto.unsafe_marshaler"] !== "boolean")
                        return ".gogoproto.unsafe_marshaler: boolean expected";
                if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                    if (typeof message[".gogoproto.unsafe_unmarshaler"] !== "boolean")
                        return ".gogoproto.unsafe_unmarshaler: boolean expected";
                if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                    if (typeof message[".gogoproto.goproto_extensions_map"] !== "boolean")
                        return ".gogoproto.goproto_extensions_map: boolean expected";
                if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                    if (typeof message[".gogoproto.goproto_unrecognized"] !== "boolean")
                        return ".gogoproto.goproto_unrecognized: boolean expected";
                if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                    if (typeof message[".gogoproto.protosizer"] !== "boolean")
                        return ".gogoproto.protosizer: boolean expected";
                if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                    if (typeof message[".gogoproto.compare"] !== "boolean")
                        return ".gogoproto.compare: boolean expected";
                if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                    if (typeof message[".gogoproto.typedecl"] !== "boolean")
                        return ".gogoproto.typedecl: boolean expected";
                if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                    if (typeof message[".gogoproto.messagename"] !== "boolean")
                        return ".gogoproto.messagename: boolean expected";
                if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                    if (typeof message[".gogoproto.goproto_sizecache"] !== "boolean")
                        return ".gogoproto.goproto_sizecache: boolean expected";
                if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                    if (typeof message[".gogoproto.goproto_unkeyed"] !== "boolean")
                        return ".gogoproto.goproto_unkeyed: boolean expected";
                if (message[".cosmos_proto.interface_type"] != null && message.hasOwnProperty(".cosmos_proto.interface_type"))
                    if (!$util.isString(message[".cosmos_proto.interface_type"]))
                        return ".cosmos_proto.interface_type: string expected";
                if (message[".cosmos_proto.implements_interface"] != null && message.hasOwnProperty(".cosmos_proto.implements_interface"))
                    if (!$util.isString(message[".cosmos_proto.implements_interface"]))
                        return ".cosmos_proto.implements_interface: string expected";
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.message_set_wire_format != null)
                    message.message_set_wire_format = Boolean(object.message_set_wire_format);
                if (object.no_standard_descriptor_accessor != null)
                    message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.map_entry != null)
                    message.map_entry = Boolean(object.map_entry);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_getters"] != null)
                    message[".gogoproto.goproto_getters"] = Boolean(object[".gogoproto.goproto_getters"]);
                if (object[".gogoproto.goproto_stringer"] != null)
                    message[".gogoproto.goproto_stringer"] = Boolean(object[".gogoproto.goproto_stringer"]);
                if (object[".gogoproto.verbose_equal"] != null)
                    message[".gogoproto.verbose_equal"] = Boolean(object[".gogoproto.verbose_equal"]);
                if (object[".gogoproto.face"] != null)
                    message[".gogoproto.face"] = Boolean(object[".gogoproto.face"]);
                if (object[".gogoproto.gostring"] != null)
                    message[".gogoproto.gostring"] = Boolean(object[".gogoproto.gostring"]);
                if (object[".gogoproto.populate"] != null)
                    message[".gogoproto.populate"] = Boolean(object[".gogoproto.populate"]);
                if (object[".gogoproto.stringer"] != null)
                    message[".gogoproto.stringer"] = Boolean(object[".gogoproto.stringer"]);
                if (object[".gogoproto.onlyone"] != null)
                    message[".gogoproto.onlyone"] = Boolean(object[".gogoproto.onlyone"]);
                if (object[".gogoproto.equal"] != null)
                    message[".gogoproto.equal"] = Boolean(object[".gogoproto.equal"]);
                if (object[".gogoproto.description"] != null)
                    message[".gogoproto.description"] = Boolean(object[".gogoproto.description"]);
                if (object[".gogoproto.testgen"] != null)
                    message[".gogoproto.testgen"] = Boolean(object[".gogoproto.testgen"]);
                if (object[".gogoproto.benchgen"] != null)
                    message[".gogoproto.benchgen"] = Boolean(object[".gogoproto.benchgen"]);
                if (object[".gogoproto.marshaler"] != null)
                    message[".gogoproto.marshaler"] = Boolean(object[".gogoproto.marshaler"]);
                if (object[".gogoproto.unmarshaler"] != null)
                    message[".gogoproto.unmarshaler"] = Boolean(object[".gogoproto.unmarshaler"]);
                if (object[".gogoproto.stable_marshaler"] != null)
                    message[".gogoproto.stable_marshaler"] = Boolean(object[".gogoproto.stable_marshaler"]);
                if (object[".gogoproto.sizer"] != null)
                    message[".gogoproto.sizer"] = Boolean(object[".gogoproto.sizer"]);
                if (object[".gogoproto.unsafe_marshaler"] != null)
                    message[".gogoproto.unsafe_marshaler"] = Boolean(object[".gogoproto.unsafe_marshaler"]);
                if (object[".gogoproto.unsafe_unmarshaler"] != null)
                    message[".gogoproto.unsafe_unmarshaler"] = Boolean(object[".gogoproto.unsafe_unmarshaler"]);
                if (object[".gogoproto.goproto_extensions_map"] != null)
                    message[".gogoproto.goproto_extensions_map"] = Boolean(object[".gogoproto.goproto_extensions_map"]);
                if (object[".gogoproto.goproto_unrecognized"] != null)
                    message[".gogoproto.goproto_unrecognized"] = Boolean(object[".gogoproto.goproto_unrecognized"]);
                if (object[".gogoproto.protosizer"] != null)
                    message[".gogoproto.protosizer"] = Boolean(object[".gogoproto.protosizer"]);
                if (object[".gogoproto.compare"] != null)
                    message[".gogoproto.compare"] = Boolean(object[".gogoproto.compare"]);
                if (object[".gogoproto.typedecl"] != null)
                    message[".gogoproto.typedecl"] = Boolean(object[".gogoproto.typedecl"]);
                if (object[".gogoproto.messagename"] != null)
                    message[".gogoproto.messagename"] = Boolean(object[".gogoproto.messagename"]);
                if (object[".gogoproto.goproto_sizecache"] != null)
                    message[".gogoproto.goproto_sizecache"] = Boolean(object[".gogoproto.goproto_sizecache"]);
                if (object[".gogoproto.goproto_unkeyed"] != null)
                    message[".gogoproto.goproto_unkeyed"] = Boolean(object[".gogoproto.goproto_unkeyed"]);
                if (object[".cosmos_proto.interface_type"] != null)
                    message[".cosmos_proto.interface_type"] = String(object[".cosmos_proto.interface_type"]);
                if (object[".cosmos_proto.implements_interface"] != null)
                    message[".cosmos_proto.implements_interface"] = String(object[".cosmos_proto.implements_interface"]);
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.message_set_wire_format = false;
                    object.no_standard_descriptor_accessor = false;
                    object.deprecated = false;
                    object.map_entry = false;
                    object[".gogoproto.goproto_getters"] = false;
                    object[".gogoproto.goproto_stringer"] = false;
                    object[".gogoproto.verbose_equal"] = false;
                    object[".gogoproto.face"] = false;
                    object[".gogoproto.gostring"] = false;
                    object[".gogoproto.populate"] = false;
                    object[".gogoproto.onlyone"] = false;
                    object[".gogoproto.equal"] = false;
                    object[".gogoproto.description"] = false;
                    object[".gogoproto.testgen"] = false;
                    object[".gogoproto.benchgen"] = false;
                    object[".gogoproto.marshaler"] = false;
                    object[".gogoproto.unmarshaler"] = false;
                    object[".gogoproto.stable_marshaler"] = false;
                    object[".gogoproto.sizer"] = false;
                    object[".gogoproto.unsafe_marshaler"] = false;
                    object[".gogoproto.unsafe_unmarshaler"] = false;
                    object[".gogoproto.goproto_extensions_map"] = false;
                    object[".gogoproto.goproto_unrecognized"] = false;
                    object[".gogoproto.protosizer"] = false;
                    object[".gogoproto.compare"] = false;
                    object[".gogoproto.typedecl"] = false;
                    object[".gogoproto.messagename"] = false;
                    object[".gogoproto.goproto_sizecache"] = false;
                    object[".gogoproto.goproto_unkeyed"] = false;
                    object[".gogoproto.stringer"] = false;
                    object[".cosmos_proto.interface_type"] = "";
                    object[".cosmos_proto.implements_interface"] = "";
                }
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    object.message_set_wire_format = message.message_set_wire_format;
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    object.map_entry = message.map_entry;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                    object[".gogoproto.goproto_getters"] = message[".gogoproto.goproto_getters"];
                if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                    object[".gogoproto.goproto_stringer"] = message[".gogoproto.goproto_stringer"];
                if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                    object[".gogoproto.verbose_equal"] = message[".gogoproto.verbose_equal"];
                if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                    object[".gogoproto.face"] = message[".gogoproto.face"];
                if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                    object[".gogoproto.gostring"] = message[".gogoproto.gostring"];
                if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                    object[".gogoproto.populate"] = message[".gogoproto.populate"];
                if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                    object[".gogoproto.onlyone"] = message[".gogoproto.onlyone"];
                if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                    object[".gogoproto.equal"] = message[".gogoproto.equal"];
                if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                    object[".gogoproto.description"] = message[".gogoproto.description"];
                if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                    object[".gogoproto.testgen"] = message[".gogoproto.testgen"];
                if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                    object[".gogoproto.benchgen"] = message[".gogoproto.benchgen"];
                if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                    object[".gogoproto.marshaler"] = message[".gogoproto.marshaler"];
                if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                    object[".gogoproto.unmarshaler"] = message[".gogoproto.unmarshaler"];
                if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                    object[".gogoproto.stable_marshaler"] = message[".gogoproto.stable_marshaler"];
                if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                    object[".gogoproto.sizer"] = message[".gogoproto.sizer"];
                if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                    object[".gogoproto.unsafe_marshaler"] = message[".gogoproto.unsafe_marshaler"];
                if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                    object[".gogoproto.unsafe_unmarshaler"] = message[".gogoproto.unsafe_unmarshaler"];
                if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                    object[".gogoproto.goproto_extensions_map"] = message[".gogoproto.goproto_extensions_map"];
                if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                    object[".gogoproto.goproto_unrecognized"] = message[".gogoproto.goproto_unrecognized"];
                if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                    object[".gogoproto.protosizer"] = message[".gogoproto.protosizer"];
                if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                    object[".gogoproto.compare"] = message[".gogoproto.compare"];
                if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                    object[".gogoproto.typedecl"] = message[".gogoproto.typedecl"];
                if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                    object[".gogoproto.messagename"] = message[".gogoproto.messagename"];
                if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                    object[".gogoproto.goproto_sizecache"] = message[".gogoproto.goproto_sizecache"];
                if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                    object[".gogoproto.goproto_unkeyed"] = message[".gogoproto.goproto_unkeyed"];
                if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                    object[".gogoproto.stringer"] = message[".gogoproto.stringer"];
                if (message[".cosmos_proto.interface_type"] != null && message.hasOwnProperty(".cosmos_proto.interface_type"))
                    object[".cosmos_proto.interface_type"] = message[".cosmos_proto.interface_type"];
                if (message[".cosmos_proto.implements_interface"] != null && message.hasOwnProperty(".cosmos_proto.implements_interface"))
                    object[".cosmos_proto.implements_interface"] = message[".cosmos_proto.implements_interface"];
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.nullable"] FieldOptions .gogoproto.nullable
             * @property {boolean|null} [".gogoproto.embed"] FieldOptions .gogoproto.embed
             * @property {string|null} [".gogoproto.customtype"] FieldOptions .gogoproto.customtype
             * @property {string|null} [".gogoproto.customname"] FieldOptions .gogoproto.customname
             * @property {string|null} [".gogoproto.jsontag"] FieldOptions .gogoproto.jsontag
             * @property {string|null} [".gogoproto.moretags"] FieldOptions .gogoproto.moretags
             * @property {string|null} [".gogoproto.casttype"] FieldOptions .gogoproto.casttype
             * @property {string|null} [".gogoproto.castkey"] FieldOptions .gogoproto.castkey
             * @property {string|null} [".gogoproto.castvalue"] FieldOptions .gogoproto.castvalue
             * @property {boolean|null} [".gogoproto.stdtime"] FieldOptions .gogoproto.stdtime
             * @property {boolean|null} [".gogoproto.stdduration"] FieldOptions .gogoproto.stdduration
             * @property {boolean|null} [".gogoproto.wktpointer"] FieldOptions .gogoproto.wktpointer
             * @property {string|null} [".gogoproto.castrepeated"] FieldOptions .gogoproto.castrepeated
             * @property {string|null} [".cosmos_proto.accepts_interface"] FieldOptions .cosmos_proto.accepts_interface
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FieldOptions .gogoproto.nullable.
             * @member {boolean} .gogoproto.nullable
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.nullable"] = false;

            /**
             * FieldOptions .gogoproto.embed.
             * @member {boolean} .gogoproto.embed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.embed"] = false;

            /**
             * FieldOptions .gogoproto.customtype.
             * @member {string} .gogoproto.customtype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customtype"] = "";

            /**
             * FieldOptions .gogoproto.customname.
             * @member {string} .gogoproto.customname
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customname"] = "";

            /**
             * FieldOptions .gogoproto.jsontag.
             * @member {string} .gogoproto.jsontag
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.jsontag"] = "";

            /**
             * FieldOptions .gogoproto.moretags.
             * @member {string} .gogoproto.moretags
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.moretags"] = "";

            /**
             * FieldOptions .gogoproto.casttype.
             * @member {string} .gogoproto.casttype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.casttype"] = "";

            /**
             * FieldOptions .gogoproto.castkey.
             * @member {string} .gogoproto.castkey
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castkey"] = "";

            /**
             * FieldOptions .gogoproto.castvalue.
             * @member {string} .gogoproto.castvalue
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castvalue"] = "";

            /**
             * FieldOptions .gogoproto.stdtime.
             * @member {boolean} .gogoproto.stdtime
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdtime"] = false;

            /**
             * FieldOptions .gogoproto.stdduration.
             * @member {boolean} .gogoproto.stdduration
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdduration"] = false;

            /**
             * FieldOptions .gogoproto.wktpointer.
             * @member {boolean} .gogoproto.wktpointer
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.wktpointer"] = false;

            /**
             * FieldOptions .gogoproto.castrepeated.
             * @member {string} .gogoproto.castrepeated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castrepeated"] = "";

            /**
             * FieldOptions .cosmos_proto.accepts_interface.
             * @member {string} .cosmos_proto.accepts_interface
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".cosmos_proto.accepts_interface"] = "";

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.nullable"] != null && Object.hasOwnProperty.call(message, ".gogoproto.nullable"))
                    writer.uint32(/* id 65001, wireType 0 =*/520008).bool(message[".gogoproto.nullable"]);
                if (message[".gogoproto.embed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.embed"))
                    writer.uint32(/* id 65002, wireType 0 =*/520016).bool(message[".gogoproto.embed"]);
                if (message[".gogoproto.customtype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customtype"))
                    writer.uint32(/* id 65003, wireType 2 =*/520026).string(message[".gogoproto.customtype"]);
                if (message[".gogoproto.customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customname"))
                    writer.uint32(/* id 65004, wireType 2 =*/520034).string(message[".gogoproto.customname"]);
                if (message[".gogoproto.jsontag"] != null && Object.hasOwnProperty.call(message, ".gogoproto.jsontag"))
                    writer.uint32(/* id 65005, wireType 2 =*/520042).string(message[".gogoproto.jsontag"]);
                if (message[".gogoproto.moretags"] != null && Object.hasOwnProperty.call(message, ".gogoproto.moretags"))
                    writer.uint32(/* id 65006, wireType 2 =*/520050).string(message[".gogoproto.moretags"]);
                if (message[".gogoproto.casttype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.casttype"))
                    writer.uint32(/* id 65007, wireType 2 =*/520058).string(message[".gogoproto.casttype"]);
                if (message[".gogoproto.castkey"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castkey"))
                    writer.uint32(/* id 65008, wireType 2 =*/520066).string(message[".gogoproto.castkey"]);
                if (message[".gogoproto.castvalue"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castvalue"))
                    writer.uint32(/* id 65009, wireType 2 =*/520074).string(message[".gogoproto.castvalue"]);
                if (message[".gogoproto.stdtime"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdtime"))
                    writer.uint32(/* id 65010, wireType 0 =*/520080).bool(message[".gogoproto.stdtime"]);
                if (message[".gogoproto.stdduration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdduration"))
                    writer.uint32(/* id 65011, wireType 0 =*/520088).bool(message[".gogoproto.stdduration"]);
                if (message[".gogoproto.wktpointer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.wktpointer"))
                    writer.uint32(/* id 65012, wireType 0 =*/520096).bool(message[".gogoproto.wktpointer"]);
                if (message[".gogoproto.castrepeated"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castrepeated"))
                    writer.uint32(/* id 65013, wireType 2 =*/520106).string(message[".gogoproto.castrepeated"]);
                if (message[".cosmos_proto.accepts_interface"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.accepts_interface"))
                    writer.uint32(/* id 93001, wireType 2 =*/744010).string(message[".cosmos_proto.accepts_interface"]);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 65001:
                        message[".gogoproto.nullable"] = reader.bool();
                        break;
                    case 65002:
                        message[".gogoproto.embed"] = reader.bool();
                        break;
                    case 65003:
                        message[".gogoproto.customtype"] = reader.string();
                        break;
                    case 65004:
                        message[".gogoproto.customname"] = reader.string();
                        break;
                    case 65005:
                        message[".gogoproto.jsontag"] = reader.string();
                        break;
                    case 65006:
                        message[".gogoproto.moretags"] = reader.string();
                        break;
                    case 65007:
                        message[".gogoproto.casttype"] = reader.string();
                        break;
                    case 65008:
                        message[".gogoproto.castkey"] = reader.string();
                        break;
                    case 65009:
                        message[".gogoproto.castvalue"] = reader.string();
                        break;
                    case 65010:
                        message[".gogoproto.stdtime"] = reader.bool();
                        break;
                    case 65011:
                        message[".gogoproto.stdduration"] = reader.bool();
                        break;
                    case 65012:
                        message[".gogoproto.wktpointer"] = reader.bool();
                        break;
                    case 65013:
                        message[".gogoproto.castrepeated"] = reader.string();
                        break;
                    case 93001:
                        message[".cosmos_proto.accepts_interface"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                    if (typeof message[".gogoproto.nullable"] !== "boolean")
                        return ".gogoproto.nullable: boolean expected";
                if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                    if (typeof message[".gogoproto.embed"] !== "boolean")
                        return ".gogoproto.embed: boolean expected";
                if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                    if (!$util.isString(message[".gogoproto.customtype"]))
                        return ".gogoproto.customtype: string expected";
                if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                    if (!$util.isString(message[".gogoproto.customname"]))
                        return ".gogoproto.customname: string expected";
                if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                    if (!$util.isString(message[".gogoproto.jsontag"]))
                        return ".gogoproto.jsontag: string expected";
                if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                    if (!$util.isString(message[".gogoproto.moretags"]))
                        return ".gogoproto.moretags: string expected";
                if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                    if (!$util.isString(message[".gogoproto.casttype"]))
                        return ".gogoproto.casttype: string expected";
                if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                    if (!$util.isString(message[".gogoproto.castkey"]))
                        return ".gogoproto.castkey: string expected";
                if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                    if (!$util.isString(message[".gogoproto.castvalue"]))
                        return ".gogoproto.castvalue: string expected";
                if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                    if (typeof message[".gogoproto.stdtime"] !== "boolean")
                        return ".gogoproto.stdtime: boolean expected";
                if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                    if (typeof message[".gogoproto.stdduration"] !== "boolean")
                        return ".gogoproto.stdduration: boolean expected";
                if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                    if (typeof message[".gogoproto.wktpointer"] !== "boolean")
                        return ".gogoproto.wktpointer: boolean expected";
                if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                    if (!$util.isString(message[".gogoproto.castrepeated"]))
                        return ".gogoproto.castrepeated: string expected";
                if (message[".cosmos_proto.accepts_interface"] != null && message.hasOwnProperty(".cosmos_proto.accepts_interface"))
                    if (!$util.isString(message[".cosmos_proto.accepts_interface"]))
                        return ".cosmos_proto.accepts_interface: string expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.nullable"] != null)
                    message[".gogoproto.nullable"] = Boolean(object[".gogoproto.nullable"]);
                if (object[".gogoproto.embed"] != null)
                    message[".gogoproto.embed"] = Boolean(object[".gogoproto.embed"]);
                if (object[".gogoproto.customtype"] != null)
                    message[".gogoproto.customtype"] = String(object[".gogoproto.customtype"]);
                if (object[".gogoproto.customname"] != null)
                    message[".gogoproto.customname"] = String(object[".gogoproto.customname"]);
                if (object[".gogoproto.jsontag"] != null)
                    message[".gogoproto.jsontag"] = String(object[".gogoproto.jsontag"]);
                if (object[".gogoproto.moretags"] != null)
                    message[".gogoproto.moretags"] = String(object[".gogoproto.moretags"]);
                if (object[".gogoproto.casttype"] != null)
                    message[".gogoproto.casttype"] = String(object[".gogoproto.casttype"]);
                if (object[".gogoproto.castkey"] != null)
                    message[".gogoproto.castkey"] = String(object[".gogoproto.castkey"]);
                if (object[".gogoproto.castvalue"] != null)
                    message[".gogoproto.castvalue"] = String(object[".gogoproto.castvalue"]);
                if (object[".gogoproto.stdtime"] != null)
                    message[".gogoproto.stdtime"] = Boolean(object[".gogoproto.stdtime"]);
                if (object[".gogoproto.stdduration"] != null)
                    message[".gogoproto.stdduration"] = Boolean(object[".gogoproto.stdduration"]);
                if (object[".gogoproto.wktpointer"] != null)
                    message[".gogoproto.wktpointer"] = Boolean(object[".gogoproto.wktpointer"]);
                if (object[".gogoproto.castrepeated"] != null)
                    message[".gogoproto.castrepeated"] = String(object[".gogoproto.castrepeated"]);
                if (object[".cosmos_proto.accepts_interface"] != null)
                    message[".cosmos_proto.accepts_interface"] = String(object[".cosmos_proto.accepts_interface"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".gogoproto.nullable"] = false;
                    object[".gogoproto.embed"] = false;
                    object[".gogoproto.customtype"] = "";
                    object[".gogoproto.customname"] = "";
                    object[".gogoproto.jsontag"] = "";
                    object[".gogoproto.moretags"] = "";
                    object[".gogoproto.casttype"] = "";
                    object[".gogoproto.castkey"] = "";
                    object[".gogoproto.castvalue"] = "";
                    object[".gogoproto.stdtime"] = false;
                    object[".gogoproto.stdduration"] = false;
                    object[".gogoproto.wktpointer"] = false;
                    object[".gogoproto.castrepeated"] = "";
                    object[".cosmos_proto.accepts_interface"] = "";
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                    object[".gogoproto.nullable"] = message[".gogoproto.nullable"];
                if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                    object[".gogoproto.embed"] = message[".gogoproto.embed"];
                if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                    object[".gogoproto.customtype"] = message[".gogoproto.customtype"];
                if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                    object[".gogoproto.customname"] = message[".gogoproto.customname"];
                if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                    object[".gogoproto.jsontag"] = message[".gogoproto.jsontag"];
                if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                    object[".gogoproto.moretags"] = message[".gogoproto.moretags"];
                if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                    object[".gogoproto.casttype"] = message[".gogoproto.casttype"];
                if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                    object[".gogoproto.castkey"] = message[".gogoproto.castkey"];
                if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                    object[".gogoproto.castvalue"] = message[".gogoproto.castvalue"];
                if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                    object[".gogoproto.stdtime"] = message[".gogoproto.stdtime"];
                if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                    object[".gogoproto.stdduration"] = message[".gogoproto.stdduration"];
                if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                    object[".gogoproto.wktpointer"] = message[".gogoproto.wktpointer"];
                if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                    object[".gogoproto.castrepeated"] = message[".gogoproto.castrepeated"];
                if (message[".cosmos_proto.accepts_interface"] != null && message.hasOwnProperty(".cosmos_proto.accepts_interface"))
                    object[".cosmos_proto.accepts_interface"] = message[".cosmos_proto.accepts_interface"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allow_alias] EnumOptions allow_alias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix"] EnumOptions .gogoproto.goproto_enum_prefix
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer"] EnumOptions .gogoproto.goproto_enum_stringer
             * @property {boolean|null} [".gogoproto.enum_stringer"] EnumOptions .gogoproto.enum_stringer
             * @property {string|null} [".gogoproto.enum_customname"] EnumOptions .gogoproto.enum_customname
             * @property {boolean|null} [".gogoproto.enumdecl"] EnumOptions .gogoproto.enumdecl
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allow_alias.
             * @member {boolean} allow_alias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allow_alias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumOptions .gogoproto.goproto_enum_prefix.
             * @member {boolean} .gogoproto.goproto_enum_prefix
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_prefix"] = false;

            /**
             * EnumOptions .gogoproto.goproto_enum_stringer.
             * @member {boolean} .gogoproto.goproto_enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_stringer.
             * @member {boolean} .gogoproto.enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_customname.
             * @member {string} .gogoproto.enum_customname
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_customname"] = "";

            /**
             * EnumOptions .gogoproto.enumdecl.
             * @member {boolean} .gogoproto.enumdecl
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enumdecl"] = false;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_enum_prefix"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix"))
                    writer.uint32(/* id 62001, wireType 0 =*/496008).bool(message[".gogoproto.goproto_enum_prefix"]);
                if (message[".gogoproto.goproto_enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer"))
                    writer.uint32(/* id 62021, wireType 0 =*/496168).bool(message[".gogoproto.goproto_enum_stringer"]);
                if (message[".gogoproto.enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer"))
                    writer.uint32(/* id 62022, wireType 0 =*/496176).bool(message[".gogoproto.enum_stringer"]);
                if (message[".gogoproto.enum_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_customname"))
                    writer.uint32(/* id 62023, wireType 2 =*/496186).string(message[".gogoproto.enum_customname"]);
                if (message[".gogoproto.enumdecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl"))
                    writer.uint32(/* id 62024, wireType 0 =*/496192).bool(message[".gogoproto.enumdecl"]);
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allow_alias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 62001:
                        message[".gogoproto.goproto_enum_prefix"] = reader.bool();
                        break;
                    case 62021:
                        message[".gogoproto.goproto_enum_stringer"] = reader.bool();
                        break;
                    case 62022:
                        message[".gogoproto.enum_stringer"] = reader.bool();
                        break;
                    case 62023:
                        message[".gogoproto.enum_customname"] = reader.string();
                        break;
                    case 62024:
                        message[".gogoproto.enumdecl"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    if (typeof message.allow_alias !== "boolean")
                        return "allow_alias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                    if (typeof message[".gogoproto.goproto_enum_prefix"] !== "boolean")
                        return ".gogoproto.goproto_enum_prefix: boolean expected";
                if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                    if (typeof message[".gogoproto.goproto_enum_stringer"] !== "boolean")
                        return ".gogoproto.goproto_enum_stringer: boolean expected";
                if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                    if (typeof message[".gogoproto.enum_stringer"] !== "boolean")
                        return ".gogoproto.enum_stringer: boolean expected";
                if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                    if (!$util.isString(message[".gogoproto.enum_customname"]))
                        return ".gogoproto.enum_customname: string expected";
                if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                    if (typeof message[".gogoproto.enumdecl"] !== "boolean")
                        return ".gogoproto.enumdecl: boolean expected";
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allow_alias != null)
                    message.allow_alias = Boolean(object.allow_alias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_enum_prefix"] != null)
                    message[".gogoproto.goproto_enum_prefix"] = Boolean(object[".gogoproto.goproto_enum_prefix"]);
                if (object[".gogoproto.goproto_enum_stringer"] != null)
                    message[".gogoproto.goproto_enum_stringer"] = Boolean(object[".gogoproto.goproto_enum_stringer"]);
                if (object[".gogoproto.enum_stringer"] != null)
                    message[".gogoproto.enum_stringer"] = Boolean(object[".gogoproto.enum_stringer"]);
                if (object[".gogoproto.enum_customname"] != null)
                    message[".gogoproto.enum_customname"] = String(object[".gogoproto.enum_customname"]);
                if (object[".gogoproto.enumdecl"] != null)
                    message[".gogoproto.enumdecl"] = Boolean(object[".gogoproto.enumdecl"]);
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.allow_alias = false;
                    object.deprecated = false;
                    object[".gogoproto.goproto_enum_prefix"] = false;
                    object[".gogoproto.goproto_enum_stringer"] = false;
                    object[".gogoproto.enum_stringer"] = false;
                    object[".gogoproto.enum_customname"] = "";
                    object[".gogoproto.enumdecl"] = false;
                }
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    object.allow_alias = message.allow_alias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                    object[".gogoproto.goproto_enum_prefix"] = message[".gogoproto.goproto_enum_prefix"];
                if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                    object[".gogoproto.goproto_enum_stringer"] = message[".gogoproto.goproto_enum_stringer"];
                if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                    object[".gogoproto.enum_stringer"] = message[".gogoproto.enum_stringer"];
                if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                    object[".gogoproto.enum_customname"] = message[".gogoproto.enum_customname"];
                if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                    object[".gogoproto.enumdecl"] = message[".gogoproto.enumdecl"];
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
             * @property {string|null} [".gogoproto.enumvalue_customname"] EnumValueOptions .gogoproto.enumvalue_customname
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumValueOptions .gogoproto.enumvalue_customname.
             * @member {string} .gogoproto.enumvalue_customname
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype[".gogoproto.enumvalue_customname"] = "";

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.enumvalue_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumvalue_customname"))
                    writer.uint32(/* id 66001, wireType 2 =*/528010).string(message[".gogoproto.enumvalue_customname"]);
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 66001:
                        message[".gogoproto.enumvalue_customname"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                    if (!$util.isString(message[".gogoproto.enumvalue_customname"]))
                        return ".gogoproto.enumvalue_customname: string expected";
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.enumvalue_customname"] != null)
                    message[".gogoproto.enumvalue_customname"] = String(object[".gogoproto.enumvalue_customname"]);
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".gogoproto.enumvalue_customname"] = "";
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                    object[".gogoproto.enumvalue_customname"] = message[".gogoproto.enumvalue_customname"];
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                    $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 72295728:
                        message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifier_value] UninterpretedOption identifier_value
             * @property {number|null} [positive_int_value] UninterpretedOption positive_int_value
             * @property {number|null} [negative_int_value] UninterpretedOption negative_int_value
             * @property {number|null} [double_value] UninterpretedOption double_value
             * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
             * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifier_value.
             * @member {string} identifier_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifier_value = "";

            /**
             * UninterpretedOption positive_int_value.
             * @member {number} positive_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negative_int_value.
             * @member {number} negative_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption double_value.
             * @member {number} double_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.double_value = 0;

            /**
             * UninterpretedOption string_value.
             * @member {Uint8Array} string_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.string_value = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregate_value.
             * @member {string} aggregate_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregate_value = "";

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (let i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifier_value = reader.string();
                        break;
                    case 4:
                        message.positive_int_value = reader.uint64();
                        break;
                    case 5:
                        message.negative_int_value = reader.int64();
                        break;
                    case 6:
                        message.double_value = reader.double();
                        break;
                    case 7:
                        message.string_value = reader.bytes();
                        break;
                    case 8:
                        message.aggregate_value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    if (!$util.isString(message.identifier_value))
                        return "identifier_value: string expected";
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                        return "positive_int_value: integer|Long expected";
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                        return "negative_int_value: integer|Long expected";
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    if (typeof message.double_value !== "number")
                        return "double_value: number expected";
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                        return "string_value: buffer expected";
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    if (!$util.isString(message.aggregate_value))
                        return "aggregate_value: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifier_value != null)
                    message.identifier_value = String(object.identifier_value);
                if (object.positive_int_value != null)
                    if ($util.Long)
                        (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                    else if (typeof object.positive_int_value === "string")
                        message.positive_int_value = parseInt(object.positive_int_value, 10);
                    else if (typeof object.positive_int_value === "number")
                        message.positive_int_value = object.positive_int_value;
                    else if (typeof object.positive_int_value === "object")
                        message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                if (object.negative_int_value != null)
                    if ($util.Long)
                        (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                    else if (typeof object.negative_int_value === "string")
                        message.negative_int_value = parseInt(object.negative_int_value, 10);
                    else if (typeof object.negative_int_value === "number")
                        message.negative_int_value = object.negative_int_value;
                    else if (typeof object.negative_int_value === "object")
                        message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                if (object.double_value != null)
                    message.double_value = Number(object.double_value);
                if (object.string_value != null)
                    if (typeof object.string_value === "string")
                        $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                    else if (object.string_value.length)
                        message.string_value = object.string_value;
                if (object.aggregate_value != null)
                    message.aggregate_value = String(object.aggregate_value);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifier_value = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positive_int_value = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negative_int_value = options.longs === String ? "0" : 0;
                    object.double_value = 0;
                    if (options.bytes === String)
                        object.string_value = "";
                    else {
                        object.string_value = [];
                        if (options.bytes !== Array)
                            object.string_value = $util.newBuffer(object.string_value);
                    }
                    object.aggregate_value = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    object.identifier_value = message.identifier_value;
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (typeof message.positive_int_value === "number")
                        object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                    else
                        object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (typeof message.negative_int_value === "number")
                        object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                    else
                        object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    object.aggregate_value = message.aggregate_value;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} name_part NamePart name_part
                 * @property {boolean} is_extension NamePart is_extension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart name_part.
                 * @member {string} name_part
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.name_part = "";

                /**
                 * NamePart is_extension.
                 * @member {boolean} is_extension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.is_extension = false;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name_part = reader.string();
                            break;
                        case 2:
                            message.is_extension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("name_part"))
                        throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                    if (!message.hasOwnProperty("is_extension"))
                        throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.name_part))
                        return "name_part: string expected";
                    if (typeof message.is_extension !== "boolean")
                        return "is_extension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.name_part != null)
                        message.name_part = String(object.name_part);
                    if (object.is_extension != null)
                        message.is_extension = Boolean(object.is_extension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.name_part = "";
                        object.is_extension = false;
                    }
                    if (message.name_part != null && message.hasOwnProperty("name_part"))
                        object.name_part = message.name_part;
                    if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                        object.is_extension = message.is_extension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (let i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leading_comments] Location leading_comments
                 * @property {string|null} [trailing_comments] Location trailing_comments
                 * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leading_detached_comments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leading_comments.
                 * @member {string} leading_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_comments = "";

                /**
                 * Location trailing_comments.
                 * @member {string} trailing_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailing_comments = "";

                /**
                 * Location leading_detached_comments.
                 * @member {Array.<string>} leading_detached_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_detached_comments = $util.emptyArray;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                    if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                    if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leading_comments = reader.string();
                            break;
                        case 4:
                            message.trailing_comments = reader.string();
                            break;
                        case 6:
                            if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                message.leading_detached_comments = [];
                            message.leading_detached_comments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        if (!$util.isString(message.leading_comments))
                            return "leading_comments: string expected";
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        if (!$util.isString(message.trailing_comments))
                            return "trailing_comments: string expected";
                    if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                        if (!Array.isArray(message.leading_detached_comments))
                            return "leading_detached_comments: array expected";
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            if (!$util.isString(message.leading_detached_comments[i]))
                                return "leading_detached_comments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leading_comments != null)
                        message.leading_comments = String(object.leading_comments);
                    if (object.trailing_comments != null)
                        message.trailing_comments = String(object.trailing_comments);
                    if (object.leading_detached_comments) {
                        if (!Array.isArray(object.leading_detached_comments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                        message.leading_detached_comments = [];
                        for (let i = 0; i < object.leading_detached_comments.length; ++i)
                            message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leading_detached_comments = [];
                    }
                    if (options.defaults) {
                        object.leading_comments = "";
                        object.trailing_comments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        object.leading_comments = message.leading_comments;
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        object.trailing_comments = message.trailing_comments;
                    if (message.leading_detached_comments && message.leading_detached_comments.length) {
                        object.leading_detached_comments = [];
                        for (let j = 0; j < message.leading_detached_comments.length; ++j)
                            object.leading_detached_comments[j] = message.leading_detached_comments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (let i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [source_file] Annotation source_file
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation source_file.
                 * @member {string} source_file
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.source_file = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.source_file = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        if (!$util.isString(message.source_file))
                            return "source_file: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.source_file != null)
                        message.source_file = String(object.source_file);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.source_file = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        object.source_file = message.source_file;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Any = (function() {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [properties] Properties to set
             */
            function Any(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type_url = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Any message.
             * @function verify
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Any} Any
             */
            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                let message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.Any} message Any
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this Any to JSON.
             * @function toJSON
             * @memberof google.protobuf.Any
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Any;
        })();

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {number|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {number} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                let message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Timestamp;
        })();

        protobuf.Duration = (function() {

            /**
             * Properties of a Duration.
             * @memberof google.protobuf
             * @interface IDuration
             * @property {number|null} [seconds] Duration seconds
             * @property {number|null} [nanos] Duration nanos
             */

            /**
             * Constructs a new Duration.
             * @memberof google.protobuf
             * @classdesc Represents a Duration.
             * @implements IDuration
             * @constructor
             * @param {google.protobuf.IDuration=} [properties] Properties to set
             */
            function Duration(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Duration seconds.
             * @member {number} seconds
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Duration nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.nanos = 0;

            /**
             * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} message Duration message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} message Duration message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Duration message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Duration message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Duration message.
             * @function verify
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Duration.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Duration message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Duration} Duration
             */
            Duration.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Duration)
                    return object;
                let message = new $root.google.protobuf.Duration();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Duration message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.Duration} message Duration
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Duration.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Duration to JSON.
             * @function toJSON
             * @memberof google.protobuf.Duration
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Duration.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Duration;
        })();

        return protobuf;
    })();

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             * @property {boolean|null} [fully_decode_reserved_expansion] Http fully_decode_reserved_expansion
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Http fully_decode_reserved_expansion.
             * @member {boolean} fully_decode_reserved_expansion
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.fully_decode_reserved_expansion = false;

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encode
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rules != null && message.rules.length)
                    for (let i = 0; i < message.rules.length; ++i)
                        $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.fully_decode_reserved_expansion != null && Object.hasOwnProperty.call(message, "fully_decode_reserved_expansion"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fully_decode_reserved_expansion);
                return writer;
            };

            /**
             * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.rules && message.rules.length))
                            message.rules = [];
                        message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.fully_decode_reserved_expansion = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Http message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                    if (typeof message.fully_decode_reserved_expansion !== "boolean")
                        return "fully_decode_reserved_expansion: boolean expected";
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                if (object.fully_decode_reserved_expansion != null)
                    message.fully_decode_reserved_expansion = Boolean(object.fully_decode_reserved_expansion);
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (options.defaults)
                    object.fully_decode_reserved_expansion = false;
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                    object.fully_decode_reserved_expansion = message.fully_decode_reserved_expansion;
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [body] HttpRule body
             * @property {string|null} [response_body] HttpRule response_body
             * @property {Array.<google.api.IHttpRule>|null} [additional_bindings] HttpRule additional_bindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additional_bindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule response_body.
             * @member {string} response_body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.response_body = "";

            /**
             * HttpRule additional_bindings.
             * @member {Array.<google.api.IHttpRule>} additional_bindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additional_bindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                    $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.additional_bindings != null && message.additional_bindings.length)
                    for (let i = 0; i < message.additional_bindings.length; ++i)
                        $root.google.api.HttpRule.encode(message.additional_bindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.response_body != null && Object.hasOwnProperty.call(message, "response_body"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.response_body);
                return writer;
            };

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.selector = reader.string();
                        break;
                    case 2:
                        message.get = reader.string();
                        break;
                    case 3:
                        message.put = reader.string();
                        break;
                    case 4:
                        message.post = reader.string();
                        break;
                    case 5:
                        message["delete"] = reader.string();
                        break;
                    case 6:
                        message.patch = reader.string();
                        break;
                    case 8:
                        message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.body = reader.string();
                        break;
                    case 12:
                        message.response_body = reader.string();
                        break;
                    case 11:
                        if (!(message.additional_bindings && message.additional_bindings.length))
                            message.additional_bindings = [];
                        message.additional_bindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.response_body != null && message.hasOwnProperty("response_body"))
                    if (!$util.isString(message.response_body))
                        return "response_body: string expected";
                if (message.additional_bindings != null && message.hasOwnProperty("additional_bindings")) {
                    if (!Array.isArray(message.additional_bindings))
                        return "additional_bindings: array expected";
                    for (let i = 0; i < message.additional_bindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additional_bindings[i]);
                        if (error)
                            return "additional_bindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.body != null)
                    message.body = String(object.body);
                if (object.response_body != null)
                    message.response_body = String(object.response_body);
                if (object.additional_bindings) {
                    if (!Array.isArray(object.additional_bindings))
                        throw TypeError(".google.api.HttpRule.additional_bindings: array expected");
                    message.additional_bindings = [];
                    for (let i = 0; i < object.additional_bindings.length; ++i) {
                        if (typeof object.additional_bindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additional_bindings: object expected");
                        message.additional_bindings[i] = $root.google.api.HttpRule.fromObject(object.additional_bindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additional_bindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                    object.response_body = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additional_bindings && message.additional_bindings.length) {
                    object.additional_bindings = [];
                    for (let j = 0; j < message.additional_bindings.length; ++j)
                        object.additional_bindings[j] = $root.google.api.HttpRule.toObject(message.additional_bindings[j], options);
                }
                if (message.response_body != null && message.hasOwnProperty("response_body"))
                    object.response_body = message.response_body;
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                return writer;
            };

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.kind = reader.string();
                        break;
                    case 2:
                        message.path = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    return google;
})();

export { $root as default };
